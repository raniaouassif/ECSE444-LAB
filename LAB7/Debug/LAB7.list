
LAB7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079f8  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e4  08007bb8  08007bb8  00017bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d9c  08007d9c  0002011c  2**0
                  CONTENTS
  4 .ARM          00000008  08007d9c  08007d9c  00017d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007da4  08007da4  0002011c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007da4  08007da4  00017da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007da8  08007da8  00017da8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000011c  20000000  08007dac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011c0  2000011c  08007ec8  0002011c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200012dc  08007ec8  000212dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f167  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004169  00000000  00000000  0003f2b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a48  00000000  00000000  00043420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001870  00000000  00000000  00044e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ec54  00000000  00000000  000466d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f978  00000000  00000000  0007532c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011a50a  00000000  00000000  00094ca4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001af1ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007064  00000000  00000000  001af200  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000011c 	.word	0x2000011c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08007ba0 	.word	0x08007ba0

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000120 	.word	0x20000120
 80001fc:	08007ba0 	.word	0x08007ba0

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80005ba:	2300      	movs	r3, #0
 80005bc:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005be:	2003      	movs	r0, #3
 80005c0:	f000 f8dd 	bl	800077e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005c4:	200f      	movs	r0, #15
 80005c6:	f006 fd37 	bl	8007038 <HAL_InitTick>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d002      	beq.n	80005d6 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80005d0:	2301      	movs	r3, #1
 80005d2:	71fb      	strb	r3, [r7, #7]
 80005d4:	e001      	b.n	80005da <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80005d6:	f006 fc27 	bl	8006e28 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80005da:	79fb      	ldrb	r3, [r7, #7]
}
 80005dc:	4618      	mov	r0, r3
 80005de:	3708      	adds	r7, #8
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80005e8:	4b06      	ldr	r3, [pc, #24]	; (8000604 <HAL_IncTick+0x20>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	461a      	mov	r2, r3
 80005ee:	4b06      	ldr	r3, [pc, #24]	; (8000608 <HAL_IncTick+0x24>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4413      	add	r3, r2
 80005f4:	4a04      	ldr	r2, [pc, #16]	; (8000608 <HAL_IncTick+0x24>)
 80005f6:	6013      	str	r3, [r2, #0]
}
 80005f8:	bf00      	nop
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	20000004 	.word	0x20000004
 8000608:	20000138 	.word	0x20000138

0800060c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  return uwTick;
 8000610:	4b03      	ldr	r3, [pc, #12]	; (8000620 <HAL_GetTick+0x14>)
 8000612:	681b      	ldr	r3, [r3, #0]
}
 8000614:	4618      	mov	r0, r3
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	20000138 	.word	0x20000138

08000624 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	f003 0307 	and.w	r3, r3, #7
 8000632:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000634:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <__NVIC_SetPriorityGrouping+0x44>)
 8000636:	68db      	ldr	r3, [r3, #12]
 8000638:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800063a:	68ba      	ldr	r2, [r7, #8]
 800063c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000640:	4013      	ands	r3, r2
 8000642:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000648:	68bb      	ldr	r3, [r7, #8]
 800064a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800064c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000650:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000654:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000656:	4a04      	ldr	r2, [pc, #16]	; (8000668 <__NVIC_SetPriorityGrouping+0x44>)
 8000658:	68bb      	ldr	r3, [r7, #8]
 800065a:	60d3      	str	r3, [r2, #12]
}
 800065c:	bf00      	nop
 800065e:	3714      	adds	r7, #20
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr
 8000668:	e000ed00 	.word	0xe000ed00

0800066c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000670:	4b04      	ldr	r3, [pc, #16]	; (8000684 <__NVIC_GetPriorityGrouping+0x18>)
 8000672:	68db      	ldr	r3, [r3, #12]
 8000674:	0a1b      	lsrs	r3, r3, #8
 8000676:	f003 0307 	and.w	r3, r3, #7
}
 800067a:	4618      	mov	r0, r3
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr
 8000684:	e000ed00 	.word	0xe000ed00

08000688 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000696:	2b00      	cmp	r3, #0
 8000698:	db0b      	blt.n	80006b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800069a:	79fb      	ldrb	r3, [r7, #7]
 800069c:	f003 021f 	and.w	r2, r3, #31
 80006a0:	4907      	ldr	r1, [pc, #28]	; (80006c0 <__NVIC_EnableIRQ+0x38>)
 80006a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a6:	095b      	lsrs	r3, r3, #5
 80006a8:	2001      	movs	r0, #1
 80006aa:	fa00 f202 	lsl.w	r2, r0, r2
 80006ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80006b2:	bf00      	nop
 80006b4:	370c      	adds	r7, #12
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	e000e100 	.word	0xe000e100

080006c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	4603      	mov	r3, r0
 80006cc:	6039      	str	r1, [r7, #0]
 80006ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	db0a      	blt.n	80006ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d8:	683b      	ldr	r3, [r7, #0]
 80006da:	b2da      	uxtb	r2, r3
 80006dc:	490c      	ldr	r1, [pc, #48]	; (8000710 <__NVIC_SetPriority+0x4c>)
 80006de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e2:	0112      	lsls	r2, r2, #4
 80006e4:	b2d2      	uxtb	r2, r2
 80006e6:	440b      	add	r3, r1
 80006e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006ec:	e00a      	b.n	8000704 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ee:	683b      	ldr	r3, [r7, #0]
 80006f0:	b2da      	uxtb	r2, r3
 80006f2:	4908      	ldr	r1, [pc, #32]	; (8000714 <__NVIC_SetPriority+0x50>)
 80006f4:	79fb      	ldrb	r3, [r7, #7]
 80006f6:	f003 030f 	and.w	r3, r3, #15
 80006fa:	3b04      	subs	r3, #4
 80006fc:	0112      	lsls	r2, r2, #4
 80006fe:	b2d2      	uxtb	r2, r2
 8000700:	440b      	add	r3, r1
 8000702:	761a      	strb	r2, [r3, #24]
}
 8000704:	bf00      	nop
 8000706:	370c      	adds	r7, #12
 8000708:	46bd      	mov	sp, r7
 800070a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070e:	4770      	bx	lr
 8000710:	e000e100 	.word	0xe000e100
 8000714:	e000ed00 	.word	0xe000ed00

08000718 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000718:	b480      	push	{r7}
 800071a:	b089      	sub	sp, #36	; 0x24
 800071c:	af00      	add	r7, sp, #0
 800071e:	60f8      	str	r0, [r7, #12]
 8000720:	60b9      	str	r1, [r7, #8]
 8000722:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	f003 0307 	and.w	r3, r3, #7
 800072a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800072c:	69fb      	ldr	r3, [r7, #28]
 800072e:	f1c3 0307 	rsb	r3, r3, #7
 8000732:	2b04      	cmp	r3, #4
 8000734:	bf28      	it	cs
 8000736:	2304      	movcs	r3, #4
 8000738:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800073a:	69fb      	ldr	r3, [r7, #28]
 800073c:	3304      	adds	r3, #4
 800073e:	2b06      	cmp	r3, #6
 8000740:	d902      	bls.n	8000748 <NVIC_EncodePriority+0x30>
 8000742:	69fb      	ldr	r3, [r7, #28]
 8000744:	3b03      	subs	r3, #3
 8000746:	e000      	b.n	800074a <NVIC_EncodePriority+0x32>
 8000748:	2300      	movs	r3, #0
 800074a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800074c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000750:	69bb      	ldr	r3, [r7, #24]
 8000752:	fa02 f303 	lsl.w	r3, r2, r3
 8000756:	43da      	mvns	r2, r3
 8000758:	68bb      	ldr	r3, [r7, #8]
 800075a:	401a      	ands	r2, r3
 800075c:	697b      	ldr	r3, [r7, #20]
 800075e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000760:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	fa01 f303 	lsl.w	r3, r1, r3
 800076a:	43d9      	mvns	r1, r3
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000770:	4313      	orrs	r3, r2
         );
}
 8000772:	4618      	mov	r0, r3
 8000774:	3724      	adds	r7, #36	; 0x24
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr

0800077e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800077e:	b580      	push	{r7, lr}
 8000780:	b082      	sub	sp, #8
 8000782:	af00      	add	r7, sp, #0
 8000784:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000786:	6878      	ldr	r0, [r7, #4]
 8000788:	f7ff ff4c 	bl	8000624 <__NVIC_SetPriorityGrouping>
}
 800078c:	bf00      	nop
 800078e:	3708      	adds	r7, #8
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}

08000794 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b086      	sub	sp, #24
 8000798:	af00      	add	r7, sp, #0
 800079a:	4603      	mov	r3, r0
 800079c:	60b9      	str	r1, [r7, #8]
 800079e:	607a      	str	r2, [r7, #4]
 80007a0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80007a2:	2300      	movs	r3, #0
 80007a4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80007a6:	f7ff ff61 	bl	800066c <__NVIC_GetPriorityGrouping>
 80007aa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007ac:	687a      	ldr	r2, [r7, #4]
 80007ae:	68b9      	ldr	r1, [r7, #8]
 80007b0:	6978      	ldr	r0, [r7, #20]
 80007b2:	f7ff ffb1 	bl	8000718 <NVIC_EncodePriority>
 80007b6:	4602      	mov	r2, r0
 80007b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007bc:	4611      	mov	r1, r2
 80007be:	4618      	mov	r0, r3
 80007c0:	f7ff ff80 	bl	80006c4 <__NVIC_SetPriority>
}
 80007c4:	bf00      	nop
 80007c6:	3718      	adds	r7, #24
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}

080007cc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007da:	4618      	mov	r0, r3
 80007dc:	f7ff ff54 	bl	8000688 <__NVIC_EnableIRQ>
}
 80007e0:	bf00      	nop
 80007e2:	3708      	adds	r7, #8
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b087      	sub	sp, #28
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
 80007f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80007f2:	2300      	movs	r3, #0
 80007f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007f6:	e166      	b.n	8000ac6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	681a      	ldr	r2, [r3, #0]
 80007fc:	2101      	movs	r1, #1
 80007fe:	697b      	ldr	r3, [r7, #20]
 8000800:	fa01 f303 	lsl.w	r3, r1, r3
 8000804:	4013      	ands	r3, r2
 8000806:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	2b00      	cmp	r3, #0
 800080c:	f000 8158 	beq.w	8000ac0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	685b      	ldr	r3, [r3, #4]
 8000814:	f003 0303 	and.w	r3, r3, #3
 8000818:	2b01      	cmp	r3, #1
 800081a:	d005      	beq.n	8000828 <HAL_GPIO_Init+0x40>
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	685b      	ldr	r3, [r3, #4]
 8000820:	f003 0303 	and.w	r3, r3, #3
 8000824:	2b02      	cmp	r3, #2
 8000826:	d130      	bne.n	800088a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	689b      	ldr	r3, [r3, #8]
 800082c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800082e:	697b      	ldr	r3, [r7, #20]
 8000830:	005b      	lsls	r3, r3, #1
 8000832:	2203      	movs	r2, #3
 8000834:	fa02 f303 	lsl.w	r3, r2, r3
 8000838:	43db      	mvns	r3, r3
 800083a:	693a      	ldr	r2, [r7, #16]
 800083c:	4013      	ands	r3, r2
 800083e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	68da      	ldr	r2, [r3, #12]
 8000844:	697b      	ldr	r3, [r7, #20]
 8000846:	005b      	lsls	r3, r3, #1
 8000848:	fa02 f303 	lsl.w	r3, r2, r3
 800084c:	693a      	ldr	r2, [r7, #16]
 800084e:	4313      	orrs	r3, r2
 8000850:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	693a      	ldr	r2, [r7, #16]
 8000856:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	685b      	ldr	r3, [r3, #4]
 800085c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800085e:	2201      	movs	r2, #1
 8000860:	697b      	ldr	r3, [r7, #20]
 8000862:	fa02 f303 	lsl.w	r3, r2, r3
 8000866:	43db      	mvns	r3, r3
 8000868:	693a      	ldr	r2, [r7, #16]
 800086a:	4013      	ands	r3, r2
 800086c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	685b      	ldr	r3, [r3, #4]
 8000872:	091b      	lsrs	r3, r3, #4
 8000874:	f003 0201 	and.w	r2, r3, #1
 8000878:	697b      	ldr	r3, [r7, #20]
 800087a:	fa02 f303 	lsl.w	r3, r2, r3
 800087e:	693a      	ldr	r2, [r7, #16]
 8000880:	4313      	orrs	r3, r2
 8000882:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	693a      	ldr	r2, [r7, #16]
 8000888:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	685b      	ldr	r3, [r3, #4]
 800088e:	f003 0303 	and.w	r3, r3, #3
 8000892:	2b03      	cmp	r3, #3
 8000894:	d017      	beq.n	80008c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	68db      	ldr	r3, [r3, #12]
 800089a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	005b      	lsls	r3, r3, #1
 80008a0:	2203      	movs	r2, #3
 80008a2:	fa02 f303 	lsl.w	r3, r2, r3
 80008a6:	43db      	mvns	r3, r3
 80008a8:	693a      	ldr	r2, [r7, #16]
 80008aa:	4013      	ands	r3, r2
 80008ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	689a      	ldr	r2, [r3, #8]
 80008b2:	697b      	ldr	r3, [r7, #20]
 80008b4:	005b      	lsls	r3, r3, #1
 80008b6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ba:	693a      	ldr	r2, [r7, #16]
 80008bc:	4313      	orrs	r3, r2
 80008be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	693a      	ldr	r2, [r7, #16]
 80008c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	685b      	ldr	r3, [r3, #4]
 80008ca:	f003 0303 	and.w	r3, r3, #3
 80008ce:	2b02      	cmp	r3, #2
 80008d0:	d123      	bne.n	800091a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80008d2:	697b      	ldr	r3, [r7, #20]
 80008d4:	08da      	lsrs	r2, r3, #3
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	3208      	adds	r2, #8
 80008da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	f003 0307 	and.w	r3, r3, #7
 80008e6:	009b      	lsls	r3, r3, #2
 80008e8:	220f      	movs	r2, #15
 80008ea:	fa02 f303 	lsl.w	r3, r2, r3
 80008ee:	43db      	mvns	r3, r3
 80008f0:	693a      	ldr	r2, [r7, #16]
 80008f2:	4013      	ands	r3, r2
 80008f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	691a      	ldr	r2, [r3, #16]
 80008fa:	697b      	ldr	r3, [r7, #20]
 80008fc:	f003 0307 	and.w	r3, r3, #7
 8000900:	009b      	lsls	r3, r3, #2
 8000902:	fa02 f303 	lsl.w	r3, r2, r3
 8000906:	693a      	ldr	r2, [r7, #16]
 8000908:	4313      	orrs	r3, r2
 800090a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	08da      	lsrs	r2, r3, #3
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	3208      	adds	r2, #8
 8000914:	6939      	ldr	r1, [r7, #16]
 8000916:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	005b      	lsls	r3, r3, #1
 8000924:	2203      	movs	r2, #3
 8000926:	fa02 f303 	lsl.w	r3, r2, r3
 800092a:	43db      	mvns	r3, r3
 800092c:	693a      	ldr	r2, [r7, #16]
 800092e:	4013      	ands	r3, r2
 8000930:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	685b      	ldr	r3, [r3, #4]
 8000936:	f003 0203 	and.w	r2, r3, #3
 800093a:	697b      	ldr	r3, [r7, #20]
 800093c:	005b      	lsls	r3, r3, #1
 800093e:	fa02 f303 	lsl.w	r3, r2, r3
 8000942:	693a      	ldr	r2, [r7, #16]
 8000944:	4313      	orrs	r3, r2
 8000946:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	693a      	ldr	r2, [r7, #16]
 800094c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	685b      	ldr	r3, [r3, #4]
 8000952:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000956:	2b00      	cmp	r3, #0
 8000958:	f000 80b2 	beq.w	8000ac0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800095c:	4b61      	ldr	r3, [pc, #388]	; (8000ae4 <HAL_GPIO_Init+0x2fc>)
 800095e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000960:	4a60      	ldr	r2, [pc, #384]	; (8000ae4 <HAL_GPIO_Init+0x2fc>)
 8000962:	f043 0301 	orr.w	r3, r3, #1
 8000966:	6613      	str	r3, [r2, #96]	; 0x60
 8000968:	4b5e      	ldr	r3, [pc, #376]	; (8000ae4 <HAL_GPIO_Init+0x2fc>)
 800096a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800096c:	f003 0301 	and.w	r3, r3, #1
 8000970:	60bb      	str	r3, [r7, #8]
 8000972:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000974:	4a5c      	ldr	r2, [pc, #368]	; (8000ae8 <HAL_GPIO_Init+0x300>)
 8000976:	697b      	ldr	r3, [r7, #20]
 8000978:	089b      	lsrs	r3, r3, #2
 800097a:	3302      	adds	r3, #2
 800097c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000980:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000982:	697b      	ldr	r3, [r7, #20]
 8000984:	f003 0303 	and.w	r3, r3, #3
 8000988:	009b      	lsls	r3, r3, #2
 800098a:	220f      	movs	r2, #15
 800098c:	fa02 f303 	lsl.w	r3, r2, r3
 8000990:	43db      	mvns	r3, r3
 8000992:	693a      	ldr	r2, [r7, #16]
 8000994:	4013      	ands	r3, r2
 8000996:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800099e:	d02b      	beq.n	80009f8 <HAL_GPIO_Init+0x210>
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	4a52      	ldr	r2, [pc, #328]	; (8000aec <HAL_GPIO_Init+0x304>)
 80009a4:	4293      	cmp	r3, r2
 80009a6:	d025      	beq.n	80009f4 <HAL_GPIO_Init+0x20c>
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	4a51      	ldr	r2, [pc, #324]	; (8000af0 <HAL_GPIO_Init+0x308>)
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d01f      	beq.n	80009f0 <HAL_GPIO_Init+0x208>
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	4a50      	ldr	r2, [pc, #320]	; (8000af4 <HAL_GPIO_Init+0x30c>)
 80009b4:	4293      	cmp	r3, r2
 80009b6:	d019      	beq.n	80009ec <HAL_GPIO_Init+0x204>
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	4a4f      	ldr	r2, [pc, #316]	; (8000af8 <HAL_GPIO_Init+0x310>)
 80009bc:	4293      	cmp	r3, r2
 80009be:	d013      	beq.n	80009e8 <HAL_GPIO_Init+0x200>
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	4a4e      	ldr	r2, [pc, #312]	; (8000afc <HAL_GPIO_Init+0x314>)
 80009c4:	4293      	cmp	r3, r2
 80009c6:	d00d      	beq.n	80009e4 <HAL_GPIO_Init+0x1fc>
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	4a4d      	ldr	r2, [pc, #308]	; (8000b00 <HAL_GPIO_Init+0x318>)
 80009cc:	4293      	cmp	r3, r2
 80009ce:	d007      	beq.n	80009e0 <HAL_GPIO_Init+0x1f8>
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	4a4c      	ldr	r2, [pc, #304]	; (8000b04 <HAL_GPIO_Init+0x31c>)
 80009d4:	4293      	cmp	r3, r2
 80009d6:	d101      	bne.n	80009dc <HAL_GPIO_Init+0x1f4>
 80009d8:	2307      	movs	r3, #7
 80009da:	e00e      	b.n	80009fa <HAL_GPIO_Init+0x212>
 80009dc:	2308      	movs	r3, #8
 80009de:	e00c      	b.n	80009fa <HAL_GPIO_Init+0x212>
 80009e0:	2306      	movs	r3, #6
 80009e2:	e00a      	b.n	80009fa <HAL_GPIO_Init+0x212>
 80009e4:	2305      	movs	r3, #5
 80009e6:	e008      	b.n	80009fa <HAL_GPIO_Init+0x212>
 80009e8:	2304      	movs	r3, #4
 80009ea:	e006      	b.n	80009fa <HAL_GPIO_Init+0x212>
 80009ec:	2303      	movs	r3, #3
 80009ee:	e004      	b.n	80009fa <HAL_GPIO_Init+0x212>
 80009f0:	2302      	movs	r3, #2
 80009f2:	e002      	b.n	80009fa <HAL_GPIO_Init+0x212>
 80009f4:	2301      	movs	r3, #1
 80009f6:	e000      	b.n	80009fa <HAL_GPIO_Init+0x212>
 80009f8:	2300      	movs	r3, #0
 80009fa:	697a      	ldr	r2, [r7, #20]
 80009fc:	f002 0203 	and.w	r2, r2, #3
 8000a00:	0092      	lsls	r2, r2, #2
 8000a02:	4093      	lsls	r3, r2
 8000a04:	693a      	ldr	r2, [r7, #16]
 8000a06:	4313      	orrs	r3, r2
 8000a08:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a0a:	4937      	ldr	r1, [pc, #220]	; (8000ae8 <HAL_GPIO_Init+0x300>)
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	089b      	lsrs	r3, r3, #2
 8000a10:	3302      	adds	r3, #2
 8000a12:	693a      	ldr	r2, [r7, #16]
 8000a14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000a18:	4b3b      	ldr	r3, [pc, #236]	; (8000b08 <HAL_GPIO_Init+0x320>)
 8000a1a:	689b      	ldr	r3, [r3, #8]
 8000a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	43db      	mvns	r3, r3
 8000a22:	693a      	ldr	r2, [r7, #16]
 8000a24:	4013      	ands	r3, r2
 8000a26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d003      	beq.n	8000a3c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8000a34:	693a      	ldr	r2, [r7, #16]
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	4313      	orrs	r3, r2
 8000a3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000a3c:	4a32      	ldr	r2, [pc, #200]	; (8000b08 <HAL_GPIO_Init+0x320>)
 8000a3e:	693b      	ldr	r3, [r7, #16]
 8000a40:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000a42:	4b31      	ldr	r3, [pc, #196]	; (8000b08 <HAL_GPIO_Init+0x320>)
 8000a44:	68db      	ldr	r3, [r3, #12]
 8000a46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	43db      	mvns	r3, r3
 8000a4c:	693a      	ldr	r2, [r7, #16]
 8000a4e:	4013      	ands	r3, r2
 8000a50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	685b      	ldr	r3, [r3, #4]
 8000a56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d003      	beq.n	8000a66 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8000a5e:	693a      	ldr	r2, [r7, #16]
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	4313      	orrs	r3, r2
 8000a64:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000a66:	4a28      	ldr	r2, [pc, #160]	; (8000b08 <HAL_GPIO_Init+0x320>)
 8000a68:	693b      	ldr	r3, [r7, #16]
 8000a6a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000a6c:	4b26      	ldr	r3, [pc, #152]	; (8000b08 <HAL_GPIO_Init+0x320>)
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	43db      	mvns	r3, r3
 8000a76:	693a      	ldr	r2, [r7, #16]
 8000a78:	4013      	ands	r3, r2
 8000a7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d003      	beq.n	8000a90 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8000a88:	693a      	ldr	r2, [r7, #16]
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	4313      	orrs	r3, r2
 8000a8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000a90:	4a1d      	ldr	r2, [pc, #116]	; (8000b08 <HAL_GPIO_Init+0x320>)
 8000a92:	693b      	ldr	r3, [r7, #16]
 8000a94:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000a96:	4b1c      	ldr	r3, [pc, #112]	; (8000b08 <HAL_GPIO_Init+0x320>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	43db      	mvns	r3, r3
 8000aa0:	693a      	ldr	r2, [r7, #16]
 8000aa2:	4013      	ands	r3, r2
 8000aa4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	685b      	ldr	r3, [r3, #4]
 8000aaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d003      	beq.n	8000aba <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8000ab2:	693a      	ldr	r2, [r7, #16]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	4313      	orrs	r3, r2
 8000ab8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000aba:	4a13      	ldr	r2, [pc, #76]	; (8000b08 <HAL_GPIO_Init+0x320>)
 8000abc:	693b      	ldr	r3, [r7, #16]
 8000abe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	3301      	adds	r3, #1
 8000ac4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	681a      	ldr	r2, [r3, #0]
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	fa22 f303 	lsr.w	r3, r2, r3
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	f47f ae91 	bne.w	80007f8 <HAL_GPIO_Init+0x10>
  }
}
 8000ad6:	bf00      	nop
 8000ad8:	bf00      	nop
 8000ada:	371c      	adds	r7, #28
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr
 8000ae4:	40021000 	.word	0x40021000
 8000ae8:	40010000 	.word	0x40010000
 8000aec:	48000400 	.word	0x48000400
 8000af0:	48000800 	.word	0x48000800
 8000af4:	48000c00 	.word	0x48000c00
 8000af8:	48001000 	.word	0x48001000
 8000afc:	48001400 	.word	0x48001400
 8000b00:	48001800 	.word	0x48001800
 8000b04:	48001c00 	.word	0x48001c00
 8000b08:	40010400 	.word	0x40010400

08000b0c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b087      	sub	sp, #28
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
 8000b14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b16:	2300      	movs	r3, #0
 8000b18:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8000b1a:	e0c9      	b.n	8000cb0 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	fa02 f303 	lsl.w	r3, r2, r3
 8000b24:	683a      	ldr	r2, [r7, #0]
 8000b26:	4013      	ands	r3, r2
 8000b28:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8000b2a:	693b      	ldr	r3, [r7, #16]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	f000 80bc 	beq.w	8000caa <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8000b32:	4a66      	ldr	r2, [pc, #408]	; (8000ccc <HAL_GPIO_DeInit+0x1c0>)
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	089b      	lsrs	r3, r3, #2
 8000b38:	3302      	adds	r3, #2
 8000b3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b3e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	f003 0303 	and.w	r3, r3, #3
 8000b46:	009b      	lsls	r3, r3, #2
 8000b48:	220f      	movs	r2, #15
 8000b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4e:	68fa      	ldr	r2, [r7, #12]
 8000b50:	4013      	ands	r3, r2
 8000b52:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000b5a:	d02b      	beq.n	8000bb4 <HAL_GPIO_DeInit+0xa8>
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	4a5c      	ldr	r2, [pc, #368]	; (8000cd0 <HAL_GPIO_DeInit+0x1c4>)
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d025      	beq.n	8000bb0 <HAL_GPIO_DeInit+0xa4>
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	4a5b      	ldr	r2, [pc, #364]	; (8000cd4 <HAL_GPIO_DeInit+0x1c8>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d01f      	beq.n	8000bac <HAL_GPIO_DeInit+0xa0>
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	4a5a      	ldr	r2, [pc, #360]	; (8000cd8 <HAL_GPIO_DeInit+0x1cc>)
 8000b70:	4293      	cmp	r3, r2
 8000b72:	d019      	beq.n	8000ba8 <HAL_GPIO_DeInit+0x9c>
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	4a59      	ldr	r2, [pc, #356]	; (8000cdc <HAL_GPIO_DeInit+0x1d0>)
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d013      	beq.n	8000ba4 <HAL_GPIO_DeInit+0x98>
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	4a58      	ldr	r2, [pc, #352]	; (8000ce0 <HAL_GPIO_DeInit+0x1d4>)
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d00d      	beq.n	8000ba0 <HAL_GPIO_DeInit+0x94>
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	4a57      	ldr	r2, [pc, #348]	; (8000ce4 <HAL_GPIO_DeInit+0x1d8>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d007      	beq.n	8000b9c <HAL_GPIO_DeInit+0x90>
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	4a56      	ldr	r2, [pc, #344]	; (8000ce8 <HAL_GPIO_DeInit+0x1dc>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d101      	bne.n	8000b98 <HAL_GPIO_DeInit+0x8c>
 8000b94:	2307      	movs	r3, #7
 8000b96:	e00e      	b.n	8000bb6 <HAL_GPIO_DeInit+0xaa>
 8000b98:	2308      	movs	r3, #8
 8000b9a:	e00c      	b.n	8000bb6 <HAL_GPIO_DeInit+0xaa>
 8000b9c:	2306      	movs	r3, #6
 8000b9e:	e00a      	b.n	8000bb6 <HAL_GPIO_DeInit+0xaa>
 8000ba0:	2305      	movs	r3, #5
 8000ba2:	e008      	b.n	8000bb6 <HAL_GPIO_DeInit+0xaa>
 8000ba4:	2304      	movs	r3, #4
 8000ba6:	e006      	b.n	8000bb6 <HAL_GPIO_DeInit+0xaa>
 8000ba8:	2303      	movs	r3, #3
 8000baa:	e004      	b.n	8000bb6 <HAL_GPIO_DeInit+0xaa>
 8000bac:	2302      	movs	r3, #2
 8000bae:	e002      	b.n	8000bb6 <HAL_GPIO_DeInit+0xaa>
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	e000      	b.n	8000bb6 <HAL_GPIO_DeInit+0xaa>
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	697a      	ldr	r2, [r7, #20]
 8000bb8:	f002 0203 	and.w	r2, r2, #3
 8000bbc:	0092      	lsls	r2, r2, #2
 8000bbe:	4093      	lsls	r3, r2
 8000bc0:	68fa      	ldr	r2, [r7, #12]
 8000bc2:	429a      	cmp	r2, r3
 8000bc4:	d132      	bne.n	8000c2c <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8000bc6:	4b49      	ldr	r3, [pc, #292]	; (8000cec <HAL_GPIO_DeInit+0x1e0>)
 8000bc8:	681a      	ldr	r2, [r3, #0]
 8000bca:	693b      	ldr	r3, [r7, #16]
 8000bcc:	43db      	mvns	r3, r3
 8000bce:	4947      	ldr	r1, [pc, #284]	; (8000cec <HAL_GPIO_DeInit+0x1e0>)
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8000bd4:	4b45      	ldr	r3, [pc, #276]	; (8000cec <HAL_GPIO_DeInit+0x1e0>)
 8000bd6:	685a      	ldr	r2, [r3, #4]
 8000bd8:	693b      	ldr	r3, [r7, #16]
 8000bda:	43db      	mvns	r3, r3
 8000bdc:	4943      	ldr	r1, [pc, #268]	; (8000cec <HAL_GPIO_DeInit+0x1e0>)
 8000bde:	4013      	ands	r3, r2
 8000be0:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8000be2:	4b42      	ldr	r3, [pc, #264]	; (8000cec <HAL_GPIO_DeInit+0x1e0>)
 8000be4:	68da      	ldr	r2, [r3, #12]
 8000be6:	693b      	ldr	r3, [r7, #16]
 8000be8:	43db      	mvns	r3, r3
 8000bea:	4940      	ldr	r1, [pc, #256]	; (8000cec <HAL_GPIO_DeInit+0x1e0>)
 8000bec:	4013      	ands	r3, r2
 8000bee:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8000bf0:	4b3e      	ldr	r3, [pc, #248]	; (8000cec <HAL_GPIO_DeInit+0x1e0>)
 8000bf2:	689a      	ldr	r2, [r3, #8]
 8000bf4:	693b      	ldr	r3, [r7, #16]
 8000bf6:	43db      	mvns	r3, r3
 8000bf8:	493c      	ldr	r1, [pc, #240]	; (8000cec <HAL_GPIO_DeInit+0x1e0>)
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	f003 0303 	and.w	r3, r3, #3
 8000c04:	009b      	lsls	r3, r3, #2
 8000c06:	220f      	movs	r2, #15
 8000c08:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8000c0e:	4a2f      	ldr	r2, [pc, #188]	; (8000ccc <HAL_GPIO_DeInit+0x1c0>)
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	089b      	lsrs	r3, r3, #2
 8000c14:	3302      	adds	r3, #2
 8000c16:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	43da      	mvns	r2, r3
 8000c1e:	482b      	ldr	r0, [pc, #172]	; (8000ccc <HAL_GPIO_DeInit+0x1c0>)
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	089b      	lsrs	r3, r3, #2
 8000c24:	400a      	ands	r2, r1
 8000c26:	3302      	adds	r3, #2
 8000c28:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	005b      	lsls	r3, r3, #1
 8000c34:	2103      	movs	r1, #3
 8000c36:	fa01 f303 	lsl.w	r3, r1, r3
 8000c3a:	431a      	orrs	r2, r3
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	08da      	lsrs	r2, r3, #3
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	3208      	adds	r2, #8
 8000c48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	f003 0307 	and.w	r3, r3, #7
 8000c52:	009b      	lsls	r3, r3, #2
 8000c54:	220f      	movs	r2, #15
 8000c56:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5a:	43db      	mvns	r3, r3
 8000c5c:	697a      	ldr	r2, [r7, #20]
 8000c5e:	08d2      	lsrs	r2, r2, #3
 8000c60:	4019      	ands	r1, r3
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	3208      	adds	r2, #8
 8000c66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	689a      	ldr	r2, [r3, #8]
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	005b      	lsls	r3, r3, #1
 8000c72:	2103      	movs	r1, #3
 8000c74:	fa01 f303 	lsl.w	r3, r1, r3
 8000c78:	43db      	mvns	r3, r3
 8000c7a:	401a      	ands	r2, r3
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	685a      	ldr	r2, [r3, #4]
 8000c84:	2101      	movs	r1, #1
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	fa01 f303 	lsl.w	r3, r1, r3
 8000c8c:	43db      	mvns	r3, r3
 8000c8e:	401a      	ands	r2, r3
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	68da      	ldr	r2, [r3, #12]
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	005b      	lsls	r3, r3, #1
 8000c9c:	2103      	movs	r1, #3
 8000c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca2:	43db      	mvns	r3, r3
 8000ca4:	401a      	ands	r2, r3
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	3301      	adds	r3, #1
 8000cae:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8000cb0:	683a      	ldr	r2, [r7, #0]
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	fa22 f303 	lsr.w	r3, r2, r3
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	f47f af2f 	bne.w	8000b1c <HAL_GPIO_DeInit+0x10>
  }
}
 8000cbe:	bf00      	nop
 8000cc0:	bf00      	nop
 8000cc2:	371c      	adds	r7, #28
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	40010000 	.word	0x40010000
 8000cd0:	48000400 	.word	0x48000400
 8000cd4:	48000800 	.word	0x48000800
 8000cd8:	48000c00 	.word	0x48000c00
 8000cdc:	48001000 	.word	0x48001000
 8000ce0:	48001400 	.word	0x48001400
 8000ce4:	48001800 	.word	0x48001800
 8000ce8:	48001c00 	.word	0x48001c00
 8000cec:	40010400 	.word	0x40010400

08000cf0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	460b      	mov	r3, r1
 8000cfa:	807b      	strh	r3, [r7, #2]
 8000cfc:	4613      	mov	r3, r2
 8000cfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d00:	787b      	ldrb	r3, [r7, #1]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d003      	beq.n	8000d0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d06:	887a      	ldrh	r2, [r7, #2]
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d0c:	e002      	b.n	8000d14 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d0e:	887a      	ldrh	r2, [r7, #2]
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d14:	bf00      	nop
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr

08000d20 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b085      	sub	sp, #20
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
 8000d28:	460b      	mov	r3, r1
 8000d2a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	695b      	ldr	r3, [r3, #20]
 8000d30:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d32:	887a      	ldrh	r2, [r7, #2]
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	4013      	ands	r3, r2
 8000d38:	041a      	lsls	r2, r3, #16
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	43d9      	mvns	r1, r3
 8000d3e:	887b      	ldrh	r3, [r7, #2]
 8000d40:	400b      	ands	r3, r1
 8000d42:	431a      	orrs	r2, r3
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	619a      	str	r2, [r3, #24]
}
 8000d48:	bf00      	nop
 8000d4a:	3714      	adds	r7, #20
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr

08000d54 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000d5e:	4b08      	ldr	r3, [pc, #32]	; (8000d80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000d60:	695a      	ldr	r2, [r3, #20]
 8000d62:	88fb      	ldrh	r3, [r7, #6]
 8000d64:	4013      	ands	r3, r2
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d006      	beq.n	8000d78 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000d6a:	4a05      	ldr	r2, [pc, #20]	; (8000d80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000d6c:	88fb      	ldrh	r3, [r7, #6]
 8000d6e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000d70:	88fb      	ldrh	r3, [r7, #6]
 8000d72:	4618      	mov	r0, r3
 8000d74:	f005 fc9e 	bl	80066b4 <HAL_GPIO_EXTI_Callback>
  }
}
 8000d78:	bf00      	nop
 8000d7a:	3708      	adds	r7, #8
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	40010400 	.word	0x40010400

08000d84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d101      	bne.n	8000d96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000d92:	2301      	movs	r3, #1
 8000d94:	e081      	b.n	8000e9a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d106      	bne.n	8000db0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2200      	movs	r2, #0
 8000da6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000daa:	6878      	ldr	r0, [r7, #4]
 8000dac:	f006 f864 	bl	8006e78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2224      	movs	r2, #36	; 0x24
 8000db4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f022 0201 	bic.w	r2, r2, #1
 8000dc6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	685a      	ldr	r2, [r3, #4]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000dd4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	689a      	ldr	r2, [r3, #8]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000de4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	68db      	ldr	r3, [r3, #12]
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d107      	bne.n	8000dfe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	689a      	ldr	r2, [r3, #8]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	e006      	b.n	8000e0c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	689a      	ldr	r2, [r3, #8]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000e0a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	68db      	ldr	r3, [r3, #12]
 8000e10:	2b02      	cmp	r3, #2
 8000e12:	d104      	bne.n	8000e1e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e1c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	687a      	ldr	r2, [r7, #4]
 8000e26:	6812      	ldr	r2, [r2, #0]
 8000e28:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e30:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	68da      	ldr	r2, [r3, #12]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000e40:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	691a      	ldr	r2, [r3, #16]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	695b      	ldr	r3, [r3, #20]
 8000e4a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	699b      	ldr	r3, [r3, #24]
 8000e52:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	430a      	orrs	r2, r1
 8000e5a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	69d9      	ldr	r1, [r3, #28]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6a1a      	ldr	r2, [r3, #32]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	430a      	orrs	r2, r1
 8000e6a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f042 0201 	orr.w	r2, r2, #1
 8000e7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2200      	movs	r2, #0
 8000e80:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2220      	movs	r2, #32
 8000e86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2200      	movs	r2, #0
 8000e94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000e98:	2300      	movs	r3, #0
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b082      	sub	sp, #8
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d101      	bne.n	8000eb4 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	e021      	b.n	8000ef8 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2224      	movs	r2, #36	; 0x24
 8000eb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f022 0201 	bic.w	r2, r2, #1
 8000eca:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8000ecc:	6878      	ldr	r0, [r7, #4]
 8000ece:	f006 f831 	bl	8006f34 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2200      	movs	r2, #0
 8000edc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8000ef6:	2300      	movs	r3, #0
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3708      	adds	r7, #8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b088      	sub	sp, #32
 8000f04:	af02      	add	r7, sp, #8
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	4608      	mov	r0, r1
 8000f0a:	4611      	mov	r1, r2
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	4603      	mov	r3, r0
 8000f10:	817b      	strh	r3, [r7, #10]
 8000f12:	460b      	mov	r3, r1
 8000f14:	813b      	strh	r3, [r7, #8]
 8000f16:	4613      	mov	r3, r2
 8000f18:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	2b20      	cmp	r3, #32
 8000f24:	f040 80f9 	bne.w	800111a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8000f28:	6a3b      	ldr	r3, [r7, #32]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d002      	beq.n	8000f34 <HAL_I2C_Mem_Write+0x34>
 8000f2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d105      	bne.n	8000f40 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f3a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	e0ed      	b.n	800111c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d101      	bne.n	8000f4e <HAL_I2C_Mem_Write+0x4e>
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	e0e6      	b.n	800111c <HAL_I2C_Mem_Write+0x21c>
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	2201      	movs	r2, #1
 8000f52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000f56:	f7ff fb59 	bl	800060c <HAL_GetTick>
 8000f5a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	9300      	str	r3, [sp, #0]
 8000f60:	2319      	movs	r3, #25
 8000f62:	2201      	movs	r2, #1
 8000f64:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f68:	68f8      	ldr	r0, [r7, #12]
 8000f6a:	f000 fac3 	bl	80014f4 <I2C_WaitOnFlagUntilTimeout>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8000f74:	2301      	movs	r3, #1
 8000f76:	e0d1      	b.n	800111c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	2221      	movs	r2, #33	; 0x21
 8000f7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	2240      	movs	r2, #64	; 0x40
 8000f84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	6a3a      	ldr	r2, [r7, #32]
 8000f92:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000f98:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000fa0:	88f8      	ldrh	r0, [r7, #6]
 8000fa2:	893a      	ldrh	r2, [r7, #8]
 8000fa4:	8979      	ldrh	r1, [r7, #10]
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	9301      	str	r3, [sp, #4]
 8000faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fac:	9300      	str	r3, [sp, #0]
 8000fae:	4603      	mov	r3, r0
 8000fb0:	68f8      	ldr	r0, [r7, #12]
 8000fb2:	f000 f9d3 	bl	800135c <I2C_RequestMemoryWrite>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d005      	beq.n	8000fc8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	e0a9      	b.n	800111c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fcc:	b29b      	uxth	r3, r3
 8000fce:	2bff      	cmp	r3, #255	; 0xff
 8000fd0:	d90e      	bls.n	8000ff0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	22ff      	movs	r2, #255	; 0xff
 8000fd6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fdc:	b2da      	uxtb	r2, r3
 8000fde:	8979      	ldrh	r1, [r7, #10]
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	9300      	str	r3, [sp, #0]
 8000fe4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000fe8:	68f8      	ldr	r0, [r7, #12]
 8000fea:	f000 fc2b 	bl	8001844 <I2C_TransferConfig>
 8000fee:	e00f      	b.n	8001010 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000ff4:	b29a      	uxth	r2, r3
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ffe:	b2da      	uxtb	r2, r3
 8001000:	8979      	ldrh	r1, [r7, #10]
 8001002:	2300      	movs	r3, #0
 8001004:	9300      	str	r3, [sp, #0]
 8001006:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800100a:	68f8      	ldr	r0, [r7, #12]
 800100c:	f000 fc1a 	bl	8001844 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001010:	697a      	ldr	r2, [r7, #20]
 8001012:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001014:	68f8      	ldr	r0, [r7, #12]
 8001016:	f000 faad 	bl	8001574 <I2C_WaitOnTXISFlagUntilTimeout>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001020:	2301      	movs	r3, #1
 8001022:	e07b      	b.n	800111c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001028:	781a      	ldrb	r2, [r3, #0]
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001034:	1c5a      	adds	r2, r3, #1
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800103e:	b29b      	uxth	r3, r3
 8001040:	3b01      	subs	r3, #1
 8001042:	b29a      	uxth	r2, r3
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800104c:	3b01      	subs	r3, #1
 800104e:	b29a      	uxth	r2, r3
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001058:	b29b      	uxth	r3, r3
 800105a:	2b00      	cmp	r3, #0
 800105c:	d034      	beq.n	80010c8 <HAL_I2C_Mem_Write+0x1c8>
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001062:	2b00      	cmp	r3, #0
 8001064:	d130      	bne.n	80010c8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	9300      	str	r3, [sp, #0]
 800106a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800106c:	2200      	movs	r2, #0
 800106e:	2180      	movs	r1, #128	; 0x80
 8001070:	68f8      	ldr	r0, [r7, #12]
 8001072:	f000 fa3f 	bl	80014f4 <I2C_WaitOnFlagUntilTimeout>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800107c:	2301      	movs	r3, #1
 800107e:	e04d      	b.n	800111c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001084:	b29b      	uxth	r3, r3
 8001086:	2bff      	cmp	r3, #255	; 0xff
 8001088:	d90e      	bls.n	80010a8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	22ff      	movs	r2, #255	; 0xff
 800108e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001094:	b2da      	uxtb	r2, r3
 8001096:	8979      	ldrh	r1, [r7, #10]
 8001098:	2300      	movs	r3, #0
 800109a:	9300      	str	r3, [sp, #0]
 800109c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010a0:	68f8      	ldr	r0, [r7, #12]
 80010a2:	f000 fbcf 	bl	8001844 <I2C_TransferConfig>
 80010a6:	e00f      	b.n	80010c8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010ac:	b29a      	uxth	r2, r3
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010b6:	b2da      	uxtb	r2, r3
 80010b8:	8979      	ldrh	r1, [r7, #10]
 80010ba:	2300      	movs	r3, #0
 80010bc:	9300      	str	r3, [sp, #0]
 80010be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80010c2:	68f8      	ldr	r0, [r7, #12]
 80010c4:	f000 fbbe 	bl	8001844 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d19e      	bne.n	8001010 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80010d2:	697a      	ldr	r2, [r7, #20]
 80010d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80010d6:	68f8      	ldr	r0, [r7, #12]
 80010d8:	f000 fa8c 	bl	80015f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e01a      	b.n	800111c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	2220      	movs	r2, #32
 80010ec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	6859      	ldr	r1, [r3, #4]
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	4b0a      	ldr	r3, [pc, #40]	; (8001124 <HAL_I2C_Mem_Write+0x224>)
 80010fa:	400b      	ands	r3, r1
 80010fc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	2220      	movs	r2, #32
 8001102:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	2200      	movs	r2, #0
 800110a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	2200      	movs	r2, #0
 8001112:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001116:	2300      	movs	r3, #0
 8001118:	e000      	b.n	800111c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800111a:	2302      	movs	r3, #2
  }
}
 800111c:	4618      	mov	r0, r3
 800111e:	3718      	adds	r7, #24
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	fe00e800 	.word	0xfe00e800

08001128 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b088      	sub	sp, #32
 800112c:	af02      	add	r7, sp, #8
 800112e:	60f8      	str	r0, [r7, #12]
 8001130:	4608      	mov	r0, r1
 8001132:	4611      	mov	r1, r2
 8001134:	461a      	mov	r2, r3
 8001136:	4603      	mov	r3, r0
 8001138:	817b      	strh	r3, [r7, #10]
 800113a:	460b      	mov	r3, r1
 800113c:	813b      	strh	r3, [r7, #8]
 800113e:	4613      	mov	r3, r2
 8001140:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001148:	b2db      	uxtb	r3, r3
 800114a:	2b20      	cmp	r3, #32
 800114c:	f040 80fd 	bne.w	800134a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001150:	6a3b      	ldr	r3, [r7, #32]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d002      	beq.n	800115c <HAL_I2C_Mem_Read+0x34>
 8001156:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001158:	2b00      	cmp	r3, #0
 800115a:	d105      	bne.n	8001168 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001162:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001164:	2301      	movs	r3, #1
 8001166:	e0f1      	b.n	800134c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800116e:	2b01      	cmp	r3, #1
 8001170:	d101      	bne.n	8001176 <HAL_I2C_Mem_Read+0x4e>
 8001172:	2302      	movs	r3, #2
 8001174:	e0ea      	b.n	800134c <HAL_I2C_Mem_Read+0x224>
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	2201      	movs	r2, #1
 800117a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800117e:	f7ff fa45 	bl	800060c <HAL_GetTick>
 8001182:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	9300      	str	r3, [sp, #0]
 8001188:	2319      	movs	r3, #25
 800118a:	2201      	movs	r2, #1
 800118c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001190:	68f8      	ldr	r0, [r7, #12]
 8001192:	f000 f9af 	bl	80014f4 <I2C_WaitOnFlagUntilTimeout>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800119c:	2301      	movs	r3, #1
 800119e:	e0d5      	b.n	800134c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	2222      	movs	r2, #34	; 0x22
 80011a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	2240      	movs	r2, #64	; 0x40
 80011ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	2200      	movs	r2, #0
 80011b4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	6a3a      	ldr	r2, [r7, #32]
 80011ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80011c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	2200      	movs	r2, #0
 80011c6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80011c8:	88f8      	ldrh	r0, [r7, #6]
 80011ca:	893a      	ldrh	r2, [r7, #8]
 80011cc:	8979      	ldrh	r1, [r7, #10]
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	9301      	str	r3, [sp, #4]
 80011d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011d4:	9300      	str	r3, [sp, #0]
 80011d6:	4603      	mov	r3, r0
 80011d8:	68f8      	ldr	r0, [r7, #12]
 80011da:	f000 f913 	bl	8001404 <I2C_RequestMemoryRead>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d005      	beq.n	80011f0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	2200      	movs	r2, #0
 80011e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80011ec:	2301      	movs	r3, #1
 80011ee:	e0ad      	b.n	800134c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011f4:	b29b      	uxth	r3, r3
 80011f6:	2bff      	cmp	r3, #255	; 0xff
 80011f8:	d90e      	bls.n	8001218 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	22ff      	movs	r2, #255	; 0xff
 80011fe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001204:	b2da      	uxtb	r2, r3
 8001206:	8979      	ldrh	r1, [r7, #10]
 8001208:	4b52      	ldr	r3, [pc, #328]	; (8001354 <HAL_I2C_Mem_Read+0x22c>)
 800120a:	9300      	str	r3, [sp, #0]
 800120c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001210:	68f8      	ldr	r0, [r7, #12]
 8001212:	f000 fb17 	bl	8001844 <I2C_TransferConfig>
 8001216:	e00f      	b.n	8001238 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800121c:	b29a      	uxth	r2, r3
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001226:	b2da      	uxtb	r2, r3
 8001228:	8979      	ldrh	r1, [r7, #10]
 800122a:	4b4a      	ldr	r3, [pc, #296]	; (8001354 <HAL_I2C_Mem_Read+0x22c>)
 800122c:	9300      	str	r3, [sp, #0]
 800122e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001232:	68f8      	ldr	r0, [r7, #12]
 8001234:	f000 fb06 	bl	8001844 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	9300      	str	r3, [sp, #0]
 800123c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800123e:	2200      	movs	r2, #0
 8001240:	2104      	movs	r1, #4
 8001242:	68f8      	ldr	r0, [r7, #12]
 8001244:	f000 f956 	bl	80014f4 <I2C_WaitOnFlagUntilTimeout>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e07c      	b.n	800134c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800125c:	b2d2      	uxtb	r2, r2
 800125e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001264:	1c5a      	adds	r2, r3, #1
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800126e:	3b01      	subs	r3, #1
 8001270:	b29a      	uxth	r2, r3
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800127a:	b29b      	uxth	r3, r3
 800127c:	3b01      	subs	r3, #1
 800127e:	b29a      	uxth	r2, r3
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001288:	b29b      	uxth	r3, r3
 800128a:	2b00      	cmp	r3, #0
 800128c:	d034      	beq.n	80012f8 <HAL_I2C_Mem_Read+0x1d0>
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001292:	2b00      	cmp	r3, #0
 8001294:	d130      	bne.n	80012f8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	9300      	str	r3, [sp, #0]
 800129a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800129c:	2200      	movs	r2, #0
 800129e:	2180      	movs	r1, #128	; 0x80
 80012a0:	68f8      	ldr	r0, [r7, #12]
 80012a2:	f000 f927 	bl	80014f4 <I2C_WaitOnFlagUntilTimeout>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80012ac:	2301      	movs	r3, #1
 80012ae:	e04d      	b.n	800134c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012b4:	b29b      	uxth	r3, r3
 80012b6:	2bff      	cmp	r3, #255	; 0xff
 80012b8:	d90e      	bls.n	80012d8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	22ff      	movs	r2, #255	; 0xff
 80012be:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012c4:	b2da      	uxtb	r2, r3
 80012c6:	8979      	ldrh	r1, [r7, #10]
 80012c8:	2300      	movs	r3, #0
 80012ca:	9300      	str	r3, [sp, #0]
 80012cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80012d0:	68f8      	ldr	r0, [r7, #12]
 80012d2:	f000 fab7 	bl	8001844 <I2C_TransferConfig>
 80012d6:	e00f      	b.n	80012f8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012dc:	b29a      	uxth	r2, r3
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012e6:	b2da      	uxtb	r2, r3
 80012e8:	8979      	ldrh	r1, [r7, #10]
 80012ea:	2300      	movs	r3, #0
 80012ec:	9300      	str	r3, [sp, #0]
 80012ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80012f2:	68f8      	ldr	r0, [r7, #12]
 80012f4:	f000 faa6 	bl	8001844 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d19a      	bne.n	8001238 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001302:	697a      	ldr	r2, [r7, #20]
 8001304:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001306:	68f8      	ldr	r0, [r7, #12]
 8001308:	f000 f974 	bl	80015f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e01a      	b.n	800134c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	2220      	movs	r2, #32
 800131c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	6859      	ldr	r1, [r3, #4]
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	4b0b      	ldr	r3, [pc, #44]	; (8001358 <HAL_I2C_Mem_Read+0x230>)
 800132a:	400b      	ands	r3, r1
 800132c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	2220      	movs	r2, #32
 8001332:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	2200      	movs	r2, #0
 800133a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	2200      	movs	r2, #0
 8001342:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001346:	2300      	movs	r3, #0
 8001348:	e000      	b.n	800134c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800134a:	2302      	movs	r3, #2
  }
}
 800134c:	4618      	mov	r0, r3
 800134e:	3718      	adds	r7, #24
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	80002400 	.word	0x80002400
 8001358:	fe00e800 	.word	0xfe00e800

0800135c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b086      	sub	sp, #24
 8001360:	af02      	add	r7, sp, #8
 8001362:	60f8      	str	r0, [r7, #12]
 8001364:	4608      	mov	r0, r1
 8001366:	4611      	mov	r1, r2
 8001368:	461a      	mov	r2, r3
 800136a:	4603      	mov	r3, r0
 800136c:	817b      	strh	r3, [r7, #10]
 800136e:	460b      	mov	r3, r1
 8001370:	813b      	strh	r3, [r7, #8]
 8001372:	4613      	mov	r3, r2
 8001374:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001376:	88fb      	ldrh	r3, [r7, #6]
 8001378:	b2da      	uxtb	r2, r3
 800137a:	8979      	ldrh	r1, [r7, #10]
 800137c:	4b20      	ldr	r3, [pc, #128]	; (8001400 <I2C_RequestMemoryWrite+0xa4>)
 800137e:	9300      	str	r3, [sp, #0]
 8001380:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001384:	68f8      	ldr	r0, [r7, #12]
 8001386:	f000 fa5d 	bl	8001844 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800138a:	69fa      	ldr	r2, [r7, #28]
 800138c:	69b9      	ldr	r1, [r7, #24]
 800138e:	68f8      	ldr	r0, [r7, #12]
 8001390:	f000 f8f0 	bl	8001574 <I2C_WaitOnTXISFlagUntilTimeout>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e02c      	b.n	80013f8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800139e:	88fb      	ldrh	r3, [r7, #6]
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d105      	bne.n	80013b0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80013a4:	893b      	ldrh	r3, [r7, #8]
 80013a6:	b2da      	uxtb	r2, r3
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	629a      	str	r2, [r3, #40]	; 0x28
 80013ae:	e015      	b.n	80013dc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80013b0:	893b      	ldrh	r3, [r7, #8]
 80013b2:	0a1b      	lsrs	r3, r3, #8
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	b2da      	uxtb	r2, r3
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80013be:	69fa      	ldr	r2, [r7, #28]
 80013c0:	69b9      	ldr	r1, [r7, #24]
 80013c2:	68f8      	ldr	r0, [r7, #12]
 80013c4:	f000 f8d6 	bl	8001574 <I2C_WaitOnTXISFlagUntilTimeout>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e012      	b.n	80013f8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80013d2:	893b      	ldrh	r3, [r7, #8]
 80013d4:	b2da      	uxtb	r2, r3
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	9300      	str	r3, [sp, #0]
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	2200      	movs	r2, #0
 80013e4:	2180      	movs	r1, #128	; 0x80
 80013e6:	68f8      	ldr	r0, [r7, #12]
 80013e8:	f000 f884 	bl	80014f4 <I2C_WaitOnFlagUntilTimeout>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e000      	b.n	80013f8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80013f6:	2300      	movs	r3, #0
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3710      	adds	r7, #16
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	80002000 	.word	0x80002000

08001404 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b086      	sub	sp, #24
 8001408:	af02      	add	r7, sp, #8
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	4608      	mov	r0, r1
 800140e:	4611      	mov	r1, r2
 8001410:	461a      	mov	r2, r3
 8001412:	4603      	mov	r3, r0
 8001414:	817b      	strh	r3, [r7, #10]
 8001416:	460b      	mov	r3, r1
 8001418:	813b      	strh	r3, [r7, #8]
 800141a:	4613      	mov	r3, r2
 800141c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800141e:	88fb      	ldrh	r3, [r7, #6]
 8001420:	b2da      	uxtb	r2, r3
 8001422:	8979      	ldrh	r1, [r7, #10]
 8001424:	4b20      	ldr	r3, [pc, #128]	; (80014a8 <I2C_RequestMemoryRead+0xa4>)
 8001426:	9300      	str	r3, [sp, #0]
 8001428:	2300      	movs	r3, #0
 800142a:	68f8      	ldr	r0, [r7, #12]
 800142c:	f000 fa0a 	bl	8001844 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001430:	69fa      	ldr	r2, [r7, #28]
 8001432:	69b9      	ldr	r1, [r7, #24]
 8001434:	68f8      	ldr	r0, [r7, #12]
 8001436:	f000 f89d 	bl	8001574 <I2C_WaitOnTXISFlagUntilTimeout>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	e02c      	b.n	800149e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001444:	88fb      	ldrh	r3, [r7, #6]
 8001446:	2b01      	cmp	r3, #1
 8001448:	d105      	bne.n	8001456 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800144a:	893b      	ldrh	r3, [r7, #8]
 800144c:	b2da      	uxtb	r2, r3
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	629a      	str	r2, [r3, #40]	; 0x28
 8001454:	e015      	b.n	8001482 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001456:	893b      	ldrh	r3, [r7, #8]
 8001458:	0a1b      	lsrs	r3, r3, #8
 800145a:	b29b      	uxth	r3, r3
 800145c:	b2da      	uxtb	r2, r3
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001464:	69fa      	ldr	r2, [r7, #28]
 8001466:	69b9      	ldr	r1, [r7, #24]
 8001468:	68f8      	ldr	r0, [r7, #12]
 800146a:	f000 f883 	bl	8001574 <I2C_WaitOnTXISFlagUntilTimeout>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	e012      	b.n	800149e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001478:	893b      	ldrh	r3, [r7, #8]
 800147a:	b2da      	uxtb	r2, r3
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	9300      	str	r3, [sp, #0]
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	2200      	movs	r2, #0
 800148a:	2140      	movs	r1, #64	; 0x40
 800148c:	68f8      	ldr	r0, [r7, #12]
 800148e:	f000 f831 	bl	80014f4 <I2C_WaitOnFlagUntilTimeout>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	e000      	b.n	800149e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3710      	adds	r7, #16
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	80002000 	.word	0x80002000

080014ac <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	699b      	ldr	r3, [r3, #24]
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d103      	bne.n	80014ca <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	2200      	movs	r2, #0
 80014c8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	f003 0301 	and.w	r3, r3, #1
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d007      	beq.n	80014e8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	699a      	ldr	r2, [r3, #24]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f042 0201 	orr.w	r2, r2, #1
 80014e6:	619a      	str	r2, [r3, #24]
  }
}
 80014e8:	bf00      	nop
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	603b      	str	r3, [r7, #0]
 8001500:	4613      	mov	r3, r2
 8001502:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001504:	e022      	b.n	800154c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800150c:	d01e      	beq.n	800154c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800150e:	f7ff f87d 	bl	800060c <HAL_GetTick>
 8001512:	4602      	mov	r2, r0
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	683a      	ldr	r2, [r7, #0]
 800151a:	429a      	cmp	r2, r3
 800151c:	d302      	bcc.n	8001524 <I2C_WaitOnFlagUntilTimeout+0x30>
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d113      	bne.n	800154c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001528:	f043 0220 	orr.w	r2, r3, #32
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	2220      	movs	r2, #32
 8001534:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	2200      	movs	r2, #0
 800153c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	2200      	movs	r2, #0
 8001544:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	e00f      	b.n	800156c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	699a      	ldr	r2, [r3, #24]
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	4013      	ands	r3, r2
 8001556:	68ba      	ldr	r2, [r7, #8]
 8001558:	429a      	cmp	r2, r3
 800155a:	bf0c      	ite	eq
 800155c:	2301      	moveq	r3, #1
 800155e:	2300      	movne	r3, #0
 8001560:	b2db      	uxtb	r3, r3
 8001562:	461a      	mov	r2, r3
 8001564:	79fb      	ldrb	r3, [r7, #7]
 8001566:	429a      	cmp	r2, r3
 8001568:	d0cd      	beq.n	8001506 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800156a:	2300      	movs	r3, #0
}
 800156c:	4618      	mov	r0, r3
 800156e:	3710      	adds	r7, #16
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}

08001574 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	60b9      	str	r1, [r7, #8]
 800157e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001580:	e02c      	b.n	80015dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001582:	687a      	ldr	r2, [r7, #4]
 8001584:	68b9      	ldr	r1, [r7, #8]
 8001586:	68f8      	ldr	r0, [r7, #12]
 8001588:	f000 f870 	bl	800166c <I2C_IsErrorOccurred>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e02a      	b.n	80015ec <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800159c:	d01e      	beq.n	80015dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800159e:	f7ff f835 	bl	800060c <HAL_GetTick>
 80015a2:	4602      	mov	r2, r0
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	68ba      	ldr	r2, [r7, #8]
 80015aa:	429a      	cmp	r2, r3
 80015ac:	d302      	bcc.n	80015b4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80015ae:	68bb      	ldr	r3, [r7, #8]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d113      	bne.n	80015dc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b8:	f043 0220 	orr.w	r2, r3, #32
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	2220      	movs	r2, #32
 80015c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	2200      	movs	r2, #0
 80015cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	2200      	movs	r2, #0
 80015d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e007      	b.n	80015ec <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	699b      	ldr	r3, [r3, #24]
 80015e2:	f003 0302 	and.w	r3, r3, #2
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d1cb      	bne.n	8001582 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80015ea:	2300      	movs	r3, #0
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3710      	adds	r7, #16
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001600:	e028      	b.n	8001654 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001602:	687a      	ldr	r2, [r7, #4]
 8001604:	68b9      	ldr	r1, [r7, #8]
 8001606:	68f8      	ldr	r0, [r7, #12]
 8001608:	f000 f830 	bl	800166c <I2C_IsErrorOccurred>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e026      	b.n	8001664 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001616:	f7fe fff9 	bl	800060c <HAL_GetTick>
 800161a:	4602      	mov	r2, r0
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	68ba      	ldr	r2, [r7, #8]
 8001622:	429a      	cmp	r2, r3
 8001624:	d302      	bcc.n	800162c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d113      	bne.n	8001654 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001630:	f043 0220 	orr.w	r2, r3, #32
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	2220      	movs	r2, #32
 800163c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	2200      	movs	r2, #0
 8001644:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	2200      	movs	r2, #0
 800164c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e007      	b.n	8001664 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	699b      	ldr	r3, [r3, #24]
 800165a:	f003 0320 	and.w	r3, r3, #32
 800165e:	2b20      	cmp	r3, #32
 8001660:	d1cf      	bne.n	8001602 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001662:	2300      	movs	r3, #0
}
 8001664:	4618      	mov	r0, r3
 8001666:	3710      	adds	r7, #16
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}

0800166c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b08a      	sub	sp, #40	; 0x28
 8001670:	af00      	add	r7, sp, #0
 8001672:	60f8      	str	r0, [r7, #12]
 8001674:	60b9      	str	r1, [r7, #8]
 8001676:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001678:	2300      	movs	r3, #0
 800167a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	699b      	ldr	r3, [r3, #24]
 8001684:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001686:	2300      	movs	r3, #0
 8001688:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800168e:	69bb      	ldr	r3, [r7, #24]
 8001690:	f003 0310 	and.w	r3, r3, #16
 8001694:	2b00      	cmp	r3, #0
 8001696:	d075      	beq.n	8001784 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2210      	movs	r2, #16
 800169e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80016a0:	e056      	b.n	8001750 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80016a8:	d052      	beq.n	8001750 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80016aa:	f7fe ffaf 	bl	800060c <HAL_GetTick>
 80016ae:	4602      	mov	r2, r0
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	68ba      	ldr	r2, [r7, #8]
 80016b6:	429a      	cmp	r2, r3
 80016b8:	d302      	bcc.n	80016c0 <I2C_IsErrorOccurred+0x54>
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d147      	bne.n	8001750 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ca:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80016d2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	699b      	ldr	r3, [r3, #24]
 80016da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80016e2:	d12e      	bne.n	8001742 <I2C_IsErrorOccurred+0xd6>
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80016ea:	d02a      	beq.n	8001742 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80016ec:	7cfb      	ldrb	r3, [r7, #19]
 80016ee:	2b20      	cmp	r3, #32
 80016f0:	d027      	beq.n	8001742 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	685a      	ldr	r2, [r3, #4]
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001700:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001702:	f7fe ff83 	bl	800060c <HAL_GetTick>
 8001706:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001708:	e01b      	b.n	8001742 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800170a:	f7fe ff7f 	bl	800060c <HAL_GetTick>
 800170e:	4602      	mov	r2, r0
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	2b19      	cmp	r3, #25
 8001716:	d914      	bls.n	8001742 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171c:	f043 0220 	orr.w	r2, r3, #32
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	2220      	movs	r2, #32
 8001728:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	2200      	movs	r2, #0
 8001730:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	2200      	movs	r2, #0
 8001738:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	699b      	ldr	r3, [r3, #24]
 8001748:	f003 0320 	and.w	r3, r3, #32
 800174c:	2b20      	cmp	r3, #32
 800174e:	d1dc      	bne.n	800170a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	699b      	ldr	r3, [r3, #24]
 8001756:	f003 0320 	and.w	r3, r3, #32
 800175a:	2b20      	cmp	r3, #32
 800175c:	d003      	beq.n	8001766 <I2C_IsErrorOccurred+0xfa>
 800175e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001762:	2b00      	cmp	r3, #0
 8001764:	d09d      	beq.n	80016a2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001766:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800176a:	2b00      	cmp	r3, #0
 800176c:	d103      	bne.n	8001776 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2220      	movs	r2, #32
 8001774:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001776:	6a3b      	ldr	r3, [r7, #32]
 8001778:	f043 0304 	orr.w	r3, r3, #4
 800177c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	699b      	ldr	r3, [r3, #24]
 800178a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001792:	2b00      	cmp	r3, #0
 8001794:	d00b      	beq.n	80017ae <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001796:	6a3b      	ldr	r3, [r7, #32]
 8001798:	f043 0301 	orr.w	r3, r3, #1
 800179c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017a6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d00b      	beq.n	80017d0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80017b8:	6a3b      	ldr	r3, [r7, #32]
 80017ba:	f043 0308 	orr.w	r3, r3, #8
 80017be:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017c8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d00b      	beq.n	80017f2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80017da:	6a3b      	ldr	r3, [r7, #32]
 80017dc:	f043 0302 	orr.w	r3, r3, #2
 80017e0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017ea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80017f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d01c      	beq.n	8001834 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80017fa:	68f8      	ldr	r0, [r7, #12]
 80017fc:	f7ff fe56 	bl	80014ac <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	6859      	ldr	r1, [r3, #4]
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	4b0d      	ldr	r3, [pc, #52]	; (8001840 <I2C_IsErrorOccurred+0x1d4>)
 800180c:	400b      	ands	r3, r1
 800180e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001814:	6a3b      	ldr	r3, [r7, #32]
 8001816:	431a      	orrs	r2, r3
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	2220      	movs	r2, #32
 8001820:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2200      	movs	r2, #0
 8001828:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2200      	movs	r2, #0
 8001830:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001834:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001838:	4618      	mov	r0, r3
 800183a:	3728      	adds	r7, #40	; 0x28
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	fe00e800 	.word	0xfe00e800

08001844 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001844:	b480      	push	{r7}
 8001846:	b087      	sub	sp, #28
 8001848:	af00      	add	r7, sp, #0
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	607b      	str	r3, [r7, #4]
 800184e:	460b      	mov	r3, r1
 8001850:	817b      	strh	r3, [r7, #10]
 8001852:	4613      	mov	r3, r2
 8001854:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001856:	897b      	ldrh	r3, [r7, #10]
 8001858:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800185c:	7a7b      	ldrb	r3, [r7, #9]
 800185e:	041b      	lsls	r3, r3, #16
 8001860:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001864:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800186a:	6a3b      	ldr	r3, [r7, #32]
 800186c:	4313      	orrs	r3, r2
 800186e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001872:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	685a      	ldr	r2, [r3, #4]
 800187a:	6a3b      	ldr	r3, [r7, #32]
 800187c:	0d5b      	lsrs	r3, r3, #21
 800187e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001882:	4b08      	ldr	r3, [pc, #32]	; (80018a4 <I2C_TransferConfig+0x60>)
 8001884:	430b      	orrs	r3, r1
 8001886:	43db      	mvns	r3, r3
 8001888:	ea02 0103 	and.w	r1, r2, r3
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	697a      	ldr	r2, [r7, #20]
 8001892:	430a      	orrs	r2, r1
 8001894:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001896:	bf00      	nop
 8001898:	371c      	adds	r7, #28
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	03ff63ff 	.word	0x03ff63ff

080018a8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	2b20      	cmp	r3, #32
 80018bc:	d138      	bne.n	8001930 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d101      	bne.n	80018cc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80018c8:	2302      	movs	r3, #2
 80018ca:	e032      	b.n	8001932 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2201      	movs	r2, #1
 80018d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2224      	movs	r2, #36	; 0x24
 80018d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f022 0201 	bic.w	r2, r2, #1
 80018ea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80018fa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	6819      	ldr	r1, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	683a      	ldr	r2, [r7, #0]
 8001908:	430a      	orrs	r2, r1
 800190a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f042 0201 	orr.w	r2, r2, #1
 800191a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2220      	movs	r2, #32
 8001920:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2200      	movs	r2, #0
 8001928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800192c:	2300      	movs	r3, #0
 800192e:	e000      	b.n	8001932 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001930:	2302      	movs	r3, #2
  }
}
 8001932:	4618      	mov	r0, r3
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr

0800193e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800193e:	b480      	push	{r7}
 8001940:	b085      	sub	sp, #20
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
 8001946:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800194e:	b2db      	uxtb	r3, r3
 8001950:	2b20      	cmp	r3, #32
 8001952:	d139      	bne.n	80019c8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800195a:	2b01      	cmp	r3, #1
 800195c:	d101      	bne.n	8001962 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800195e:	2302      	movs	r3, #2
 8001960:	e033      	b.n	80019ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2201      	movs	r2, #1
 8001966:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2224      	movs	r2, #36	; 0x24
 800196e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f022 0201 	bic.w	r2, r2, #1
 8001980:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001990:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	021b      	lsls	r3, r3, #8
 8001996:	68fa      	ldr	r2, [r7, #12]
 8001998:	4313      	orrs	r3, r2
 800199a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	68fa      	ldr	r2, [r7, #12]
 80019a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f042 0201 	orr.w	r2, r2, #1
 80019b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2220      	movs	r2, #32
 80019b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2200      	movs	r2, #0
 80019c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80019c4:	2300      	movs	r3, #0
 80019c6:	e000      	b.n	80019ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80019c8:	2302      	movs	r3, #2
  }
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3714      	adds	r7, #20
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
	...

080019d8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80019dc:	4b0d      	ldr	r3, [pc, #52]	; (8001a14 <HAL_PWREx_GetVoltageRange+0x3c>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80019e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019e8:	d102      	bne.n	80019f0 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80019ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019ee:	e00b      	b.n	8001a08 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80019f0:	4b08      	ldr	r3, [pc, #32]	; (8001a14 <HAL_PWREx_GetVoltageRange+0x3c>)
 80019f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80019f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019fe:	d102      	bne.n	8001a06 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001a00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a04:	e000      	b.n	8001a08 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001a06:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	40007000 	.word	0x40007000

08001a18 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b085      	sub	sp, #20
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d141      	bne.n	8001aaa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a26:	4b4b      	ldr	r3, [pc, #300]	; (8001b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a32:	d131      	bne.n	8001a98 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a34:	4b47      	ldr	r3, [pc, #284]	; (8001b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a3a:	4a46      	ldr	r2, [pc, #280]	; (8001b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a40:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a44:	4b43      	ldr	r3, [pc, #268]	; (8001b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a4c:	4a41      	ldr	r2, [pc, #260]	; (8001b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a52:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001a54:	4b40      	ldr	r3, [pc, #256]	; (8001b58 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2232      	movs	r2, #50	; 0x32
 8001a5a:	fb02 f303 	mul.w	r3, r2, r3
 8001a5e:	4a3f      	ldr	r2, [pc, #252]	; (8001b5c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001a60:	fba2 2303 	umull	r2, r3, r2, r3
 8001a64:	0c9b      	lsrs	r3, r3, #18
 8001a66:	3301      	adds	r3, #1
 8001a68:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a6a:	e002      	b.n	8001a72 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a72:	4b38      	ldr	r3, [pc, #224]	; (8001b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a74:	695b      	ldr	r3, [r3, #20]
 8001a76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a7e:	d102      	bne.n	8001a86 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d1f2      	bne.n	8001a6c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a86:	4b33      	ldr	r3, [pc, #204]	; (8001b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a88:	695b      	ldr	r3, [r3, #20]
 8001a8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a92:	d158      	bne.n	8001b46 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e057      	b.n	8001b48 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a98:	4b2e      	ldr	r3, [pc, #184]	; (8001b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a9e:	4a2d      	ldr	r2, [pc, #180]	; (8001b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aa0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001aa4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001aa8:	e04d      	b.n	8001b46 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ab0:	d141      	bne.n	8001b36 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ab2:	4b28      	ldr	r3, [pc, #160]	; (8001b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001aba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001abe:	d131      	bne.n	8001b24 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ac0:	4b24      	ldr	r3, [pc, #144]	; (8001b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ac2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ac6:	4a23      	ldr	r2, [pc, #140]	; (8001b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ac8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001acc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ad0:	4b20      	ldr	r3, [pc, #128]	; (8001b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ad8:	4a1e      	ldr	r2, [pc, #120]	; (8001b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ada:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ade:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001ae0:	4b1d      	ldr	r3, [pc, #116]	; (8001b58 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2232      	movs	r2, #50	; 0x32
 8001ae6:	fb02 f303 	mul.w	r3, r2, r3
 8001aea:	4a1c      	ldr	r2, [pc, #112]	; (8001b5c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001aec:	fba2 2303 	umull	r2, r3, r2, r3
 8001af0:	0c9b      	lsrs	r3, r3, #18
 8001af2:	3301      	adds	r3, #1
 8001af4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001af6:	e002      	b.n	8001afe <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	3b01      	subs	r3, #1
 8001afc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001afe:	4b15      	ldr	r3, [pc, #84]	; (8001b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b00:	695b      	ldr	r3, [r3, #20]
 8001b02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b0a:	d102      	bne.n	8001b12 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d1f2      	bne.n	8001af8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b12:	4b10      	ldr	r3, [pc, #64]	; (8001b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b14:	695b      	ldr	r3, [r3, #20]
 8001b16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b1e:	d112      	bne.n	8001b46 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001b20:	2303      	movs	r3, #3
 8001b22:	e011      	b.n	8001b48 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b24:	4b0b      	ldr	r3, [pc, #44]	; (8001b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b2a:	4a0a      	ldr	r2, [pc, #40]	; (8001b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b30:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001b34:	e007      	b.n	8001b46 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b36:	4b07      	ldr	r3, [pc, #28]	; (8001b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b3e:	4a05      	ldr	r2, [pc, #20]	; (8001b54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b40:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b44:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001b46:	2300      	movs	r3, #0
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3714      	adds	r7, #20
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr
 8001b54:	40007000 	.word	0x40007000
 8001b58:	200000b4 	.word	0x200000b4
 8001b5c:	431bde83 	.word	0x431bde83

08001b60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b088      	sub	sp, #32
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d102      	bne.n	8001b74 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	f000 bc08 	b.w	8002384 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b74:	4b96      	ldr	r3, [pc, #600]	; (8001dd0 <HAL_RCC_OscConfig+0x270>)
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f003 030c 	and.w	r3, r3, #12
 8001b7c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b7e:	4b94      	ldr	r3, [pc, #592]	; (8001dd0 <HAL_RCC_OscConfig+0x270>)
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	f003 0303 	and.w	r3, r3, #3
 8001b86:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0310 	and.w	r3, r3, #16
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	f000 80e4 	beq.w	8001d5e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d007      	beq.n	8001bac <HAL_RCC_OscConfig+0x4c>
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	2b0c      	cmp	r3, #12
 8001ba0:	f040 808b 	bne.w	8001cba <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	f040 8087 	bne.w	8001cba <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001bac:	4b88      	ldr	r3, [pc, #544]	; (8001dd0 <HAL_RCC_OscConfig+0x270>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0302 	and.w	r3, r3, #2
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d005      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x64>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d101      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e3df      	b.n	8002384 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6a1a      	ldr	r2, [r3, #32]
 8001bc8:	4b81      	ldr	r3, [pc, #516]	; (8001dd0 <HAL_RCC_OscConfig+0x270>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0308 	and.w	r3, r3, #8
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d004      	beq.n	8001bde <HAL_RCC_OscConfig+0x7e>
 8001bd4:	4b7e      	ldr	r3, [pc, #504]	; (8001dd0 <HAL_RCC_OscConfig+0x270>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bdc:	e005      	b.n	8001bea <HAL_RCC_OscConfig+0x8a>
 8001bde:	4b7c      	ldr	r3, [pc, #496]	; (8001dd0 <HAL_RCC_OscConfig+0x270>)
 8001be0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001be4:	091b      	lsrs	r3, r3, #4
 8001be6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d223      	bcs.n	8001c36 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6a1b      	ldr	r3, [r3, #32]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f000 fdfe 	bl	80027f4 <RCC_SetFlashLatencyFromMSIRange>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e3c0      	b.n	8002384 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c02:	4b73      	ldr	r3, [pc, #460]	; (8001dd0 <HAL_RCC_OscConfig+0x270>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a72      	ldr	r2, [pc, #456]	; (8001dd0 <HAL_RCC_OscConfig+0x270>)
 8001c08:	f043 0308 	orr.w	r3, r3, #8
 8001c0c:	6013      	str	r3, [r2, #0]
 8001c0e:	4b70      	ldr	r3, [pc, #448]	; (8001dd0 <HAL_RCC_OscConfig+0x270>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6a1b      	ldr	r3, [r3, #32]
 8001c1a:	496d      	ldr	r1, [pc, #436]	; (8001dd0 <HAL_RCC_OscConfig+0x270>)
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c20:	4b6b      	ldr	r3, [pc, #428]	; (8001dd0 <HAL_RCC_OscConfig+0x270>)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	69db      	ldr	r3, [r3, #28]
 8001c2c:	021b      	lsls	r3, r3, #8
 8001c2e:	4968      	ldr	r1, [pc, #416]	; (8001dd0 <HAL_RCC_OscConfig+0x270>)
 8001c30:	4313      	orrs	r3, r2
 8001c32:	604b      	str	r3, [r1, #4]
 8001c34:	e025      	b.n	8001c82 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c36:	4b66      	ldr	r3, [pc, #408]	; (8001dd0 <HAL_RCC_OscConfig+0x270>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a65      	ldr	r2, [pc, #404]	; (8001dd0 <HAL_RCC_OscConfig+0x270>)
 8001c3c:	f043 0308 	orr.w	r3, r3, #8
 8001c40:	6013      	str	r3, [r2, #0]
 8001c42:	4b63      	ldr	r3, [pc, #396]	; (8001dd0 <HAL_RCC_OscConfig+0x270>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6a1b      	ldr	r3, [r3, #32]
 8001c4e:	4960      	ldr	r1, [pc, #384]	; (8001dd0 <HAL_RCC_OscConfig+0x270>)
 8001c50:	4313      	orrs	r3, r2
 8001c52:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c54:	4b5e      	ldr	r3, [pc, #376]	; (8001dd0 <HAL_RCC_OscConfig+0x270>)
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	69db      	ldr	r3, [r3, #28]
 8001c60:	021b      	lsls	r3, r3, #8
 8001c62:	495b      	ldr	r1, [pc, #364]	; (8001dd0 <HAL_RCC_OscConfig+0x270>)
 8001c64:	4313      	orrs	r3, r2
 8001c66:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d109      	bne.n	8001c82 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6a1b      	ldr	r3, [r3, #32]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f000 fdbe 	bl	80027f4 <RCC_SetFlashLatencyFromMSIRange>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e380      	b.n	8002384 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c82:	f000 fcc1 	bl	8002608 <HAL_RCC_GetSysClockFreq>
 8001c86:	4602      	mov	r2, r0
 8001c88:	4b51      	ldr	r3, [pc, #324]	; (8001dd0 <HAL_RCC_OscConfig+0x270>)
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	091b      	lsrs	r3, r3, #4
 8001c8e:	f003 030f 	and.w	r3, r3, #15
 8001c92:	4950      	ldr	r1, [pc, #320]	; (8001dd4 <HAL_RCC_OscConfig+0x274>)
 8001c94:	5ccb      	ldrb	r3, [r1, r3]
 8001c96:	f003 031f 	and.w	r3, r3, #31
 8001c9a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c9e:	4a4e      	ldr	r2, [pc, #312]	; (8001dd8 <HAL_RCC_OscConfig+0x278>)
 8001ca0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001ca2:	4b4e      	ldr	r3, [pc, #312]	; (8001ddc <HAL_RCC_OscConfig+0x27c>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f005 f9c6 	bl	8007038 <HAL_InitTick>
 8001cac:	4603      	mov	r3, r0
 8001cae:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001cb0:	7bfb      	ldrb	r3, [r7, #15]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d052      	beq.n	8001d5c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001cb6:	7bfb      	ldrb	r3, [r7, #15]
 8001cb8:	e364      	b.n	8002384 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	699b      	ldr	r3, [r3, #24]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d032      	beq.n	8001d28 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001cc2:	4b43      	ldr	r3, [pc, #268]	; (8001dd0 <HAL_RCC_OscConfig+0x270>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a42      	ldr	r2, [pc, #264]	; (8001dd0 <HAL_RCC_OscConfig+0x270>)
 8001cc8:	f043 0301 	orr.w	r3, r3, #1
 8001ccc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001cce:	f7fe fc9d 	bl	800060c <HAL_GetTick>
 8001cd2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cd4:	e008      	b.n	8001ce8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001cd6:	f7fe fc99 	bl	800060c <HAL_GetTick>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d901      	bls.n	8001ce8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e34d      	b.n	8002384 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ce8:	4b39      	ldr	r3, [pc, #228]	; (8001dd0 <HAL_RCC_OscConfig+0x270>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0302 	and.w	r3, r3, #2
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d0f0      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cf4:	4b36      	ldr	r3, [pc, #216]	; (8001dd0 <HAL_RCC_OscConfig+0x270>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a35      	ldr	r2, [pc, #212]	; (8001dd0 <HAL_RCC_OscConfig+0x270>)
 8001cfa:	f043 0308 	orr.w	r3, r3, #8
 8001cfe:	6013      	str	r3, [r2, #0]
 8001d00:	4b33      	ldr	r3, [pc, #204]	; (8001dd0 <HAL_RCC_OscConfig+0x270>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6a1b      	ldr	r3, [r3, #32]
 8001d0c:	4930      	ldr	r1, [pc, #192]	; (8001dd0 <HAL_RCC_OscConfig+0x270>)
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d12:	4b2f      	ldr	r3, [pc, #188]	; (8001dd0 <HAL_RCC_OscConfig+0x270>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	69db      	ldr	r3, [r3, #28]
 8001d1e:	021b      	lsls	r3, r3, #8
 8001d20:	492b      	ldr	r1, [pc, #172]	; (8001dd0 <HAL_RCC_OscConfig+0x270>)
 8001d22:	4313      	orrs	r3, r2
 8001d24:	604b      	str	r3, [r1, #4]
 8001d26:	e01a      	b.n	8001d5e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d28:	4b29      	ldr	r3, [pc, #164]	; (8001dd0 <HAL_RCC_OscConfig+0x270>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a28      	ldr	r2, [pc, #160]	; (8001dd0 <HAL_RCC_OscConfig+0x270>)
 8001d2e:	f023 0301 	bic.w	r3, r3, #1
 8001d32:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d34:	f7fe fc6a 	bl	800060c <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d3a:	e008      	b.n	8001d4e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d3c:	f7fe fc66 	bl	800060c <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e31a      	b.n	8002384 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d4e:	4b20      	ldr	r3, [pc, #128]	; (8001dd0 <HAL_RCC_OscConfig+0x270>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0302 	and.w	r3, r3, #2
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d1f0      	bne.n	8001d3c <HAL_RCC_OscConfig+0x1dc>
 8001d5a:	e000      	b.n	8001d5e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d5c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0301 	and.w	r3, r3, #1
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d073      	beq.n	8001e52 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	2b08      	cmp	r3, #8
 8001d6e:	d005      	beq.n	8001d7c <HAL_RCC_OscConfig+0x21c>
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	2b0c      	cmp	r3, #12
 8001d74:	d10e      	bne.n	8001d94 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	2b03      	cmp	r3, #3
 8001d7a:	d10b      	bne.n	8001d94 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d7c:	4b14      	ldr	r3, [pc, #80]	; (8001dd0 <HAL_RCC_OscConfig+0x270>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d063      	beq.n	8001e50 <HAL_RCC_OscConfig+0x2f0>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d15f      	bne.n	8001e50 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e2f7      	b.n	8002384 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d9c:	d106      	bne.n	8001dac <HAL_RCC_OscConfig+0x24c>
 8001d9e:	4b0c      	ldr	r3, [pc, #48]	; (8001dd0 <HAL_RCC_OscConfig+0x270>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a0b      	ldr	r2, [pc, #44]	; (8001dd0 <HAL_RCC_OscConfig+0x270>)
 8001da4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001da8:	6013      	str	r3, [r2, #0]
 8001daa:	e025      	b.n	8001df8 <HAL_RCC_OscConfig+0x298>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001db4:	d114      	bne.n	8001de0 <HAL_RCC_OscConfig+0x280>
 8001db6:	4b06      	ldr	r3, [pc, #24]	; (8001dd0 <HAL_RCC_OscConfig+0x270>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a05      	ldr	r2, [pc, #20]	; (8001dd0 <HAL_RCC_OscConfig+0x270>)
 8001dbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dc0:	6013      	str	r3, [r2, #0]
 8001dc2:	4b03      	ldr	r3, [pc, #12]	; (8001dd0 <HAL_RCC_OscConfig+0x270>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a02      	ldr	r2, [pc, #8]	; (8001dd0 <HAL_RCC_OscConfig+0x270>)
 8001dc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dcc:	6013      	str	r3, [r2, #0]
 8001dce:	e013      	b.n	8001df8 <HAL_RCC_OscConfig+0x298>
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	08007d20 	.word	0x08007d20
 8001dd8:	200000b4 	.word	0x200000b4
 8001ddc:	20000000 	.word	0x20000000
 8001de0:	4ba0      	ldr	r3, [pc, #640]	; (8002064 <HAL_RCC_OscConfig+0x504>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a9f      	ldr	r2, [pc, #636]	; (8002064 <HAL_RCC_OscConfig+0x504>)
 8001de6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dea:	6013      	str	r3, [r2, #0]
 8001dec:	4b9d      	ldr	r3, [pc, #628]	; (8002064 <HAL_RCC_OscConfig+0x504>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a9c      	ldr	r2, [pc, #624]	; (8002064 <HAL_RCC_OscConfig+0x504>)
 8001df2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001df6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d013      	beq.n	8001e28 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e00:	f7fe fc04 	bl	800060c <HAL_GetTick>
 8001e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e06:	e008      	b.n	8001e1a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e08:	f7fe fc00 	bl	800060c <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b64      	cmp	r3, #100	; 0x64
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e2b4      	b.n	8002384 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e1a:	4b92      	ldr	r3, [pc, #584]	; (8002064 <HAL_RCC_OscConfig+0x504>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d0f0      	beq.n	8001e08 <HAL_RCC_OscConfig+0x2a8>
 8001e26:	e014      	b.n	8001e52 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e28:	f7fe fbf0 	bl	800060c <HAL_GetTick>
 8001e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e2e:	e008      	b.n	8001e42 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e30:	f7fe fbec 	bl	800060c <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	2b64      	cmp	r3, #100	; 0x64
 8001e3c:	d901      	bls.n	8001e42 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e2a0      	b.n	8002384 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e42:	4b88      	ldr	r3, [pc, #544]	; (8002064 <HAL_RCC_OscConfig+0x504>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d1f0      	bne.n	8001e30 <HAL_RCC_OscConfig+0x2d0>
 8001e4e:	e000      	b.n	8001e52 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d060      	beq.n	8001f20 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	2b04      	cmp	r3, #4
 8001e62:	d005      	beq.n	8001e70 <HAL_RCC_OscConfig+0x310>
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	2b0c      	cmp	r3, #12
 8001e68:	d119      	bne.n	8001e9e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d116      	bne.n	8001e9e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e70:	4b7c      	ldr	r3, [pc, #496]	; (8002064 <HAL_RCC_OscConfig+0x504>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d005      	beq.n	8001e88 <HAL_RCC_OscConfig+0x328>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d101      	bne.n	8001e88 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e27d      	b.n	8002384 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e88:	4b76      	ldr	r3, [pc, #472]	; (8002064 <HAL_RCC_OscConfig+0x504>)
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	691b      	ldr	r3, [r3, #16]
 8001e94:	061b      	lsls	r3, r3, #24
 8001e96:	4973      	ldr	r1, [pc, #460]	; (8002064 <HAL_RCC_OscConfig+0x504>)
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e9c:	e040      	b.n	8001f20 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d023      	beq.n	8001eee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ea6:	4b6f      	ldr	r3, [pc, #444]	; (8002064 <HAL_RCC_OscConfig+0x504>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a6e      	ldr	r2, [pc, #440]	; (8002064 <HAL_RCC_OscConfig+0x504>)
 8001eac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb2:	f7fe fbab 	bl	800060c <HAL_GetTick>
 8001eb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001eb8:	e008      	b.n	8001ecc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eba:	f7fe fba7 	bl	800060c <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d901      	bls.n	8001ecc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e25b      	b.n	8002384 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ecc:	4b65      	ldr	r3, [pc, #404]	; (8002064 <HAL_RCC_OscConfig+0x504>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d0f0      	beq.n	8001eba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ed8:	4b62      	ldr	r3, [pc, #392]	; (8002064 <HAL_RCC_OscConfig+0x504>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	691b      	ldr	r3, [r3, #16]
 8001ee4:	061b      	lsls	r3, r3, #24
 8001ee6:	495f      	ldr	r1, [pc, #380]	; (8002064 <HAL_RCC_OscConfig+0x504>)
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	604b      	str	r3, [r1, #4]
 8001eec:	e018      	b.n	8001f20 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eee:	4b5d      	ldr	r3, [pc, #372]	; (8002064 <HAL_RCC_OscConfig+0x504>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a5c      	ldr	r2, [pc, #368]	; (8002064 <HAL_RCC_OscConfig+0x504>)
 8001ef4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ef8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001efa:	f7fe fb87 	bl	800060c <HAL_GetTick>
 8001efe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f00:	e008      	b.n	8001f14 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f02:	f7fe fb83 	bl	800060c <HAL_GetTick>
 8001f06:	4602      	mov	r2, r0
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d901      	bls.n	8001f14 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001f10:	2303      	movs	r3, #3
 8001f12:	e237      	b.n	8002384 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f14:	4b53      	ldr	r3, [pc, #332]	; (8002064 <HAL_RCC_OscConfig+0x504>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d1f0      	bne.n	8001f02 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0308 	and.w	r3, r3, #8
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d03c      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	695b      	ldr	r3, [r3, #20]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d01c      	beq.n	8001f6e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f34:	4b4b      	ldr	r3, [pc, #300]	; (8002064 <HAL_RCC_OscConfig+0x504>)
 8001f36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f3a:	4a4a      	ldr	r2, [pc, #296]	; (8002064 <HAL_RCC_OscConfig+0x504>)
 8001f3c:	f043 0301 	orr.w	r3, r3, #1
 8001f40:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f44:	f7fe fb62 	bl	800060c <HAL_GetTick>
 8001f48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f4a:	e008      	b.n	8001f5e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f4c:	f7fe fb5e 	bl	800060c <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d901      	bls.n	8001f5e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e212      	b.n	8002384 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f5e:	4b41      	ldr	r3, [pc, #260]	; (8002064 <HAL_RCC_OscConfig+0x504>)
 8001f60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f64:	f003 0302 	and.w	r3, r3, #2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d0ef      	beq.n	8001f4c <HAL_RCC_OscConfig+0x3ec>
 8001f6c:	e01b      	b.n	8001fa6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f6e:	4b3d      	ldr	r3, [pc, #244]	; (8002064 <HAL_RCC_OscConfig+0x504>)
 8001f70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f74:	4a3b      	ldr	r2, [pc, #236]	; (8002064 <HAL_RCC_OscConfig+0x504>)
 8001f76:	f023 0301 	bic.w	r3, r3, #1
 8001f7a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f7e:	f7fe fb45 	bl	800060c <HAL_GetTick>
 8001f82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f84:	e008      	b.n	8001f98 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f86:	f7fe fb41 	bl	800060c <HAL_GetTick>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d901      	bls.n	8001f98 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	e1f5      	b.n	8002384 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f98:	4b32      	ldr	r3, [pc, #200]	; (8002064 <HAL_RCC_OscConfig+0x504>)
 8001f9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d1ef      	bne.n	8001f86 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0304 	and.w	r3, r3, #4
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	f000 80a6 	beq.w	8002100 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001fb8:	4b2a      	ldr	r3, [pc, #168]	; (8002064 <HAL_RCC_OscConfig+0x504>)
 8001fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d10d      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fc4:	4b27      	ldr	r3, [pc, #156]	; (8002064 <HAL_RCC_OscConfig+0x504>)
 8001fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc8:	4a26      	ldr	r2, [pc, #152]	; (8002064 <HAL_RCC_OscConfig+0x504>)
 8001fca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fce:	6593      	str	r3, [r2, #88]	; 0x58
 8001fd0:	4b24      	ldr	r3, [pc, #144]	; (8002064 <HAL_RCC_OscConfig+0x504>)
 8001fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd8:	60bb      	str	r3, [r7, #8]
 8001fda:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fe0:	4b21      	ldr	r3, [pc, #132]	; (8002068 <HAL_RCC_OscConfig+0x508>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d118      	bne.n	800201e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fec:	4b1e      	ldr	r3, [pc, #120]	; (8002068 <HAL_RCC_OscConfig+0x508>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a1d      	ldr	r2, [pc, #116]	; (8002068 <HAL_RCC_OscConfig+0x508>)
 8001ff2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ff6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ff8:	f7fe fb08 	bl	800060c <HAL_GetTick>
 8001ffc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ffe:	e008      	b.n	8002012 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002000:	f7fe fb04 	bl	800060c <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	2b02      	cmp	r3, #2
 800200c:	d901      	bls.n	8002012 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e1b8      	b.n	8002384 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002012:	4b15      	ldr	r3, [pc, #84]	; (8002068 <HAL_RCC_OscConfig+0x508>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800201a:	2b00      	cmp	r3, #0
 800201c:	d0f0      	beq.n	8002000 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	2b01      	cmp	r3, #1
 8002024:	d108      	bne.n	8002038 <HAL_RCC_OscConfig+0x4d8>
 8002026:	4b0f      	ldr	r3, [pc, #60]	; (8002064 <HAL_RCC_OscConfig+0x504>)
 8002028:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800202c:	4a0d      	ldr	r2, [pc, #52]	; (8002064 <HAL_RCC_OscConfig+0x504>)
 800202e:	f043 0301 	orr.w	r3, r3, #1
 8002032:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002036:	e029      	b.n	800208c <HAL_RCC_OscConfig+0x52c>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	2b05      	cmp	r3, #5
 800203e:	d115      	bne.n	800206c <HAL_RCC_OscConfig+0x50c>
 8002040:	4b08      	ldr	r3, [pc, #32]	; (8002064 <HAL_RCC_OscConfig+0x504>)
 8002042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002046:	4a07      	ldr	r2, [pc, #28]	; (8002064 <HAL_RCC_OscConfig+0x504>)
 8002048:	f043 0304 	orr.w	r3, r3, #4
 800204c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002050:	4b04      	ldr	r3, [pc, #16]	; (8002064 <HAL_RCC_OscConfig+0x504>)
 8002052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002056:	4a03      	ldr	r2, [pc, #12]	; (8002064 <HAL_RCC_OscConfig+0x504>)
 8002058:	f043 0301 	orr.w	r3, r3, #1
 800205c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002060:	e014      	b.n	800208c <HAL_RCC_OscConfig+0x52c>
 8002062:	bf00      	nop
 8002064:	40021000 	.word	0x40021000
 8002068:	40007000 	.word	0x40007000
 800206c:	4b9d      	ldr	r3, [pc, #628]	; (80022e4 <HAL_RCC_OscConfig+0x784>)
 800206e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002072:	4a9c      	ldr	r2, [pc, #624]	; (80022e4 <HAL_RCC_OscConfig+0x784>)
 8002074:	f023 0301 	bic.w	r3, r3, #1
 8002078:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800207c:	4b99      	ldr	r3, [pc, #612]	; (80022e4 <HAL_RCC_OscConfig+0x784>)
 800207e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002082:	4a98      	ldr	r2, [pc, #608]	; (80022e4 <HAL_RCC_OscConfig+0x784>)
 8002084:	f023 0304 	bic.w	r3, r3, #4
 8002088:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d016      	beq.n	80020c2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002094:	f7fe faba 	bl	800060c <HAL_GetTick>
 8002098:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800209a:	e00a      	b.n	80020b2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800209c:	f7fe fab6 	bl	800060c <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e168      	b.n	8002384 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020b2:	4b8c      	ldr	r3, [pc, #560]	; (80022e4 <HAL_RCC_OscConfig+0x784>)
 80020b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020b8:	f003 0302 	and.w	r3, r3, #2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d0ed      	beq.n	800209c <HAL_RCC_OscConfig+0x53c>
 80020c0:	e015      	b.n	80020ee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020c2:	f7fe faa3 	bl	800060c <HAL_GetTick>
 80020c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020c8:	e00a      	b.n	80020e0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ca:	f7fe fa9f 	bl	800060c <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80020d8:	4293      	cmp	r3, r2
 80020da:	d901      	bls.n	80020e0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80020dc:	2303      	movs	r3, #3
 80020de:	e151      	b.n	8002384 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020e0:	4b80      	ldr	r3, [pc, #512]	; (80022e4 <HAL_RCC_OscConfig+0x784>)
 80020e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020e6:	f003 0302 	and.w	r3, r3, #2
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d1ed      	bne.n	80020ca <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020ee:	7ffb      	ldrb	r3, [r7, #31]
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d105      	bne.n	8002100 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020f4:	4b7b      	ldr	r3, [pc, #492]	; (80022e4 <HAL_RCC_OscConfig+0x784>)
 80020f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f8:	4a7a      	ldr	r2, [pc, #488]	; (80022e4 <HAL_RCC_OscConfig+0x784>)
 80020fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020fe:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0320 	and.w	r3, r3, #32
 8002108:	2b00      	cmp	r3, #0
 800210a:	d03c      	beq.n	8002186 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002110:	2b00      	cmp	r3, #0
 8002112:	d01c      	beq.n	800214e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002114:	4b73      	ldr	r3, [pc, #460]	; (80022e4 <HAL_RCC_OscConfig+0x784>)
 8002116:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800211a:	4a72      	ldr	r2, [pc, #456]	; (80022e4 <HAL_RCC_OscConfig+0x784>)
 800211c:	f043 0301 	orr.w	r3, r3, #1
 8002120:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002124:	f7fe fa72 	bl	800060c <HAL_GetTick>
 8002128:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800212a:	e008      	b.n	800213e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800212c:	f7fe fa6e 	bl	800060c <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	2b02      	cmp	r3, #2
 8002138:	d901      	bls.n	800213e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e122      	b.n	8002384 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800213e:	4b69      	ldr	r3, [pc, #420]	; (80022e4 <HAL_RCC_OscConfig+0x784>)
 8002140:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002144:	f003 0302 	and.w	r3, r3, #2
 8002148:	2b00      	cmp	r3, #0
 800214a:	d0ef      	beq.n	800212c <HAL_RCC_OscConfig+0x5cc>
 800214c:	e01b      	b.n	8002186 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800214e:	4b65      	ldr	r3, [pc, #404]	; (80022e4 <HAL_RCC_OscConfig+0x784>)
 8002150:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002154:	4a63      	ldr	r2, [pc, #396]	; (80022e4 <HAL_RCC_OscConfig+0x784>)
 8002156:	f023 0301 	bic.w	r3, r3, #1
 800215a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800215e:	f7fe fa55 	bl	800060c <HAL_GetTick>
 8002162:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002164:	e008      	b.n	8002178 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002166:	f7fe fa51 	bl	800060c <HAL_GetTick>
 800216a:	4602      	mov	r2, r0
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	2b02      	cmp	r3, #2
 8002172:	d901      	bls.n	8002178 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	e105      	b.n	8002384 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002178:	4b5a      	ldr	r3, [pc, #360]	; (80022e4 <HAL_RCC_OscConfig+0x784>)
 800217a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	2b00      	cmp	r3, #0
 8002184:	d1ef      	bne.n	8002166 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800218a:	2b00      	cmp	r3, #0
 800218c:	f000 80f9 	beq.w	8002382 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002194:	2b02      	cmp	r3, #2
 8002196:	f040 80cf 	bne.w	8002338 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800219a:	4b52      	ldr	r3, [pc, #328]	; (80022e4 <HAL_RCC_OscConfig+0x784>)
 800219c:	68db      	ldr	r3, [r3, #12]
 800219e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	f003 0203 	and.w	r2, r3, #3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d12c      	bne.n	8002208 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b8:	3b01      	subs	r3, #1
 80021ba:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021bc:	429a      	cmp	r2, r3
 80021be:	d123      	bne.n	8002208 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021ca:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d11b      	bne.n	8002208 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021da:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021dc:	429a      	cmp	r2, r3
 80021de:	d113      	bne.n	8002208 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ea:	085b      	lsrs	r3, r3, #1
 80021ec:	3b01      	subs	r3, #1
 80021ee:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d109      	bne.n	8002208 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fe:	085b      	lsrs	r3, r3, #1
 8002200:	3b01      	subs	r3, #1
 8002202:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002204:	429a      	cmp	r2, r3
 8002206:	d071      	beq.n	80022ec <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	2b0c      	cmp	r3, #12
 800220c:	d068      	beq.n	80022e0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800220e:	4b35      	ldr	r3, [pc, #212]	; (80022e4 <HAL_RCC_OscConfig+0x784>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d105      	bne.n	8002226 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800221a:	4b32      	ldr	r3, [pc, #200]	; (80022e4 <HAL_RCC_OscConfig+0x784>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e0ac      	b.n	8002384 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800222a:	4b2e      	ldr	r3, [pc, #184]	; (80022e4 <HAL_RCC_OscConfig+0x784>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a2d      	ldr	r2, [pc, #180]	; (80022e4 <HAL_RCC_OscConfig+0x784>)
 8002230:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002234:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002236:	f7fe f9e9 	bl	800060c <HAL_GetTick>
 800223a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800223c:	e008      	b.n	8002250 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800223e:	f7fe f9e5 	bl	800060c <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	2b02      	cmp	r3, #2
 800224a:	d901      	bls.n	8002250 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e099      	b.n	8002384 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002250:	4b24      	ldr	r3, [pc, #144]	; (80022e4 <HAL_RCC_OscConfig+0x784>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d1f0      	bne.n	800223e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800225c:	4b21      	ldr	r3, [pc, #132]	; (80022e4 <HAL_RCC_OscConfig+0x784>)
 800225e:	68da      	ldr	r2, [r3, #12]
 8002260:	4b21      	ldr	r3, [pc, #132]	; (80022e8 <HAL_RCC_OscConfig+0x788>)
 8002262:	4013      	ands	r3, r2
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800226c:	3a01      	subs	r2, #1
 800226e:	0112      	lsls	r2, r2, #4
 8002270:	4311      	orrs	r1, r2
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002276:	0212      	lsls	r2, r2, #8
 8002278:	4311      	orrs	r1, r2
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800227e:	0852      	lsrs	r2, r2, #1
 8002280:	3a01      	subs	r2, #1
 8002282:	0552      	lsls	r2, r2, #21
 8002284:	4311      	orrs	r1, r2
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800228a:	0852      	lsrs	r2, r2, #1
 800228c:	3a01      	subs	r2, #1
 800228e:	0652      	lsls	r2, r2, #25
 8002290:	4311      	orrs	r1, r2
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002296:	06d2      	lsls	r2, r2, #27
 8002298:	430a      	orrs	r2, r1
 800229a:	4912      	ldr	r1, [pc, #72]	; (80022e4 <HAL_RCC_OscConfig+0x784>)
 800229c:	4313      	orrs	r3, r2
 800229e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80022a0:	4b10      	ldr	r3, [pc, #64]	; (80022e4 <HAL_RCC_OscConfig+0x784>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a0f      	ldr	r2, [pc, #60]	; (80022e4 <HAL_RCC_OscConfig+0x784>)
 80022a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022aa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022ac:	4b0d      	ldr	r3, [pc, #52]	; (80022e4 <HAL_RCC_OscConfig+0x784>)
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	4a0c      	ldr	r2, [pc, #48]	; (80022e4 <HAL_RCC_OscConfig+0x784>)
 80022b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022b6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80022b8:	f7fe f9a8 	bl	800060c <HAL_GetTick>
 80022bc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022be:	e008      	b.n	80022d2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022c0:	f7fe f9a4 	bl	800060c <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e058      	b.n	8002384 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022d2:	4b04      	ldr	r3, [pc, #16]	; (80022e4 <HAL_RCC_OscConfig+0x784>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d0f0      	beq.n	80022c0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022de:	e050      	b.n	8002382 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e04f      	b.n	8002384 <HAL_RCC_OscConfig+0x824>
 80022e4:	40021000 	.word	0x40021000
 80022e8:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022ec:	4b27      	ldr	r3, [pc, #156]	; (800238c <HAL_RCC_OscConfig+0x82c>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d144      	bne.n	8002382 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80022f8:	4b24      	ldr	r3, [pc, #144]	; (800238c <HAL_RCC_OscConfig+0x82c>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a23      	ldr	r2, [pc, #140]	; (800238c <HAL_RCC_OscConfig+0x82c>)
 80022fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002302:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002304:	4b21      	ldr	r3, [pc, #132]	; (800238c <HAL_RCC_OscConfig+0x82c>)
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	4a20      	ldr	r2, [pc, #128]	; (800238c <HAL_RCC_OscConfig+0x82c>)
 800230a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800230e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002310:	f7fe f97c 	bl	800060c <HAL_GetTick>
 8002314:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002316:	e008      	b.n	800232a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002318:	f7fe f978 	bl	800060c <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b02      	cmp	r3, #2
 8002324:	d901      	bls.n	800232a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e02c      	b.n	8002384 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800232a:	4b18      	ldr	r3, [pc, #96]	; (800238c <HAL_RCC_OscConfig+0x82c>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d0f0      	beq.n	8002318 <HAL_RCC_OscConfig+0x7b8>
 8002336:	e024      	b.n	8002382 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002338:	69bb      	ldr	r3, [r7, #24]
 800233a:	2b0c      	cmp	r3, #12
 800233c:	d01f      	beq.n	800237e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800233e:	4b13      	ldr	r3, [pc, #76]	; (800238c <HAL_RCC_OscConfig+0x82c>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a12      	ldr	r2, [pc, #72]	; (800238c <HAL_RCC_OscConfig+0x82c>)
 8002344:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002348:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800234a:	f7fe f95f 	bl	800060c <HAL_GetTick>
 800234e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002350:	e008      	b.n	8002364 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002352:	f7fe f95b 	bl	800060c <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	2b02      	cmp	r3, #2
 800235e:	d901      	bls.n	8002364 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e00f      	b.n	8002384 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002364:	4b09      	ldr	r3, [pc, #36]	; (800238c <HAL_RCC_OscConfig+0x82c>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d1f0      	bne.n	8002352 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002370:	4b06      	ldr	r3, [pc, #24]	; (800238c <HAL_RCC_OscConfig+0x82c>)
 8002372:	68da      	ldr	r2, [r3, #12]
 8002374:	4905      	ldr	r1, [pc, #20]	; (800238c <HAL_RCC_OscConfig+0x82c>)
 8002376:	4b06      	ldr	r3, [pc, #24]	; (8002390 <HAL_RCC_OscConfig+0x830>)
 8002378:	4013      	ands	r3, r2
 800237a:	60cb      	str	r3, [r1, #12]
 800237c:	e001      	b.n	8002382 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e000      	b.n	8002384 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002382:	2300      	movs	r3, #0
}
 8002384:	4618      	mov	r0, r3
 8002386:	3720      	adds	r7, #32
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	40021000 	.word	0x40021000
 8002390:	feeefffc 	.word	0xfeeefffc

08002394 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b086      	sub	sp, #24
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800239e:	2300      	movs	r3, #0
 80023a0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d101      	bne.n	80023ac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e11d      	b.n	80025e8 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023ac:	4b90      	ldr	r3, [pc, #576]	; (80025f0 <HAL_RCC_ClockConfig+0x25c>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 030f 	and.w	r3, r3, #15
 80023b4:	683a      	ldr	r2, [r7, #0]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d910      	bls.n	80023dc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ba:	4b8d      	ldr	r3, [pc, #564]	; (80025f0 <HAL_RCC_ClockConfig+0x25c>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f023 020f 	bic.w	r2, r3, #15
 80023c2:	498b      	ldr	r1, [pc, #556]	; (80025f0 <HAL_RCC_ClockConfig+0x25c>)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ca:	4b89      	ldr	r3, [pc, #548]	; (80025f0 <HAL_RCC_ClockConfig+0x25c>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 030f 	and.w	r3, r3, #15
 80023d2:	683a      	ldr	r2, [r7, #0]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d001      	beq.n	80023dc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e105      	b.n	80025e8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0302 	and.w	r3, r3, #2
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d010      	beq.n	800240a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	689a      	ldr	r2, [r3, #8]
 80023ec:	4b81      	ldr	r3, [pc, #516]	; (80025f4 <HAL_RCC_ClockConfig+0x260>)
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d908      	bls.n	800240a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023f8:	4b7e      	ldr	r3, [pc, #504]	; (80025f4 <HAL_RCC_ClockConfig+0x260>)
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	497b      	ldr	r1, [pc, #492]	; (80025f4 <HAL_RCC_ClockConfig+0x260>)
 8002406:	4313      	orrs	r3, r2
 8002408:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	2b00      	cmp	r3, #0
 8002414:	d079      	beq.n	800250a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	2b03      	cmp	r3, #3
 800241c:	d11e      	bne.n	800245c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800241e:	4b75      	ldr	r3, [pc, #468]	; (80025f4 <HAL_RCC_ClockConfig+0x260>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d101      	bne.n	800242e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e0dc      	b.n	80025e8 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800242e:	f000 fa3b 	bl	80028a8 <RCC_GetSysClockFreqFromPLLSource>
 8002432:	4603      	mov	r3, r0
 8002434:	4a70      	ldr	r2, [pc, #448]	; (80025f8 <HAL_RCC_ClockConfig+0x264>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d946      	bls.n	80024c8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800243a:	4b6e      	ldr	r3, [pc, #440]	; (80025f4 <HAL_RCC_ClockConfig+0x260>)
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d140      	bne.n	80024c8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002446:	4b6b      	ldr	r3, [pc, #428]	; (80025f4 <HAL_RCC_ClockConfig+0x260>)
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800244e:	4a69      	ldr	r2, [pc, #420]	; (80025f4 <HAL_RCC_ClockConfig+0x260>)
 8002450:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002454:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002456:	2380      	movs	r3, #128	; 0x80
 8002458:	617b      	str	r3, [r7, #20]
 800245a:	e035      	b.n	80024c8 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	2b02      	cmp	r3, #2
 8002462:	d107      	bne.n	8002474 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002464:	4b63      	ldr	r3, [pc, #396]	; (80025f4 <HAL_RCC_ClockConfig+0x260>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d115      	bne.n	800249c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e0b9      	b.n	80025e8 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d107      	bne.n	800248c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800247c:	4b5d      	ldr	r3, [pc, #372]	; (80025f4 <HAL_RCC_ClockConfig+0x260>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0302 	and.w	r3, r3, #2
 8002484:	2b00      	cmp	r3, #0
 8002486:	d109      	bne.n	800249c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e0ad      	b.n	80025e8 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800248c:	4b59      	ldr	r3, [pc, #356]	; (80025f4 <HAL_RCC_ClockConfig+0x260>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002494:	2b00      	cmp	r3, #0
 8002496:	d101      	bne.n	800249c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e0a5      	b.n	80025e8 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800249c:	f000 f8b4 	bl	8002608 <HAL_RCC_GetSysClockFreq>
 80024a0:	4603      	mov	r3, r0
 80024a2:	4a55      	ldr	r2, [pc, #340]	; (80025f8 <HAL_RCC_ClockConfig+0x264>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d90f      	bls.n	80024c8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80024a8:	4b52      	ldr	r3, [pc, #328]	; (80025f4 <HAL_RCC_ClockConfig+0x260>)
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d109      	bne.n	80024c8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80024b4:	4b4f      	ldr	r3, [pc, #316]	; (80025f4 <HAL_RCC_ClockConfig+0x260>)
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024bc:	4a4d      	ldr	r2, [pc, #308]	; (80025f4 <HAL_RCC_ClockConfig+0x260>)
 80024be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024c2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80024c4:	2380      	movs	r3, #128	; 0x80
 80024c6:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80024c8:	4b4a      	ldr	r3, [pc, #296]	; (80025f4 <HAL_RCC_ClockConfig+0x260>)
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f023 0203 	bic.w	r2, r3, #3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	4947      	ldr	r1, [pc, #284]	; (80025f4 <HAL_RCC_ClockConfig+0x260>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024da:	f7fe f897 	bl	800060c <HAL_GetTick>
 80024de:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024e0:	e00a      	b.n	80024f8 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024e2:	f7fe f893 	bl	800060c <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d901      	bls.n	80024f8 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e077      	b.n	80025e8 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024f8:	4b3e      	ldr	r3, [pc, #248]	; (80025f4 <HAL_RCC_ClockConfig+0x260>)
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	f003 020c 	and.w	r2, r3, #12
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	429a      	cmp	r2, r3
 8002508:	d1eb      	bne.n	80024e2 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	2b80      	cmp	r3, #128	; 0x80
 800250e:	d105      	bne.n	800251c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002510:	4b38      	ldr	r3, [pc, #224]	; (80025f4 <HAL_RCC_ClockConfig+0x260>)
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	4a37      	ldr	r2, [pc, #220]	; (80025f4 <HAL_RCC_ClockConfig+0x260>)
 8002516:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800251a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0302 	and.w	r3, r3, #2
 8002524:	2b00      	cmp	r3, #0
 8002526:	d010      	beq.n	800254a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	689a      	ldr	r2, [r3, #8]
 800252c:	4b31      	ldr	r3, [pc, #196]	; (80025f4 <HAL_RCC_ClockConfig+0x260>)
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002534:	429a      	cmp	r2, r3
 8002536:	d208      	bcs.n	800254a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002538:	4b2e      	ldr	r3, [pc, #184]	; (80025f4 <HAL_RCC_ClockConfig+0x260>)
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	492b      	ldr	r1, [pc, #172]	; (80025f4 <HAL_RCC_ClockConfig+0x260>)
 8002546:	4313      	orrs	r3, r2
 8002548:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800254a:	4b29      	ldr	r3, [pc, #164]	; (80025f0 <HAL_RCC_ClockConfig+0x25c>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 030f 	and.w	r3, r3, #15
 8002552:	683a      	ldr	r2, [r7, #0]
 8002554:	429a      	cmp	r2, r3
 8002556:	d210      	bcs.n	800257a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002558:	4b25      	ldr	r3, [pc, #148]	; (80025f0 <HAL_RCC_ClockConfig+0x25c>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f023 020f 	bic.w	r2, r3, #15
 8002560:	4923      	ldr	r1, [pc, #140]	; (80025f0 <HAL_RCC_ClockConfig+0x25c>)
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	4313      	orrs	r3, r2
 8002566:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002568:	4b21      	ldr	r3, [pc, #132]	; (80025f0 <HAL_RCC_ClockConfig+0x25c>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 030f 	and.w	r3, r3, #15
 8002570:	683a      	ldr	r2, [r7, #0]
 8002572:	429a      	cmp	r2, r3
 8002574:	d001      	beq.n	800257a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e036      	b.n	80025e8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0304 	and.w	r3, r3, #4
 8002582:	2b00      	cmp	r3, #0
 8002584:	d008      	beq.n	8002598 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002586:	4b1b      	ldr	r3, [pc, #108]	; (80025f4 <HAL_RCC_ClockConfig+0x260>)
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	4918      	ldr	r1, [pc, #96]	; (80025f4 <HAL_RCC_ClockConfig+0x260>)
 8002594:	4313      	orrs	r3, r2
 8002596:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0308 	and.w	r3, r3, #8
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d009      	beq.n	80025b8 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025a4:	4b13      	ldr	r3, [pc, #76]	; (80025f4 <HAL_RCC_ClockConfig+0x260>)
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	691b      	ldr	r3, [r3, #16]
 80025b0:	00db      	lsls	r3, r3, #3
 80025b2:	4910      	ldr	r1, [pc, #64]	; (80025f4 <HAL_RCC_ClockConfig+0x260>)
 80025b4:	4313      	orrs	r3, r2
 80025b6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025b8:	f000 f826 	bl	8002608 <HAL_RCC_GetSysClockFreq>
 80025bc:	4602      	mov	r2, r0
 80025be:	4b0d      	ldr	r3, [pc, #52]	; (80025f4 <HAL_RCC_ClockConfig+0x260>)
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	091b      	lsrs	r3, r3, #4
 80025c4:	f003 030f 	and.w	r3, r3, #15
 80025c8:	490c      	ldr	r1, [pc, #48]	; (80025fc <HAL_RCC_ClockConfig+0x268>)
 80025ca:	5ccb      	ldrb	r3, [r1, r3]
 80025cc:	f003 031f 	and.w	r3, r3, #31
 80025d0:	fa22 f303 	lsr.w	r3, r2, r3
 80025d4:	4a0a      	ldr	r2, [pc, #40]	; (8002600 <HAL_RCC_ClockConfig+0x26c>)
 80025d6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80025d8:	4b0a      	ldr	r3, [pc, #40]	; (8002604 <HAL_RCC_ClockConfig+0x270>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4618      	mov	r0, r3
 80025de:	f004 fd2b 	bl	8007038 <HAL_InitTick>
 80025e2:	4603      	mov	r3, r0
 80025e4:	73fb      	strb	r3, [r7, #15]

  return status;
 80025e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3718      	adds	r7, #24
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	40022000 	.word	0x40022000
 80025f4:	40021000 	.word	0x40021000
 80025f8:	04c4b400 	.word	0x04c4b400
 80025fc:	08007d20 	.word	0x08007d20
 8002600:	200000b4 	.word	0x200000b4
 8002604:	20000000 	.word	0x20000000

08002608 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002608:	b480      	push	{r7}
 800260a:	b089      	sub	sp, #36	; 0x24
 800260c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800260e:	2300      	movs	r3, #0
 8002610:	61fb      	str	r3, [r7, #28]
 8002612:	2300      	movs	r3, #0
 8002614:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002616:	4b3e      	ldr	r3, [pc, #248]	; (8002710 <HAL_RCC_GetSysClockFreq+0x108>)
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f003 030c 	and.w	r3, r3, #12
 800261e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002620:	4b3b      	ldr	r3, [pc, #236]	; (8002710 <HAL_RCC_GetSysClockFreq+0x108>)
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	f003 0303 	and.w	r3, r3, #3
 8002628:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d005      	beq.n	800263c <HAL_RCC_GetSysClockFreq+0x34>
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	2b0c      	cmp	r3, #12
 8002634:	d121      	bne.n	800267a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2b01      	cmp	r3, #1
 800263a:	d11e      	bne.n	800267a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800263c:	4b34      	ldr	r3, [pc, #208]	; (8002710 <HAL_RCC_GetSysClockFreq+0x108>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0308 	and.w	r3, r3, #8
 8002644:	2b00      	cmp	r3, #0
 8002646:	d107      	bne.n	8002658 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002648:	4b31      	ldr	r3, [pc, #196]	; (8002710 <HAL_RCC_GetSysClockFreq+0x108>)
 800264a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800264e:	0a1b      	lsrs	r3, r3, #8
 8002650:	f003 030f 	and.w	r3, r3, #15
 8002654:	61fb      	str	r3, [r7, #28]
 8002656:	e005      	b.n	8002664 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002658:	4b2d      	ldr	r3, [pc, #180]	; (8002710 <HAL_RCC_GetSysClockFreq+0x108>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	091b      	lsrs	r3, r3, #4
 800265e:	f003 030f 	and.w	r3, r3, #15
 8002662:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002664:	4a2b      	ldr	r2, [pc, #172]	; (8002714 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800266c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d10d      	bne.n	8002690 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002678:	e00a      	b.n	8002690 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	2b04      	cmp	r3, #4
 800267e:	d102      	bne.n	8002686 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002680:	4b25      	ldr	r3, [pc, #148]	; (8002718 <HAL_RCC_GetSysClockFreq+0x110>)
 8002682:	61bb      	str	r3, [r7, #24]
 8002684:	e004      	b.n	8002690 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	2b08      	cmp	r3, #8
 800268a:	d101      	bne.n	8002690 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800268c:	4b23      	ldr	r3, [pc, #140]	; (800271c <HAL_RCC_GetSysClockFreq+0x114>)
 800268e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	2b0c      	cmp	r3, #12
 8002694:	d134      	bne.n	8002700 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002696:	4b1e      	ldr	r3, [pc, #120]	; (8002710 <HAL_RCC_GetSysClockFreq+0x108>)
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	f003 0303 	and.w	r3, r3, #3
 800269e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d003      	beq.n	80026ae <HAL_RCC_GetSysClockFreq+0xa6>
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	2b03      	cmp	r3, #3
 80026aa:	d003      	beq.n	80026b4 <HAL_RCC_GetSysClockFreq+0xac>
 80026ac:	e005      	b.n	80026ba <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80026ae:	4b1a      	ldr	r3, [pc, #104]	; (8002718 <HAL_RCC_GetSysClockFreq+0x110>)
 80026b0:	617b      	str	r3, [r7, #20]
      break;
 80026b2:	e005      	b.n	80026c0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80026b4:	4b19      	ldr	r3, [pc, #100]	; (800271c <HAL_RCC_GetSysClockFreq+0x114>)
 80026b6:	617b      	str	r3, [r7, #20]
      break;
 80026b8:	e002      	b.n	80026c0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	617b      	str	r3, [r7, #20]
      break;
 80026be:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80026c0:	4b13      	ldr	r3, [pc, #76]	; (8002710 <HAL_RCC_GetSysClockFreq+0x108>)
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	091b      	lsrs	r3, r3, #4
 80026c6:	f003 030f 	and.w	r3, r3, #15
 80026ca:	3301      	adds	r3, #1
 80026cc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80026ce:	4b10      	ldr	r3, [pc, #64]	; (8002710 <HAL_RCC_GetSysClockFreq+0x108>)
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	0a1b      	lsrs	r3, r3, #8
 80026d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026d8:	697a      	ldr	r2, [r7, #20]
 80026da:	fb03 f202 	mul.w	r2, r3, r2
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026e4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80026e6:	4b0a      	ldr	r3, [pc, #40]	; (8002710 <HAL_RCC_GetSysClockFreq+0x108>)
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	0e5b      	lsrs	r3, r3, #25
 80026ec:	f003 0303 	and.w	r3, r3, #3
 80026f0:	3301      	adds	r3, #1
 80026f2:	005b      	lsls	r3, r3, #1
 80026f4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80026f6:	697a      	ldr	r2, [r7, #20]
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80026fe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002700:	69bb      	ldr	r3, [r7, #24]
}
 8002702:	4618      	mov	r0, r3
 8002704:	3724      	adds	r7, #36	; 0x24
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	40021000 	.word	0x40021000
 8002714:	08007d38 	.word	0x08007d38
 8002718:	00f42400 	.word	0x00f42400
 800271c:	007a1200 	.word	0x007a1200

08002720 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002720:	b480      	push	{r7}
 8002722:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002724:	4b03      	ldr	r3, [pc, #12]	; (8002734 <HAL_RCC_GetHCLKFreq+0x14>)
 8002726:	681b      	ldr	r3, [r3, #0]
}
 8002728:	4618      	mov	r0, r3
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	200000b4 	.word	0x200000b4

08002738 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800273c:	f7ff fff0 	bl	8002720 <HAL_RCC_GetHCLKFreq>
 8002740:	4602      	mov	r2, r0
 8002742:	4b06      	ldr	r3, [pc, #24]	; (800275c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	0a1b      	lsrs	r3, r3, #8
 8002748:	f003 0307 	and.w	r3, r3, #7
 800274c:	4904      	ldr	r1, [pc, #16]	; (8002760 <HAL_RCC_GetPCLK1Freq+0x28>)
 800274e:	5ccb      	ldrb	r3, [r1, r3]
 8002750:	f003 031f 	and.w	r3, r3, #31
 8002754:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002758:	4618      	mov	r0, r3
 800275a:	bd80      	pop	{r7, pc}
 800275c:	40021000 	.word	0x40021000
 8002760:	08007d30 	.word	0x08007d30

08002764 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002768:	f7ff ffda 	bl	8002720 <HAL_RCC_GetHCLKFreq>
 800276c:	4602      	mov	r2, r0
 800276e:	4b06      	ldr	r3, [pc, #24]	; (8002788 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	0adb      	lsrs	r3, r3, #11
 8002774:	f003 0307 	and.w	r3, r3, #7
 8002778:	4904      	ldr	r1, [pc, #16]	; (800278c <HAL_RCC_GetPCLK2Freq+0x28>)
 800277a:	5ccb      	ldrb	r3, [r1, r3]
 800277c:	f003 031f 	and.w	r3, r3, #31
 8002780:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002784:	4618      	mov	r0, r3
 8002786:	bd80      	pop	{r7, pc}
 8002788:	40021000 	.word	0x40021000
 800278c:	08007d30 	.word	0x08007d30

08002790 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	220f      	movs	r2, #15
 800279e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80027a0:	4b12      	ldr	r3, [pc, #72]	; (80027ec <HAL_RCC_GetClockConfig+0x5c>)
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f003 0203 	and.w	r2, r3, #3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80027ac:	4b0f      	ldr	r3, [pc, #60]	; (80027ec <HAL_RCC_GetClockConfig+0x5c>)
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80027b8:	4b0c      	ldr	r3, [pc, #48]	; (80027ec <HAL_RCC_GetClockConfig+0x5c>)
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80027c4:	4b09      	ldr	r3, [pc, #36]	; (80027ec <HAL_RCC_GetClockConfig+0x5c>)
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	08db      	lsrs	r3, r3, #3
 80027ca:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80027d2:	4b07      	ldr	r3, [pc, #28]	; (80027f0 <HAL_RCC_GetClockConfig+0x60>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 020f 	and.w	r2, r3, #15
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	601a      	str	r2, [r3, #0]
}
 80027de:	bf00      	nop
 80027e0:	370c      	adds	r7, #12
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop
 80027ec:	40021000 	.word	0x40021000
 80027f0:	40022000 	.word	0x40022000

080027f4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b086      	sub	sp, #24
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80027fc:	2300      	movs	r3, #0
 80027fe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002800:	4b27      	ldr	r3, [pc, #156]	; (80028a0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002804:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d003      	beq.n	8002814 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800280c:	f7ff f8e4 	bl	80019d8 <HAL_PWREx_GetVoltageRange>
 8002810:	6178      	str	r0, [r7, #20]
 8002812:	e014      	b.n	800283e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002814:	4b22      	ldr	r3, [pc, #136]	; (80028a0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002818:	4a21      	ldr	r2, [pc, #132]	; (80028a0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800281a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800281e:	6593      	str	r3, [r2, #88]	; 0x58
 8002820:	4b1f      	ldr	r3, [pc, #124]	; (80028a0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002824:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002828:	60fb      	str	r3, [r7, #12]
 800282a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800282c:	f7ff f8d4 	bl	80019d8 <HAL_PWREx_GetVoltageRange>
 8002830:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002832:	4b1b      	ldr	r3, [pc, #108]	; (80028a0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002836:	4a1a      	ldr	r2, [pc, #104]	; (80028a0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002838:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800283c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002844:	d10b      	bne.n	800285e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2b80      	cmp	r3, #128	; 0x80
 800284a:	d913      	bls.n	8002874 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2ba0      	cmp	r3, #160	; 0xa0
 8002850:	d902      	bls.n	8002858 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002852:	2302      	movs	r3, #2
 8002854:	613b      	str	r3, [r7, #16]
 8002856:	e00d      	b.n	8002874 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002858:	2301      	movs	r3, #1
 800285a:	613b      	str	r3, [r7, #16]
 800285c:	e00a      	b.n	8002874 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2b7f      	cmp	r3, #127	; 0x7f
 8002862:	d902      	bls.n	800286a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002864:	2302      	movs	r3, #2
 8002866:	613b      	str	r3, [r7, #16]
 8002868:	e004      	b.n	8002874 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2b70      	cmp	r3, #112	; 0x70
 800286e:	d101      	bne.n	8002874 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002870:	2301      	movs	r3, #1
 8002872:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002874:	4b0b      	ldr	r3, [pc, #44]	; (80028a4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f023 020f 	bic.w	r2, r3, #15
 800287c:	4909      	ldr	r1, [pc, #36]	; (80028a4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	4313      	orrs	r3, r2
 8002882:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002884:	4b07      	ldr	r3, [pc, #28]	; (80028a4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 030f 	and.w	r3, r3, #15
 800288c:	693a      	ldr	r2, [r7, #16]
 800288e:	429a      	cmp	r2, r3
 8002890:	d001      	beq.n	8002896 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e000      	b.n	8002898 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002896:	2300      	movs	r3, #0
}
 8002898:	4618      	mov	r0, r3
 800289a:	3718      	adds	r7, #24
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	40021000 	.word	0x40021000
 80028a4:	40022000 	.word	0x40022000

080028a8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b087      	sub	sp, #28
 80028ac:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80028ae:	4b2d      	ldr	r3, [pc, #180]	; (8002964 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	f003 0303 	and.w	r3, r3, #3
 80028b6:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2b03      	cmp	r3, #3
 80028bc:	d00b      	beq.n	80028d6 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2b03      	cmp	r3, #3
 80028c2:	d825      	bhi.n	8002910 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d008      	beq.n	80028dc <RCC_GetSysClockFreqFromPLLSource+0x34>
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d11f      	bne.n	8002910 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80028d0:	4b25      	ldr	r3, [pc, #148]	; (8002968 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80028d2:	613b      	str	r3, [r7, #16]
    break;
 80028d4:	e01f      	b.n	8002916 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80028d6:	4b25      	ldr	r3, [pc, #148]	; (800296c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80028d8:	613b      	str	r3, [r7, #16]
    break;
 80028da:	e01c      	b.n	8002916 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80028dc:	4b21      	ldr	r3, [pc, #132]	; (8002964 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0308 	and.w	r3, r3, #8
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d107      	bne.n	80028f8 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80028e8:	4b1e      	ldr	r3, [pc, #120]	; (8002964 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80028ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028ee:	0a1b      	lsrs	r3, r3, #8
 80028f0:	f003 030f 	and.w	r3, r3, #15
 80028f4:	617b      	str	r3, [r7, #20]
 80028f6:	e005      	b.n	8002904 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80028f8:	4b1a      	ldr	r3, [pc, #104]	; (8002964 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	091b      	lsrs	r3, r3, #4
 80028fe:	f003 030f 	and.w	r3, r3, #15
 8002902:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8002904:	4a1a      	ldr	r2, [pc, #104]	; (8002970 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800290c:	613b      	str	r3, [r7, #16]
    break;
 800290e:	e002      	b.n	8002916 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8002910:	2300      	movs	r3, #0
 8002912:	613b      	str	r3, [r7, #16]
    break;
 8002914:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002916:	4b13      	ldr	r3, [pc, #76]	; (8002964 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	091b      	lsrs	r3, r3, #4
 800291c:	f003 030f 	and.w	r3, r3, #15
 8002920:	3301      	adds	r3, #1
 8002922:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002924:	4b0f      	ldr	r3, [pc, #60]	; (8002964 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	0a1b      	lsrs	r3, r3, #8
 800292a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800292e:	693a      	ldr	r2, [r7, #16]
 8002930:	fb03 f202 	mul.w	r2, r3, r2
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	fbb2 f3f3 	udiv	r3, r2, r3
 800293a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800293c:	4b09      	ldr	r3, [pc, #36]	; (8002964 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	0e5b      	lsrs	r3, r3, #25
 8002942:	f003 0303 	and.w	r3, r3, #3
 8002946:	3301      	adds	r3, #1
 8002948:	005b      	lsls	r3, r3, #1
 800294a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800294c:	693a      	ldr	r2, [r7, #16]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	fbb2 f3f3 	udiv	r3, r2, r3
 8002954:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002956:	683b      	ldr	r3, [r7, #0]
}
 8002958:	4618      	mov	r0, r3
 800295a:	371c      	adds	r7, #28
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr
 8002964:	40021000 	.word	0x40021000
 8002968:	00f42400 	.word	0x00f42400
 800296c:	007a1200 	.word	0x007a1200
 8002970:	08007d38 	.word	0x08007d38

08002974 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b086      	sub	sp, #24
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800297c:	2300      	movs	r3, #0
 800297e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002980:	2300      	movs	r3, #0
 8002982:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800298c:	2b00      	cmp	r3, #0
 800298e:	d040      	beq.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002994:	2b80      	cmp	r3, #128	; 0x80
 8002996:	d02a      	beq.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002998:	2b80      	cmp	r3, #128	; 0x80
 800299a:	d825      	bhi.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800299c:	2b60      	cmp	r3, #96	; 0x60
 800299e:	d026      	beq.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80029a0:	2b60      	cmp	r3, #96	; 0x60
 80029a2:	d821      	bhi.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80029a4:	2b40      	cmp	r3, #64	; 0x40
 80029a6:	d006      	beq.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x42>
 80029a8:	2b40      	cmp	r3, #64	; 0x40
 80029aa:	d81d      	bhi.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d009      	beq.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80029b0:	2b20      	cmp	r3, #32
 80029b2:	d010      	beq.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80029b4:	e018      	b.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80029b6:	4b89      	ldr	r3, [pc, #548]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	4a88      	ldr	r2, [pc, #544]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80029bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029c0:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029c2:	e015      	b.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	3304      	adds	r3, #4
 80029c8:	2100      	movs	r1, #0
 80029ca:	4618      	mov	r0, r3
 80029cc:	f000 fb02 	bl	8002fd4 <RCCEx_PLLSAI1_Config>
 80029d0:	4603      	mov	r3, r0
 80029d2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029d4:	e00c      	b.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	3320      	adds	r3, #32
 80029da:	2100      	movs	r1, #0
 80029dc:	4618      	mov	r0, r3
 80029de:	f000 fbed 	bl	80031bc <RCCEx_PLLSAI2_Config>
 80029e2:	4603      	mov	r3, r0
 80029e4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80029e6:	e003      	b.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	74fb      	strb	r3, [r7, #19]
      break;
 80029ec:	e000      	b.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80029ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029f0:	7cfb      	ldrb	r3, [r7, #19]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d10b      	bne.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029f6:	4b79      	ldr	r3, [pc, #484]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80029f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80029fc:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a04:	4975      	ldr	r1, [pc, #468]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002a0c:	e001      	b.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a0e:	7cfb      	ldrb	r3, [r7, #19]
 8002a10:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d047      	beq.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a26:	d030      	beq.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002a28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a2c:	d82a      	bhi.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002a2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a32:	d02a      	beq.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002a34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a38:	d824      	bhi.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002a3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a3e:	d008      	beq.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002a40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a44:	d81e      	bhi.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00a      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002a4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a4e:	d010      	beq.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002a50:	e018      	b.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002a52:	4b62      	ldr	r3, [pc, #392]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	4a61      	ldr	r2, [pc, #388]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a5c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a5e:	e015      	b.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	3304      	adds	r3, #4
 8002a64:	2100      	movs	r1, #0
 8002a66:	4618      	mov	r0, r3
 8002a68:	f000 fab4 	bl	8002fd4 <RCCEx_PLLSAI1_Config>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a70:	e00c      	b.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	3320      	adds	r3, #32
 8002a76:	2100      	movs	r1, #0
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f000 fb9f 	bl	80031bc <RCCEx_PLLSAI2_Config>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002a82:	e003      	b.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	74fb      	strb	r3, [r7, #19]
      break;
 8002a88:	e000      	b.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8002a8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a8c:	7cfb      	ldrb	r3, [r7, #19]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d10b      	bne.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002a92:	4b52      	ldr	r3, [pc, #328]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a94:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa0:	494e      	ldr	r1, [pc, #312]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002aa8:	e001      	b.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002aaa:	7cfb      	ldrb	r3, [r7, #19]
 8002aac:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	f000 809f 	beq.w	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002abc:	2300      	movs	r3, #0
 8002abe:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002ac0:	4b46      	ldr	r3, [pc, #280]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d101      	bne.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002acc:	2301      	movs	r3, #1
 8002ace:	e000      	b.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d00d      	beq.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ad6:	4b41      	ldr	r3, [pc, #260]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ada:	4a40      	ldr	r2, [pc, #256]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ae0:	6593      	str	r3, [r2, #88]	; 0x58
 8002ae2:	4b3e      	ldr	r3, [pc, #248]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aea:	60bb      	str	r3, [r7, #8]
 8002aec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002aee:	2301      	movs	r3, #1
 8002af0:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002af2:	4b3b      	ldr	r3, [pc, #236]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a3a      	ldr	r2, [pc, #232]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002af8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002afc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002afe:	f7fd fd85 	bl	800060c <HAL_GetTick>
 8002b02:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b04:	e009      	b.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b06:	f7fd fd81 	bl	800060c <HAL_GetTick>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d902      	bls.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	74fb      	strb	r3, [r7, #19]
        break;
 8002b18:	e005      	b.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b1a:	4b31      	ldr	r3, [pc, #196]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d0ef      	beq.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8002b26:	7cfb      	ldrb	r3, [r7, #19]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d15b      	bne.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002b2c:	4b2b      	ldr	r3, [pc, #172]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b36:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d01f      	beq.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b44:	697a      	ldr	r2, [r7, #20]
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d019      	beq.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b4a:	4b24      	ldr	r3, [pc, #144]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b54:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b56:	4b21      	ldr	r3, [pc, #132]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b5c:	4a1f      	ldr	r2, [pc, #124]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b66:	4b1d      	ldr	r3, [pc, #116]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b6c:	4a1b      	ldr	r2, [pc, #108]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b76:	4a19      	ldr	r2, [pc, #100]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	f003 0301 	and.w	r3, r3, #1
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d016      	beq.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b88:	f7fd fd40 	bl	800060c <HAL_GetTick>
 8002b8c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b8e:	e00b      	b.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b90:	f7fd fd3c 	bl	800060c <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d902      	bls.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	74fb      	strb	r3, [r7, #19]
            break;
 8002ba6:	e006      	b.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ba8:	4b0c      	ldr	r3, [pc, #48]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bae:	f003 0302 	and.w	r3, r3, #2
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d0ec      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8002bb6:	7cfb      	ldrb	r3, [r7, #19]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d10c      	bne.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bbc:	4b07      	ldr	r3, [pc, #28]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bc2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bcc:	4903      	ldr	r1, [pc, #12]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002bd4:	e008      	b.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002bd6:	7cfb      	ldrb	r3, [r7, #19]
 8002bd8:	74bb      	strb	r3, [r7, #18]
 8002bda:	e005      	b.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8002bdc:	40021000 	.word	0x40021000
 8002be0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002be4:	7cfb      	ldrb	r3, [r7, #19]
 8002be6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002be8:	7c7b      	ldrb	r3, [r7, #17]
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d105      	bne.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bee:	4ba0      	ldr	r3, [pc, #640]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf2:	4a9f      	ldr	r2, [pc, #636]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002bf4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bf8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d00a      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c06:	4b9a      	ldr	r3, [pc, #616]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c0c:	f023 0203 	bic.w	r2, r3, #3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c14:	4996      	ldr	r1, [pc, #600]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0302 	and.w	r3, r3, #2
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d00a      	beq.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c28:	4b91      	ldr	r3, [pc, #580]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c2e:	f023 020c 	bic.w	r2, r3, #12
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c36:	498e      	ldr	r1, [pc, #568]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0304 	and.w	r3, r3, #4
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d00a      	beq.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c4a:	4b89      	ldr	r3, [pc, #548]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c50:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c58:	4985      	ldr	r1, [pc, #532]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0308 	and.w	r3, r3, #8
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d00a      	beq.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c6c:	4b80      	ldr	r3, [pc, #512]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c72:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c7a:	497d      	ldr	r1, [pc, #500]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0310 	and.w	r3, r3, #16
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d00a      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c8e:	4b78      	ldr	r3, [pc, #480]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c9c:	4974      	ldr	r1, [pc, #464]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0320 	and.w	r3, r3, #32
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d00a      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002cb0:	4b6f      	ldr	r3, [pc, #444]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cb6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cbe:	496c      	ldr	r1, [pc, #432]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d00a      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002cd2:	4b67      	ldr	r3, [pc, #412]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cd8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ce0:	4963      	ldr	r1, [pc, #396]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d00a      	beq.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002cf4:	4b5e      	ldr	r3, [pc, #376]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cfa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d02:	495b      	ldr	r1, [pc, #364]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d00a      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d16:	4b56      	ldr	r3, [pc, #344]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d1c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d24:	4952      	ldr	r1, [pc, #328]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d00a      	beq.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d38:	4b4d      	ldr	r3, [pc, #308]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d3e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d46:	494a      	ldr	r1, [pc, #296]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00a      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d5a:	4b45      	ldr	r3, [pc, #276]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d60:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d68:	4941      	ldr	r1, [pc, #260]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00a      	beq.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002d7c:	4b3c      	ldr	r3, [pc, #240]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002d82:	f023 0203 	bic.w	r2, r3, #3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d8a:	4939      	ldr	r1, [pc, #228]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d028      	beq.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d9e:	4b34      	ldr	r3, [pc, #208]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002da4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dac:	4930      	ldr	r1, [pc, #192]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002db8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002dbc:	d106      	bne.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002dbe:	4b2c      	ldr	r3, [pc, #176]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	4a2b      	ldr	r2, [pc, #172]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002dc4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002dc8:	60d3      	str	r3, [r2, #12]
 8002dca:	e011      	b.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dd0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002dd4:	d10c      	bne.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	3304      	adds	r3, #4
 8002dda:	2101      	movs	r1, #1
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f000 f8f9 	bl	8002fd4 <RCCEx_PLLSAI1_Config>
 8002de2:	4603      	mov	r3, r0
 8002de4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002de6:	7cfb      	ldrb	r3, [r7, #19]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d001      	beq.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8002dec:	7cfb      	ldrb	r3, [r7, #19]
 8002dee:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d04d      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e04:	d108      	bne.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8002e06:	4b1a      	ldr	r3, [pc, #104]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e08:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e0c:	4a18      	ldr	r2, [pc, #96]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e12:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002e16:	e012      	b.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8002e18:	4b15      	ldr	r3, [pc, #84]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e1e:	4a14      	ldr	r2, [pc, #80]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e24:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002e28:	4b11      	ldr	r3, [pc, #68]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e2e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e36:	490e      	ldr	r1, [pc, #56]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e46:	d106      	bne.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e48:	4b09      	ldr	r3, [pc, #36]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	4a08      	ldr	r2, [pc, #32]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e52:	60d3      	str	r3, [r2, #12]
 8002e54:	e020      	b.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e5e:	d109      	bne.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002e60:	4b03      	ldr	r3, [pc, #12]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	4a02      	ldr	r2, [pc, #8]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e6a:	60d3      	str	r3, [r2, #12]
 8002e6c:	e014      	b.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8002e6e:	bf00      	nop
 8002e70:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e7c:	d10c      	bne.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	3304      	adds	r3, #4
 8002e82:	2101      	movs	r1, #1
 8002e84:	4618      	mov	r0, r3
 8002e86:	f000 f8a5 	bl	8002fd4 <RCCEx_PLLSAI1_Config>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e8e:	7cfb      	ldrb	r3, [r7, #19]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d001      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8002e94:	7cfb      	ldrb	r3, [r7, #19]
 8002e96:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d028      	beq.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ea4:	4b4a      	ldr	r3, [pc, #296]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eaa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002eb2:	4947      	ldr	r1, [pc, #284]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ebe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ec2:	d106      	bne.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ec4:	4b42      	ldr	r3, [pc, #264]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	4a41      	ldr	r2, [pc, #260]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002eca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ece:	60d3      	str	r3, [r2, #12]
 8002ed0:	e011      	b.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ed6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002eda:	d10c      	bne.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	3304      	adds	r3, #4
 8002ee0:	2101      	movs	r1, #1
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f000 f876 	bl	8002fd4 <RCCEx_PLLSAI1_Config>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002eec:	7cfb      	ldrb	r3, [r7, #19]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d001      	beq.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8002ef2:	7cfb      	ldrb	r3, [r7, #19]
 8002ef4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d01e      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f02:	4b33      	ldr	r3, [pc, #204]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f08:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f12:	492f      	ldr	r1, [pc, #188]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f20:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f24:	d10c      	bne.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	3304      	adds	r3, #4
 8002f2a:	2102      	movs	r1, #2
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f000 f851 	bl	8002fd4 <RCCEx_PLLSAI1_Config>
 8002f32:	4603      	mov	r3, r0
 8002f34:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f36:	7cfb      	ldrb	r3, [r7, #19]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d001      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8002f3c:	7cfb      	ldrb	r3, [r7, #19]
 8002f3e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d00b      	beq.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002f4c:	4b20      	ldr	r3, [pc, #128]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f52:	f023 0204 	bic.w	r2, r3, #4
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f5c:	491c      	ldr	r1, [pc, #112]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d00b      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002f70:	4b17      	ldr	r3, [pc, #92]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f72:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f76:	f023 0218 	bic.w	r2, r3, #24
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f80:	4913      	ldr	r1, [pc, #76]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d017      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002f94:	4b0e      	ldr	r3, [pc, #56]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f96:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f9a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fa4:	490a      	ldr	r1, [pc, #40]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fb2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002fb6:	d105      	bne.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fb8:	4b05      	ldr	r3, [pc, #20]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	4a04      	ldr	r2, [pc, #16]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002fc2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002fc4:	7cbb      	ldrb	r3, [r7, #18]
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3718      	adds	r7, #24
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	40021000 	.word	0x40021000

08002fd4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002fe2:	4b72      	ldr	r3, [pc, #456]	; (80031ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	f003 0303 	and.w	r3, r3, #3
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00e      	beq.n	800300c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002fee:	4b6f      	ldr	r3, [pc, #444]	; (80031ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	f003 0203 	and.w	r2, r3, #3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d103      	bne.n	8003006 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
       ||
 8003002:	2b00      	cmp	r3, #0
 8003004:	d142      	bne.n	800308c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	73fb      	strb	r3, [r7, #15]
 800300a:	e03f      	b.n	800308c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2b03      	cmp	r3, #3
 8003012:	d018      	beq.n	8003046 <RCCEx_PLLSAI1_Config+0x72>
 8003014:	2b03      	cmp	r3, #3
 8003016:	d825      	bhi.n	8003064 <RCCEx_PLLSAI1_Config+0x90>
 8003018:	2b01      	cmp	r3, #1
 800301a:	d002      	beq.n	8003022 <RCCEx_PLLSAI1_Config+0x4e>
 800301c:	2b02      	cmp	r3, #2
 800301e:	d009      	beq.n	8003034 <RCCEx_PLLSAI1_Config+0x60>
 8003020:	e020      	b.n	8003064 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003022:	4b62      	ldr	r3, [pc, #392]	; (80031ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d11d      	bne.n	800306a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003032:	e01a      	b.n	800306a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003034:	4b5d      	ldr	r3, [pc, #372]	; (80031ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800303c:	2b00      	cmp	r3, #0
 800303e:	d116      	bne.n	800306e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003044:	e013      	b.n	800306e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003046:	4b59      	ldr	r3, [pc, #356]	; (80031ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d10f      	bne.n	8003072 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003052:	4b56      	ldr	r3, [pc, #344]	; (80031ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800305a:	2b00      	cmp	r3, #0
 800305c:	d109      	bne.n	8003072 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003062:	e006      	b.n	8003072 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	73fb      	strb	r3, [r7, #15]
      break;
 8003068:	e004      	b.n	8003074 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800306a:	bf00      	nop
 800306c:	e002      	b.n	8003074 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800306e:	bf00      	nop
 8003070:	e000      	b.n	8003074 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003072:	bf00      	nop
    }

    if(status == HAL_OK)
 8003074:	7bfb      	ldrb	r3, [r7, #15]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d108      	bne.n	800308c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800307a:	4b4c      	ldr	r3, [pc, #304]	; (80031ac <RCCEx_PLLSAI1_Config+0x1d8>)
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	f023 0203 	bic.w	r2, r3, #3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4949      	ldr	r1, [pc, #292]	; (80031ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8003088:	4313      	orrs	r3, r2
 800308a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800308c:	7bfb      	ldrb	r3, [r7, #15]
 800308e:	2b00      	cmp	r3, #0
 8003090:	f040 8086 	bne.w	80031a0 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003094:	4b45      	ldr	r3, [pc, #276]	; (80031ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a44      	ldr	r2, [pc, #272]	; (80031ac <RCCEx_PLLSAI1_Config+0x1d8>)
 800309a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800309e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030a0:	f7fd fab4 	bl	800060c <HAL_GetTick>
 80030a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80030a6:	e009      	b.n	80030bc <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80030a8:	f7fd fab0 	bl	800060c <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d902      	bls.n	80030bc <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	73fb      	strb	r3, [r7, #15]
        break;
 80030ba:	e005      	b.n	80030c8 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80030bc:	4b3b      	ldr	r3, [pc, #236]	; (80031ac <RCCEx_PLLSAI1_Config+0x1d8>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d1ef      	bne.n	80030a8 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80030c8:	7bfb      	ldrb	r3, [r7, #15]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d168      	bne.n	80031a0 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d113      	bne.n	80030fc <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030d4:	4b35      	ldr	r3, [pc, #212]	; (80031ac <RCCEx_PLLSAI1_Config+0x1d8>)
 80030d6:	691a      	ldr	r2, [r3, #16]
 80030d8:	4b35      	ldr	r3, [pc, #212]	; (80031b0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80030da:	4013      	ands	r3, r2
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	6892      	ldr	r2, [r2, #8]
 80030e0:	0211      	lsls	r1, r2, #8
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	68d2      	ldr	r2, [r2, #12]
 80030e6:	06d2      	lsls	r2, r2, #27
 80030e8:	4311      	orrs	r1, r2
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	6852      	ldr	r2, [r2, #4]
 80030ee:	3a01      	subs	r2, #1
 80030f0:	0112      	lsls	r2, r2, #4
 80030f2:	430a      	orrs	r2, r1
 80030f4:	492d      	ldr	r1, [pc, #180]	; (80031ac <RCCEx_PLLSAI1_Config+0x1d8>)
 80030f6:	4313      	orrs	r3, r2
 80030f8:	610b      	str	r3, [r1, #16]
 80030fa:	e02d      	b.n	8003158 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d115      	bne.n	800312e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003102:	4b2a      	ldr	r3, [pc, #168]	; (80031ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8003104:	691a      	ldr	r2, [r3, #16]
 8003106:	4b2b      	ldr	r3, [pc, #172]	; (80031b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003108:	4013      	ands	r3, r2
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	6892      	ldr	r2, [r2, #8]
 800310e:	0211      	lsls	r1, r2, #8
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	6912      	ldr	r2, [r2, #16]
 8003114:	0852      	lsrs	r2, r2, #1
 8003116:	3a01      	subs	r2, #1
 8003118:	0552      	lsls	r2, r2, #21
 800311a:	4311      	orrs	r1, r2
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	6852      	ldr	r2, [r2, #4]
 8003120:	3a01      	subs	r2, #1
 8003122:	0112      	lsls	r2, r2, #4
 8003124:	430a      	orrs	r2, r1
 8003126:	4921      	ldr	r1, [pc, #132]	; (80031ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8003128:	4313      	orrs	r3, r2
 800312a:	610b      	str	r3, [r1, #16]
 800312c:	e014      	b.n	8003158 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800312e:	4b1f      	ldr	r3, [pc, #124]	; (80031ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8003130:	691a      	ldr	r2, [r3, #16]
 8003132:	4b21      	ldr	r3, [pc, #132]	; (80031b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003134:	4013      	ands	r3, r2
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	6892      	ldr	r2, [r2, #8]
 800313a:	0211      	lsls	r1, r2, #8
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	6952      	ldr	r2, [r2, #20]
 8003140:	0852      	lsrs	r2, r2, #1
 8003142:	3a01      	subs	r2, #1
 8003144:	0652      	lsls	r2, r2, #25
 8003146:	4311      	orrs	r1, r2
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	6852      	ldr	r2, [r2, #4]
 800314c:	3a01      	subs	r2, #1
 800314e:	0112      	lsls	r2, r2, #4
 8003150:	430a      	orrs	r2, r1
 8003152:	4916      	ldr	r1, [pc, #88]	; (80031ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8003154:	4313      	orrs	r3, r2
 8003156:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003158:	4b14      	ldr	r3, [pc, #80]	; (80031ac <RCCEx_PLLSAI1_Config+0x1d8>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a13      	ldr	r2, [pc, #76]	; (80031ac <RCCEx_PLLSAI1_Config+0x1d8>)
 800315e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003162:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003164:	f7fd fa52 	bl	800060c <HAL_GetTick>
 8003168:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800316a:	e009      	b.n	8003180 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800316c:	f7fd fa4e 	bl	800060c <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b02      	cmp	r3, #2
 8003178:	d902      	bls.n	8003180 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	73fb      	strb	r3, [r7, #15]
          break;
 800317e:	e005      	b.n	800318c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003180:	4b0a      	ldr	r3, [pc, #40]	; (80031ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d0ef      	beq.n	800316c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800318c:	7bfb      	ldrb	r3, [r7, #15]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d106      	bne.n	80031a0 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003192:	4b06      	ldr	r3, [pc, #24]	; (80031ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8003194:	691a      	ldr	r2, [r3, #16]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	699b      	ldr	r3, [r3, #24]
 800319a:	4904      	ldr	r1, [pc, #16]	; (80031ac <RCCEx_PLLSAI1_Config+0x1d8>)
 800319c:	4313      	orrs	r3, r2
 800319e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80031a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3710      	adds	r7, #16
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	40021000 	.word	0x40021000
 80031b0:	07ff800f 	.word	0x07ff800f
 80031b4:	ff9f800f 	.word	0xff9f800f
 80031b8:	f9ff800f 	.word	0xf9ff800f

080031bc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80031c6:	2300      	movs	r3, #0
 80031c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80031ca:	4b72      	ldr	r3, [pc, #456]	; (8003394 <RCCEx_PLLSAI2_Config+0x1d8>)
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	f003 0303 	and.w	r3, r3, #3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d00e      	beq.n	80031f4 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80031d6:	4b6f      	ldr	r3, [pc, #444]	; (8003394 <RCCEx_PLLSAI2_Config+0x1d8>)
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	f003 0203 	and.w	r2, r3, #3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d103      	bne.n	80031ee <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
       ||
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d142      	bne.n	8003274 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	73fb      	strb	r3, [r7, #15]
 80031f2:	e03f      	b.n	8003274 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2b03      	cmp	r3, #3
 80031fa:	d018      	beq.n	800322e <RCCEx_PLLSAI2_Config+0x72>
 80031fc:	2b03      	cmp	r3, #3
 80031fe:	d825      	bhi.n	800324c <RCCEx_PLLSAI2_Config+0x90>
 8003200:	2b01      	cmp	r3, #1
 8003202:	d002      	beq.n	800320a <RCCEx_PLLSAI2_Config+0x4e>
 8003204:	2b02      	cmp	r3, #2
 8003206:	d009      	beq.n	800321c <RCCEx_PLLSAI2_Config+0x60>
 8003208:	e020      	b.n	800324c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800320a:	4b62      	ldr	r3, [pc, #392]	; (8003394 <RCCEx_PLLSAI2_Config+0x1d8>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0302 	and.w	r3, r3, #2
 8003212:	2b00      	cmp	r3, #0
 8003214:	d11d      	bne.n	8003252 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800321a:	e01a      	b.n	8003252 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800321c:	4b5d      	ldr	r3, [pc, #372]	; (8003394 <RCCEx_PLLSAI2_Config+0x1d8>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003224:	2b00      	cmp	r3, #0
 8003226:	d116      	bne.n	8003256 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800322c:	e013      	b.n	8003256 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800322e:	4b59      	ldr	r3, [pc, #356]	; (8003394 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d10f      	bne.n	800325a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800323a:	4b56      	ldr	r3, [pc, #344]	; (8003394 <RCCEx_PLLSAI2_Config+0x1d8>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d109      	bne.n	800325a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800324a:	e006      	b.n	800325a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	73fb      	strb	r3, [r7, #15]
      break;
 8003250:	e004      	b.n	800325c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003252:	bf00      	nop
 8003254:	e002      	b.n	800325c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003256:	bf00      	nop
 8003258:	e000      	b.n	800325c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800325a:	bf00      	nop
    }

    if(status == HAL_OK)
 800325c:	7bfb      	ldrb	r3, [r7, #15]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d108      	bne.n	8003274 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003262:	4b4c      	ldr	r3, [pc, #304]	; (8003394 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	f023 0203 	bic.w	r2, r3, #3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4949      	ldr	r1, [pc, #292]	; (8003394 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003270:	4313      	orrs	r3, r2
 8003272:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003274:	7bfb      	ldrb	r3, [r7, #15]
 8003276:	2b00      	cmp	r3, #0
 8003278:	f040 8086 	bne.w	8003388 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800327c:	4b45      	ldr	r3, [pc, #276]	; (8003394 <RCCEx_PLLSAI2_Config+0x1d8>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a44      	ldr	r2, [pc, #272]	; (8003394 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003282:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003286:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003288:	f7fd f9c0 	bl	800060c <HAL_GetTick>
 800328c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800328e:	e009      	b.n	80032a4 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003290:	f7fd f9bc 	bl	800060c <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	2b02      	cmp	r3, #2
 800329c:	d902      	bls.n	80032a4 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	73fb      	strb	r3, [r7, #15]
        break;
 80032a2:	e005      	b.n	80032b0 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80032a4:	4b3b      	ldr	r3, [pc, #236]	; (8003394 <RCCEx_PLLSAI2_Config+0x1d8>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d1ef      	bne.n	8003290 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80032b0:	7bfb      	ldrb	r3, [r7, #15]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d168      	bne.n	8003388 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d113      	bne.n	80032e4 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80032bc:	4b35      	ldr	r3, [pc, #212]	; (8003394 <RCCEx_PLLSAI2_Config+0x1d8>)
 80032be:	695a      	ldr	r2, [r3, #20]
 80032c0:	4b35      	ldr	r3, [pc, #212]	; (8003398 <RCCEx_PLLSAI2_Config+0x1dc>)
 80032c2:	4013      	ands	r3, r2
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	6892      	ldr	r2, [r2, #8]
 80032c8:	0211      	lsls	r1, r2, #8
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	68d2      	ldr	r2, [r2, #12]
 80032ce:	06d2      	lsls	r2, r2, #27
 80032d0:	4311      	orrs	r1, r2
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	6852      	ldr	r2, [r2, #4]
 80032d6:	3a01      	subs	r2, #1
 80032d8:	0112      	lsls	r2, r2, #4
 80032da:	430a      	orrs	r2, r1
 80032dc:	492d      	ldr	r1, [pc, #180]	; (8003394 <RCCEx_PLLSAI2_Config+0x1d8>)
 80032de:	4313      	orrs	r3, r2
 80032e0:	614b      	str	r3, [r1, #20]
 80032e2:	e02d      	b.n	8003340 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d115      	bne.n	8003316 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80032ea:	4b2a      	ldr	r3, [pc, #168]	; (8003394 <RCCEx_PLLSAI2_Config+0x1d8>)
 80032ec:	695a      	ldr	r2, [r3, #20]
 80032ee:	4b2b      	ldr	r3, [pc, #172]	; (800339c <RCCEx_PLLSAI2_Config+0x1e0>)
 80032f0:	4013      	ands	r3, r2
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	6892      	ldr	r2, [r2, #8]
 80032f6:	0211      	lsls	r1, r2, #8
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	6912      	ldr	r2, [r2, #16]
 80032fc:	0852      	lsrs	r2, r2, #1
 80032fe:	3a01      	subs	r2, #1
 8003300:	0552      	lsls	r2, r2, #21
 8003302:	4311      	orrs	r1, r2
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	6852      	ldr	r2, [r2, #4]
 8003308:	3a01      	subs	r2, #1
 800330a:	0112      	lsls	r2, r2, #4
 800330c:	430a      	orrs	r2, r1
 800330e:	4921      	ldr	r1, [pc, #132]	; (8003394 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003310:	4313      	orrs	r3, r2
 8003312:	614b      	str	r3, [r1, #20]
 8003314:	e014      	b.n	8003340 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003316:	4b1f      	ldr	r3, [pc, #124]	; (8003394 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003318:	695a      	ldr	r2, [r3, #20]
 800331a:	4b21      	ldr	r3, [pc, #132]	; (80033a0 <RCCEx_PLLSAI2_Config+0x1e4>)
 800331c:	4013      	ands	r3, r2
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	6892      	ldr	r2, [r2, #8]
 8003322:	0211      	lsls	r1, r2, #8
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	6952      	ldr	r2, [r2, #20]
 8003328:	0852      	lsrs	r2, r2, #1
 800332a:	3a01      	subs	r2, #1
 800332c:	0652      	lsls	r2, r2, #25
 800332e:	4311      	orrs	r1, r2
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	6852      	ldr	r2, [r2, #4]
 8003334:	3a01      	subs	r2, #1
 8003336:	0112      	lsls	r2, r2, #4
 8003338:	430a      	orrs	r2, r1
 800333a:	4916      	ldr	r1, [pc, #88]	; (8003394 <RCCEx_PLLSAI2_Config+0x1d8>)
 800333c:	4313      	orrs	r3, r2
 800333e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003340:	4b14      	ldr	r3, [pc, #80]	; (8003394 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a13      	ldr	r2, [pc, #76]	; (8003394 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003346:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800334a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800334c:	f7fd f95e 	bl	800060c <HAL_GetTick>
 8003350:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003352:	e009      	b.n	8003368 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003354:	f7fd f95a 	bl	800060c <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	2b02      	cmp	r3, #2
 8003360:	d902      	bls.n	8003368 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	73fb      	strb	r3, [r7, #15]
          break;
 8003366:	e005      	b.n	8003374 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003368:	4b0a      	ldr	r3, [pc, #40]	; (8003394 <RCCEx_PLLSAI2_Config+0x1d8>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d0ef      	beq.n	8003354 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003374:	7bfb      	ldrb	r3, [r7, #15]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d106      	bne.n	8003388 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800337a:	4b06      	ldr	r3, [pc, #24]	; (8003394 <RCCEx_PLLSAI2_Config+0x1d8>)
 800337c:	695a      	ldr	r2, [r3, #20]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	4904      	ldr	r1, [pc, #16]	; (8003394 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003384:	4313      	orrs	r3, r2
 8003386:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003388:	7bfb      	ldrb	r3, [r7, #15]
}
 800338a:	4618      	mov	r0, r3
 800338c:	3710      	adds	r7, #16
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	40021000 	.word	0x40021000
 8003398:	07ff800f 	.word	0x07ff800f
 800339c:	ff9f800f 	.word	0xff9f800f
 80033a0:	f9ff800f 	.word	0xf9ff800f

080033a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d101      	bne.n	80033b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e049      	b.n	800344a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d106      	bne.n	80033d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 f841 	bl	8003452 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2202      	movs	r2, #2
 80033d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	3304      	adds	r3, #4
 80033e0:	4619      	mov	r1, r3
 80033e2:	4610      	mov	r0, r2
 80033e4:	f000 f9f8 	bl	80037d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2201      	movs	r2, #1
 800341c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003448:	2300      	movs	r3, #0
}
 800344a:	4618      	mov	r0, r3
 800344c:	3708      	adds	r7, #8
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}

08003452 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003452:	b480      	push	{r7}
 8003454:	b083      	sub	sp, #12
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800345a:	bf00      	nop
 800345c:	370c      	adds	r7, #12
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr
	...

08003468 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003468:	b480      	push	{r7}
 800346a:	b085      	sub	sp, #20
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003476:	b2db      	uxtb	r3, r3
 8003478:	2b01      	cmp	r3, #1
 800347a:	d001      	beq.n	8003480 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e04f      	b.n	8003520 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2202      	movs	r2, #2
 8003484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	68da      	ldr	r2, [r3, #12]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f042 0201 	orr.w	r2, r2, #1
 8003496:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a23      	ldr	r2, [pc, #140]	; (800352c <HAL_TIM_Base_Start_IT+0xc4>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d01d      	beq.n	80034de <HAL_TIM_Base_Start_IT+0x76>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034aa:	d018      	beq.n	80034de <HAL_TIM_Base_Start_IT+0x76>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a1f      	ldr	r2, [pc, #124]	; (8003530 <HAL_TIM_Base_Start_IT+0xc8>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d013      	beq.n	80034de <HAL_TIM_Base_Start_IT+0x76>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a1e      	ldr	r2, [pc, #120]	; (8003534 <HAL_TIM_Base_Start_IT+0xcc>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d00e      	beq.n	80034de <HAL_TIM_Base_Start_IT+0x76>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a1c      	ldr	r2, [pc, #112]	; (8003538 <HAL_TIM_Base_Start_IT+0xd0>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d009      	beq.n	80034de <HAL_TIM_Base_Start_IT+0x76>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a1b      	ldr	r2, [pc, #108]	; (800353c <HAL_TIM_Base_Start_IT+0xd4>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d004      	beq.n	80034de <HAL_TIM_Base_Start_IT+0x76>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a19      	ldr	r2, [pc, #100]	; (8003540 <HAL_TIM_Base_Start_IT+0xd8>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d115      	bne.n	800350a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	689a      	ldr	r2, [r3, #8]
 80034e4:	4b17      	ldr	r3, [pc, #92]	; (8003544 <HAL_TIM_Base_Start_IT+0xdc>)
 80034e6:	4013      	ands	r3, r2
 80034e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2b06      	cmp	r3, #6
 80034ee:	d015      	beq.n	800351c <HAL_TIM_Base_Start_IT+0xb4>
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034f6:	d011      	beq.n	800351c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f042 0201 	orr.w	r2, r2, #1
 8003506:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003508:	e008      	b.n	800351c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f042 0201 	orr.w	r2, r2, #1
 8003518:	601a      	str	r2, [r3, #0]
 800351a:	e000      	b.n	800351e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800351c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800351e:	2300      	movs	r3, #0
}
 8003520:	4618      	mov	r0, r3
 8003522:	3714      	adds	r7, #20
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr
 800352c:	40012c00 	.word	0x40012c00
 8003530:	40000400 	.word	0x40000400
 8003534:	40000800 	.word	0x40000800
 8003538:	40000c00 	.word	0x40000c00
 800353c:	40013400 	.word	0x40013400
 8003540:	40014000 	.word	0x40014000
 8003544:	00010007 	.word	0x00010007

08003548 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	691b      	ldr	r3, [r3, #16]
 8003556:	f003 0302 	and.w	r3, r3, #2
 800355a:	2b02      	cmp	r3, #2
 800355c:	d122      	bne.n	80035a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	f003 0302 	and.w	r3, r3, #2
 8003568:	2b02      	cmp	r3, #2
 800356a:	d11b      	bne.n	80035a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f06f 0202 	mvn.w	r2, #2
 8003574:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2201      	movs	r2, #1
 800357a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	699b      	ldr	r3, [r3, #24]
 8003582:	f003 0303 	and.w	r3, r3, #3
 8003586:	2b00      	cmp	r3, #0
 8003588:	d003      	beq.n	8003592 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f000 f905 	bl	800379a <HAL_TIM_IC_CaptureCallback>
 8003590:	e005      	b.n	800359e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f000 f8f7 	bl	8003786 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f000 f908 	bl	80037ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	f003 0304 	and.w	r3, r3, #4
 80035ae:	2b04      	cmp	r3, #4
 80035b0:	d122      	bne.n	80035f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	f003 0304 	and.w	r3, r3, #4
 80035bc:	2b04      	cmp	r3, #4
 80035be:	d11b      	bne.n	80035f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f06f 0204 	mvn.w	r2, #4
 80035c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2202      	movs	r2, #2
 80035ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	699b      	ldr	r3, [r3, #24]
 80035d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d003      	beq.n	80035e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 f8db 	bl	800379a <HAL_TIM_IC_CaptureCallback>
 80035e4:	e005      	b.n	80035f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f000 f8cd 	bl	8003786 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f000 f8de 	bl	80037ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	691b      	ldr	r3, [r3, #16]
 80035fe:	f003 0308 	and.w	r3, r3, #8
 8003602:	2b08      	cmp	r3, #8
 8003604:	d122      	bne.n	800364c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	f003 0308 	and.w	r3, r3, #8
 8003610:	2b08      	cmp	r3, #8
 8003612:	d11b      	bne.n	800364c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f06f 0208 	mvn.w	r2, #8
 800361c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2204      	movs	r2, #4
 8003622:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	69db      	ldr	r3, [r3, #28]
 800362a:	f003 0303 	and.w	r3, r3, #3
 800362e:	2b00      	cmp	r3, #0
 8003630:	d003      	beq.n	800363a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 f8b1 	bl	800379a <HAL_TIM_IC_CaptureCallback>
 8003638:	e005      	b.n	8003646 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f000 f8a3 	bl	8003786 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f000 f8b4 	bl	80037ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	f003 0310 	and.w	r3, r3, #16
 8003656:	2b10      	cmp	r3, #16
 8003658:	d122      	bne.n	80036a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	f003 0310 	and.w	r3, r3, #16
 8003664:	2b10      	cmp	r3, #16
 8003666:	d11b      	bne.n	80036a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f06f 0210 	mvn.w	r2, #16
 8003670:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2208      	movs	r2, #8
 8003676:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	69db      	ldr	r3, [r3, #28]
 800367e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003682:	2b00      	cmp	r3, #0
 8003684:	d003      	beq.n	800368e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 f887 	bl	800379a <HAL_TIM_IC_CaptureCallback>
 800368c:	e005      	b.n	800369a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f000 f879 	bl	8003786 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f000 f88a 	bl	80037ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	f003 0301 	and.w	r3, r3, #1
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d10e      	bne.n	80036cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	f003 0301 	and.w	r3, r3, #1
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d107      	bne.n	80036cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f06f 0201 	mvn.w	r2, #1
 80036c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f003 f924 	bl	8006914 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	691b      	ldr	r3, [r3, #16]
 80036d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036d6:	2b80      	cmp	r3, #128	; 0x80
 80036d8:	d10e      	bne.n	80036f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036e4:	2b80      	cmp	r3, #128	; 0x80
 80036e6:	d107      	bne.n	80036f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80036f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 f914 	bl	8003920 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003702:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003706:	d10e      	bne.n	8003726 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003712:	2b80      	cmp	r3, #128	; 0x80
 8003714:	d107      	bne.n	8003726 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800371e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f000 f907 	bl	8003934 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	691b      	ldr	r3, [r3, #16]
 800372c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003730:	2b40      	cmp	r3, #64	; 0x40
 8003732:	d10e      	bne.n	8003752 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800373e:	2b40      	cmp	r3, #64	; 0x40
 8003740:	d107      	bne.n	8003752 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800374a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f000 f838 	bl	80037c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	691b      	ldr	r3, [r3, #16]
 8003758:	f003 0320 	and.w	r3, r3, #32
 800375c:	2b20      	cmp	r3, #32
 800375e:	d10e      	bne.n	800377e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	f003 0320 	and.w	r3, r3, #32
 800376a:	2b20      	cmp	r3, #32
 800376c:	d107      	bne.n	800377e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f06f 0220 	mvn.w	r2, #32
 8003776:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f000 f8c7 	bl	800390c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800377e:	bf00      	nop
 8003780:	3708      	adds	r7, #8
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}

08003786 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003786:	b480      	push	{r7}
 8003788:	b083      	sub	sp, #12
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800378e:	bf00      	nop
 8003790:	370c      	adds	r7, #12
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr

0800379a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800379a:	b480      	push	{r7}
 800379c:	b083      	sub	sp, #12
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80037a2:	bf00      	nop
 80037a4:	370c      	adds	r7, #12
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr

080037ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80037ae:	b480      	push	{r7}
 80037b0:	b083      	sub	sp, #12
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037b6:	bf00      	nop
 80037b8:	370c      	adds	r7, #12
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr

080037c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037c2:	b480      	push	{r7}
 80037c4:	b083      	sub	sp, #12
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037ca:	bf00      	nop
 80037cc:	370c      	adds	r7, #12
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr
	...

080037d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80037d8:	b480      	push	{r7}
 80037da:	b085      	sub	sp, #20
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4a40      	ldr	r2, [pc, #256]	; (80038ec <TIM_Base_SetConfig+0x114>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d013      	beq.n	8003818 <TIM_Base_SetConfig+0x40>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037f6:	d00f      	beq.n	8003818 <TIM_Base_SetConfig+0x40>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	4a3d      	ldr	r2, [pc, #244]	; (80038f0 <TIM_Base_SetConfig+0x118>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d00b      	beq.n	8003818 <TIM_Base_SetConfig+0x40>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4a3c      	ldr	r2, [pc, #240]	; (80038f4 <TIM_Base_SetConfig+0x11c>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d007      	beq.n	8003818 <TIM_Base_SetConfig+0x40>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4a3b      	ldr	r2, [pc, #236]	; (80038f8 <TIM_Base_SetConfig+0x120>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d003      	beq.n	8003818 <TIM_Base_SetConfig+0x40>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	4a3a      	ldr	r2, [pc, #232]	; (80038fc <TIM_Base_SetConfig+0x124>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d108      	bne.n	800382a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800381e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	68fa      	ldr	r2, [r7, #12]
 8003826:	4313      	orrs	r3, r2
 8003828:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a2f      	ldr	r2, [pc, #188]	; (80038ec <TIM_Base_SetConfig+0x114>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d01f      	beq.n	8003872 <TIM_Base_SetConfig+0x9a>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003838:	d01b      	beq.n	8003872 <TIM_Base_SetConfig+0x9a>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a2c      	ldr	r2, [pc, #176]	; (80038f0 <TIM_Base_SetConfig+0x118>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d017      	beq.n	8003872 <TIM_Base_SetConfig+0x9a>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a2b      	ldr	r2, [pc, #172]	; (80038f4 <TIM_Base_SetConfig+0x11c>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d013      	beq.n	8003872 <TIM_Base_SetConfig+0x9a>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a2a      	ldr	r2, [pc, #168]	; (80038f8 <TIM_Base_SetConfig+0x120>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d00f      	beq.n	8003872 <TIM_Base_SetConfig+0x9a>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a29      	ldr	r2, [pc, #164]	; (80038fc <TIM_Base_SetConfig+0x124>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d00b      	beq.n	8003872 <TIM_Base_SetConfig+0x9a>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a28      	ldr	r2, [pc, #160]	; (8003900 <TIM_Base_SetConfig+0x128>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d007      	beq.n	8003872 <TIM_Base_SetConfig+0x9a>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a27      	ldr	r2, [pc, #156]	; (8003904 <TIM_Base_SetConfig+0x12c>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d003      	beq.n	8003872 <TIM_Base_SetConfig+0x9a>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a26      	ldr	r2, [pc, #152]	; (8003908 <TIM_Base_SetConfig+0x130>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d108      	bne.n	8003884 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003878:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	68fa      	ldr	r2, [r7, #12]
 8003880:	4313      	orrs	r3, r2
 8003882:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	695b      	ldr	r3, [r3, #20]
 800388e:	4313      	orrs	r3, r2
 8003890:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	68fa      	ldr	r2, [r7, #12]
 8003896:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	689a      	ldr	r2, [r3, #8]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4a10      	ldr	r2, [pc, #64]	; (80038ec <TIM_Base_SetConfig+0x114>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d00f      	beq.n	80038d0 <TIM_Base_SetConfig+0xf8>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	4a12      	ldr	r2, [pc, #72]	; (80038fc <TIM_Base_SetConfig+0x124>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d00b      	beq.n	80038d0 <TIM_Base_SetConfig+0xf8>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4a11      	ldr	r2, [pc, #68]	; (8003900 <TIM_Base_SetConfig+0x128>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d007      	beq.n	80038d0 <TIM_Base_SetConfig+0xf8>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	4a10      	ldr	r2, [pc, #64]	; (8003904 <TIM_Base_SetConfig+0x12c>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d003      	beq.n	80038d0 <TIM_Base_SetConfig+0xf8>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	4a0f      	ldr	r2, [pc, #60]	; (8003908 <TIM_Base_SetConfig+0x130>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d103      	bne.n	80038d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	691a      	ldr	r2, [r3, #16]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	615a      	str	r2, [r3, #20]
}
 80038de:	bf00      	nop
 80038e0:	3714      	adds	r7, #20
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop
 80038ec:	40012c00 	.word	0x40012c00
 80038f0:	40000400 	.word	0x40000400
 80038f4:	40000800 	.word	0x40000800
 80038f8:	40000c00 	.word	0x40000c00
 80038fc:	40013400 	.word	0x40013400
 8003900:	40014000 	.word	0x40014000
 8003904:	40014400 	.word	0x40014400
 8003908:	40014800 	.word	0x40014800

0800390c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003914:	bf00      	nop
 8003916:	370c      	adds	r7, #12
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr

08003920 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003928:	bf00      	nop
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800393c:	bf00      	nop
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b082      	sub	sp, #8
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d101      	bne.n	800395a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e042      	b.n	80039e0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003960:	2b00      	cmp	r3, #0
 8003962:	d106      	bne.n	8003972 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f003 fb05 	bl	8006f7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2224      	movs	r2, #36	; 0x24
 8003976:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f022 0201 	bic.w	r2, r2, #1
 8003988:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f000 f8c4 	bl	8003b18 <UART_SetConfig>
 8003990:	4603      	mov	r3, r0
 8003992:	2b01      	cmp	r3, #1
 8003994:	d101      	bne.n	800399a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e022      	b.n	80039e0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d002      	beq.n	80039a8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f000 fbb4 	bl	8004110 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	685a      	ldr	r2, [r3, #4]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	689a      	ldr	r2, [r3, #8]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f042 0201 	orr.w	r2, r2, #1
 80039d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f000 fc3b 	bl	8004254 <UART_CheckIdleState>
 80039de:	4603      	mov	r3, r0
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3708      	adds	r7, #8
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b08a      	sub	sp, #40	; 0x28
 80039ec:	af02      	add	r7, sp, #8
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	60b9      	str	r1, [r7, #8]
 80039f2:	603b      	str	r3, [r7, #0]
 80039f4:	4613      	mov	r3, r2
 80039f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039fe:	2b20      	cmp	r3, #32
 8003a00:	f040 8084 	bne.w	8003b0c <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d002      	beq.n	8003a10 <HAL_UART_Transmit+0x28>
 8003a0a:	88fb      	ldrh	r3, [r7, #6]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d101      	bne.n	8003a14 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e07c      	b.n	8003b0e <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d101      	bne.n	8003a22 <HAL_UART_Transmit+0x3a>
 8003a1e:	2302      	movs	r3, #2
 8003a20:	e075      	b.n	8003b0e <HAL_UART_Transmit+0x126>
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2201      	movs	r2, #1
 8003a26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2221      	movs	r2, #33	; 0x21
 8003a36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a3a:	f7fc fde7 	bl	800060c <HAL_GetTick>
 8003a3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	88fa      	ldrh	r2, [r7, #6]
 8003a44:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	88fa      	ldrh	r2, [r7, #6]
 8003a4c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a58:	d108      	bne.n	8003a6c <HAL_UART_Transmit+0x84>
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d104      	bne.n	8003a6c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003a62:	2300      	movs	r3, #0
 8003a64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	61bb      	str	r3, [r7, #24]
 8003a6a:	e003      	b.n	8003a74 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a70:	2300      	movs	r3, #0
 8003a72:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8003a7c:	e02d      	b.n	8003ada <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	9300      	str	r3, [sp, #0]
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	2200      	movs	r2, #0
 8003a86:	2180      	movs	r1, #128	; 0x80
 8003a88:	68f8      	ldr	r0, [r7, #12]
 8003a8a:	f000 fc2e 	bl	80042ea <UART_WaitOnFlagUntilTimeout>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d001      	beq.n	8003a98 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8003a94:	2303      	movs	r3, #3
 8003a96:	e03a      	b.n	8003b0e <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d10b      	bne.n	8003ab6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	881a      	ldrh	r2, [r3, #0]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003aaa:	b292      	uxth	r2, r2
 8003aac:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	3302      	adds	r3, #2
 8003ab2:	61bb      	str	r3, [r7, #24]
 8003ab4:	e008      	b.n	8003ac8 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	781a      	ldrb	r2, [r3, #0]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	b292      	uxth	r2, r2
 8003ac0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	3b01      	subs	r3, #1
 8003ad2:	b29a      	uxth	r2, r3
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d1cb      	bne.n	8003a7e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	9300      	str	r3, [sp, #0]
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	2200      	movs	r2, #0
 8003aee:	2140      	movs	r1, #64	; 0x40
 8003af0:	68f8      	ldr	r0, [r7, #12]
 8003af2:	f000 fbfa 	bl	80042ea <UART_WaitOnFlagUntilTimeout>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d001      	beq.n	8003b00 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8003afc:	2303      	movs	r3, #3
 8003afe:	e006      	b.n	8003b0e <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2220      	movs	r2, #32
 8003b04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	e000      	b.n	8003b0e <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003b0c:	2302      	movs	r3, #2
  }
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3720      	adds	r7, #32
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
	...

08003b18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b1c:	b08c      	sub	sp, #48	; 0x30
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b22:	2300      	movs	r3, #0
 8003b24:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	689a      	ldr	r2, [r3, #8]
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	691b      	ldr	r3, [r3, #16]
 8003b30:	431a      	orrs	r2, r3
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	695b      	ldr	r3, [r3, #20]
 8003b36:	431a      	orrs	r2, r3
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	69db      	ldr	r3, [r3, #28]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	4baa      	ldr	r3, [pc, #680]	; (8003df0 <UART_SetConfig+0x2d8>)
 8003b48:	4013      	ands	r3, r2
 8003b4a:	697a      	ldr	r2, [r7, #20]
 8003b4c:	6812      	ldr	r2, [r2, #0]
 8003b4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b50:	430b      	orrs	r3, r1
 8003b52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	68da      	ldr	r2, [r3, #12]
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	430a      	orrs	r2, r1
 8003b68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	699b      	ldr	r3, [r3, #24]
 8003b6e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a9f      	ldr	r2, [pc, #636]	; (8003df4 <UART_SetConfig+0x2dc>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d004      	beq.n	8003b84 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	6a1b      	ldr	r3, [r3, #32]
 8003b7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b80:	4313      	orrs	r3, r2
 8003b82:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003b8e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003b92:	697a      	ldr	r2, [r7, #20]
 8003b94:	6812      	ldr	r2, [r2, #0]
 8003b96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b98:	430b      	orrs	r3, r1
 8003b9a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba2:	f023 010f 	bic.w	r1, r3, #15
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	430a      	orrs	r2, r1
 8003bb0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a90      	ldr	r2, [pc, #576]	; (8003df8 <UART_SetConfig+0x2e0>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d125      	bne.n	8003c08 <UART_SetConfig+0xf0>
 8003bbc:	4b8f      	ldr	r3, [pc, #572]	; (8003dfc <UART_SetConfig+0x2e4>)
 8003bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bc2:	f003 0303 	and.w	r3, r3, #3
 8003bc6:	2b03      	cmp	r3, #3
 8003bc8:	d81a      	bhi.n	8003c00 <UART_SetConfig+0xe8>
 8003bca:	a201      	add	r2, pc, #4	; (adr r2, 8003bd0 <UART_SetConfig+0xb8>)
 8003bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bd0:	08003be1 	.word	0x08003be1
 8003bd4:	08003bf1 	.word	0x08003bf1
 8003bd8:	08003be9 	.word	0x08003be9
 8003bdc:	08003bf9 	.word	0x08003bf9
 8003be0:	2301      	movs	r3, #1
 8003be2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003be6:	e116      	b.n	8003e16 <UART_SetConfig+0x2fe>
 8003be8:	2302      	movs	r3, #2
 8003bea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bee:	e112      	b.n	8003e16 <UART_SetConfig+0x2fe>
 8003bf0:	2304      	movs	r3, #4
 8003bf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bf6:	e10e      	b.n	8003e16 <UART_SetConfig+0x2fe>
 8003bf8:	2308      	movs	r3, #8
 8003bfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bfe:	e10a      	b.n	8003e16 <UART_SetConfig+0x2fe>
 8003c00:	2310      	movs	r3, #16
 8003c02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c06:	e106      	b.n	8003e16 <UART_SetConfig+0x2fe>
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a7c      	ldr	r2, [pc, #496]	; (8003e00 <UART_SetConfig+0x2e8>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d138      	bne.n	8003c84 <UART_SetConfig+0x16c>
 8003c12:	4b7a      	ldr	r3, [pc, #488]	; (8003dfc <UART_SetConfig+0x2e4>)
 8003c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c18:	f003 030c 	and.w	r3, r3, #12
 8003c1c:	2b0c      	cmp	r3, #12
 8003c1e:	d82d      	bhi.n	8003c7c <UART_SetConfig+0x164>
 8003c20:	a201      	add	r2, pc, #4	; (adr r2, 8003c28 <UART_SetConfig+0x110>)
 8003c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c26:	bf00      	nop
 8003c28:	08003c5d 	.word	0x08003c5d
 8003c2c:	08003c7d 	.word	0x08003c7d
 8003c30:	08003c7d 	.word	0x08003c7d
 8003c34:	08003c7d 	.word	0x08003c7d
 8003c38:	08003c6d 	.word	0x08003c6d
 8003c3c:	08003c7d 	.word	0x08003c7d
 8003c40:	08003c7d 	.word	0x08003c7d
 8003c44:	08003c7d 	.word	0x08003c7d
 8003c48:	08003c65 	.word	0x08003c65
 8003c4c:	08003c7d 	.word	0x08003c7d
 8003c50:	08003c7d 	.word	0x08003c7d
 8003c54:	08003c7d 	.word	0x08003c7d
 8003c58:	08003c75 	.word	0x08003c75
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c62:	e0d8      	b.n	8003e16 <UART_SetConfig+0x2fe>
 8003c64:	2302      	movs	r3, #2
 8003c66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c6a:	e0d4      	b.n	8003e16 <UART_SetConfig+0x2fe>
 8003c6c:	2304      	movs	r3, #4
 8003c6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c72:	e0d0      	b.n	8003e16 <UART_SetConfig+0x2fe>
 8003c74:	2308      	movs	r3, #8
 8003c76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c7a:	e0cc      	b.n	8003e16 <UART_SetConfig+0x2fe>
 8003c7c:	2310      	movs	r3, #16
 8003c7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c82:	e0c8      	b.n	8003e16 <UART_SetConfig+0x2fe>
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a5e      	ldr	r2, [pc, #376]	; (8003e04 <UART_SetConfig+0x2ec>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d125      	bne.n	8003cda <UART_SetConfig+0x1c2>
 8003c8e:	4b5b      	ldr	r3, [pc, #364]	; (8003dfc <UART_SetConfig+0x2e4>)
 8003c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c94:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003c98:	2b30      	cmp	r3, #48	; 0x30
 8003c9a:	d016      	beq.n	8003cca <UART_SetConfig+0x1b2>
 8003c9c:	2b30      	cmp	r3, #48	; 0x30
 8003c9e:	d818      	bhi.n	8003cd2 <UART_SetConfig+0x1ba>
 8003ca0:	2b20      	cmp	r3, #32
 8003ca2:	d00a      	beq.n	8003cba <UART_SetConfig+0x1a2>
 8003ca4:	2b20      	cmp	r3, #32
 8003ca6:	d814      	bhi.n	8003cd2 <UART_SetConfig+0x1ba>
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d002      	beq.n	8003cb2 <UART_SetConfig+0x19a>
 8003cac:	2b10      	cmp	r3, #16
 8003cae:	d008      	beq.n	8003cc2 <UART_SetConfig+0x1aa>
 8003cb0:	e00f      	b.n	8003cd2 <UART_SetConfig+0x1ba>
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cb8:	e0ad      	b.n	8003e16 <UART_SetConfig+0x2fe>
 8003cba:	2302      	movs	r3, #2
 8003cbc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cc0:	e0a9      	b.n	8003e16 <UART_SetConfig+0x2fe>
 8003cc2:	2304      	movs	r3, #4
 8003cc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cc8:	e0a5      	b.n	8003e16 <UART_SetConfig+0x2fe>
 8003cca:	2308      	movs	r3, #8
 8003ccc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cd0:	e0a1      	b.n	8003e16 <UART_SetConfig+0x2fe>
 8003cd2:	2310      	movs	r3, #16
 8003cd4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cd8:	e09d      	b.n	8003e16 <UART_SetConfig+0x2fe>
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a4a      	ldr	r2, [pc, #296]	; (8003e08 <UART_SetConfig+0x2f0>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d125      	bne.n	8003d30 <UART_SetConfig+0x218>
 8003ce4:	4b45      	ldr	r3, [pc, #276]	; (8003dfc <UART_SetConfig+0x2e4>)
 8003ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003cee:	2bc0      	cmp	r3, #192	; 0xc0
 8003cf0:	d016      	beq.n	8003d20 <UART_SetConfig+0x208>
 8003cf2:	2bc0      	cmp	r3, #192	; 0xc0
 8003cf4:	d818      	bhi.n	8003d28 <UART_SetConfig+0x210>
 8003cf6:	2b80      	cmp	r3, #128	; 0x80
 8003cf8:	d00a      	beq.n	8003d10 <UART_SetConfig+0x1f8>
 8003cfa:	2b80      	cmp	r3, #128	; 0x80
 8003cfc:	d814      	bhi.n	8003d28 <UART_SetConfig+0x210>
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d002      	beq.n	8003d08 <UART_SetConfig+0x1f0>
 8003d02:	2b40      	cmp	r3, #64	; 0x40
 8003d04:	d008      	beq.n	8003d18 <UART_SetConfig+0x200>
 8003d06:	e00f      	b.n	8003d28 <UART_SetConfig+0x210>
 8003d08:	2300      	movs	r3, #0
 8003d0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d0e:	e082      	b.n	8003e16 <UART_SetConfig+0x2fe>
 8003d10:	2302      	movs	r3, #2
 8003d12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d16:	e07e      	b.n	8003e16 <UART_SetConfig+0x2fe>
 8003d18:	2304      	movs	r3, #4
 8003d1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d1e:	e07a      	b.n	8003e16 <UART_SetConfig+0x2fe>
 8003d20:	2308      	movs	r3, #8
 8003d22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d26:	e076      	b.n	8003e16 <UART_SetConfig+0x2fe>
 8003d28:	2310      	movs	r3, #16
 8003d2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d2e:	e072      	b.n	8003e16 <UART_SetConfig+0x2fe>
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a35      	ldr	r2, [pc, #212]	; (8003e0c <UART_SetConfig+0x2f4>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d12a      	bne.n	8003d90 <UART_SetConfig+0x278>
 8003d3a:	4b30      	ldr	r3, [pc, #192]	; (8003dfc <UART_SetConfig+0x2e4>)
 8003d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d48:	d01a      	beq.n	8003d80 <UART_SetConfig+0x268>
 8003d4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d4e:	d81b      	bhi.n	8003d88 <UART_SetConfig+0x270>
 8003d50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d54:	d00c      	beq.n	8003d70 <UART_SetConfig+0x258>
 8003d56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d5a:	d815      	bhi.n	8003d88 <UART_SetConfig+0x270>
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d003      	beq.n	8003d68 <UART_SetConfig+0x250>
 8003d60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d64:	d008      	beq.n	8003d78 <UART_SetConfig+0x260>
 8003d66:	e00f      	b.n	8003d88 <UART_SetConfig+0x270>
 8003d68:	2300      	movs	r3, #0
 8003d6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d6e:	e052      	b.n	8003e16 <UART_SetConfig+0x2fe>
 8003d70:	2302      	movs	r3, #2
 8003d72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d76:	e04e      	b.n	8003e16 <UART_SetConfig+0x2fe>
 8003d78:	2304      	movs	r3, #4
 8003d7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d7e:	e04a      	b.n	8003e16 <UART_SetConfig+0x2fe>
 8003d80:	2308      	movs	r3, #8
 8003d82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d86:	e046      	b.n	8003e16 <UART_SetConfig+0x2fe>
 8003d88:	2310      	movs	r3, #16
 8003d8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d8e:	e042      	b.n	8003e16 <UART_SetConfig+0x2fe>
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a17      	ldr	r2, [pc, #92]	; (8003df4 <UART_SetConfig+0x2dc>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d13a      	bne.n	8003e10 <UART_SetConfig+0x2f8>
 8003d9a:	4b18      	ldr	r3, [pc, #96]	; (8003dfc <UART_SetConfig+0x2e4>)
 8003d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003da0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003da4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003da8:	d01a      	beq.n	8003de0 <UART_SetConfig+0x2c8>
 8003daa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003dae:	d81b      	bhi.n	8003de8 <UART_SetConfig+0x2d0>
 8003db0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003db4:	d00c      	beq.n	8003dd0 <UART_SetConfig+0x2b8>
 8003db6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dba:	d815      	bhi.n	8003de8 <UART_SetConfig+0x2d0>
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d003      	beq.n	8003dc8 <UART_SetConfig+0x2b0>
 8003dc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dc4:	d008      	beq.n	8003dd8 <UART_SetConfig+0x2c0>
 8003dc6:	e00f      	b.n	8003de8 <UART_SetConfig+0x2d0>
 8003dc8:	2300      	movs	r3, #0
 8003dca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dce:	e022      	b.n	8003e16 <UART_SetConfig+0x2fe>
 8003dd0:	2302      	movs	r3, #2
 8003dd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dd6:	e01e      	b.n	8003e16 <UART_SetConfig+0x2fe>
 8003dd8:	2304      	movs	r3, #4
 8003dda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dde:	e01a      	b.n	8003e16 <UART_SetConfig+0x2fe>
 8003de0:	2308      	movs	r3, #8
 8003de2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003de6:	e016      	b.n	8003e16 <UART_SetConfig+0x2fe>
 8003de8:	2310      	movs	r3, #16
 8003dea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dee:	e012      	b.n	8003e16 <UART_SetConfig+0x2fe>
 8003df0:	cfff69f3 	.word	0xcfff69f3
 8003df4:	40008000 	.word	0x40008000
 8003df8:	40013800 	.word	0x40013800
 8003dfc:	40021000 	.word	0x40021000
 8003e00:	40004400 	.word	0x40004400
 8003e04:	40004800 	.word	0x40004800
 8003e08:	40004c00 	.word	0x40004c00
 8003e0c:	40005000 	.word	0x40005000
 8003e10:	2310      	movs	r3, #16
 8003e12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4aae      	ldr	r2, [pc, #696]	; (80040d4 <UART_SetConfig+0x5bc>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	f040 8097 	bne.w	8003f50 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003e22:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003e26:	2b08      	cmp	r3, #8
 8003e28:	d823      	bhi.n	8003e72 <UART_SetConfig+0x35a>
 8003e2a:	a201      	add	r2, pc, #4	; (adr r2, 8003e30 <UART_SetConfig+0x318>)
 8003e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e30:	08003e55 	.word	0x08003e55
 8003e34:	08003e73 	.word	0x08003e73
 8003e38:	08003e5d 	.word	0x08003e5d
 8003e3c:	08003e73 	.word	0x08003e73
 8003e40:	08003e63 	.word	0x08003e63
 8003e44:	08003e73 	.word	0x08003e73
 8003e48:	08003e73 	.word	0x08003e73
 8003e4c:	08003e73 	.word	0x08003e73
 8003e50:	08003e6b 	.word	0x08003e6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e54:	f7fe fc70 	bl	8002738 <HAL_RCC_GetPCLK1Freq>
 8003e58:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e5a:	e010      	b.n	8003e7e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e5c:	4b9e      	ldr	r3, [pc, #632]	; (80040d8 <UART_SetConfig+0x5c0>)
 8003e5e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003e60:	e00d      	b.n	8003e7e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e62:	f7fe fbd1 	bl	8002608 <HAL_RCC_GetSysClockFreq>
 8003e66:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e68:	e009      	b.n	8003e7e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e6e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003e70:	e005      	b.n	8003e7e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003e72:	2300      	movs	r3, #0
 8003e74:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003e7c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	f000 8130 	beq.w	80040e6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8a:	4a94      	ldr	r2, [pc, #592]	; (80040dc <UART_SetConfig+0x5c4>)
 8003e8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e90:	461a      	mov	r2, r3
 8003e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e94:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e98:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	685a      	ldr	r2, [r3, #4]
 8003e9e:	4613      	mov	r3, r2
 8003ea0:	005b      	lsls	r3, r3, #1
 8003ea2:	4413      	add	r3, r2
 8003ea4:	69ba      	ldr	r2, [r7, #24]
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d305      	bcc.n	8003eb6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003eb0:	69ba      	ldr	r2, [r7, #24]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d903      	bls.n	8003ebe <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003ebc:	e113      	b.n	80040e6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	60bb      	str	r3, [r7, #8]
 8003ec4:	60fa      	str	r2, [r7, #12]
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eca:	4a84      	ldr	r2, [pc, #528]	; (80040dc <UART_SetConfig+0x5c4>)
 8003ecc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	603b      	str	r3, [r7, #0]
 8003ed6:	607a      	str	r2, [r7, #4]
 8003ed8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003edc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003ee0:	f7fc f9e6 	bl	80002b0 <__aeabi_uldivmod>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	460b      	mov	r3, r1
 8003ee8:	4610      	mov	r0, r2
 8003eea:	4619      	mov	r1, r3
 8003eec:	f04f 0200 	mov.w	r2, #0
 8003ef0:	f04f 0300 	mov.w	r3, #0
 8003ef4:	020b      	lsls	r3, r1, #8
 8003ef6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003efa:	0202      	lsls	r2, r0, #8
 8003efc:	6979      	ldr	r1, [r7, #20]
 8003efe:	6849      	ldr	r1, [r1, #4]
 8003f00:	0849      	lsrs	r1, r1, #1
 8003f02:	2000      	movs	r0, #0
 8003f04:	460c      	mov	r4, r1
 8003f06:	4605      	mov	r5, r0
 8003f08:	eb12 0804 	adds.w	r8, r2, r4
 8003f0c:	eb43 0905 	adc.w	r9, r3, r5
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	469a      	mov	sl, r3
 8003f18:	4693      	mov	fp, r2
 8003f1a:	4652      	mov	r2, sl
 8003f1c:	465b      	mov	r3, fp
 8003f1e:	4640      	mov	r0, r8
 8003f20:	4649      	mov	r1, r9
 8003f22:	f7fc f9c5 	bl	80002b0 <__aeabi_uldivmod>
 8003f26:	4602      	mov	r2, r0
 8003f28:	460b      	mov	r3, r1
 8003f2a:	4613      	mov	r3, r2
 8003f2c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003f2e:	6a3b      	ldr	r3, [r7, #32]
 8003f30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f34:	d308      	bcc.n	8003f48 <UART_SetConfig+0x430>
 8003f36:	6a3b      	ldr	r3, [r7, #32]
 8003f38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f3c:	d204      	bcs.n	8003f48 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	6a3a      	ldr	r2, [r7, #32]
 8003f44:	60da      	str	r2, [r3, #12]
 8003f46:	e0ce      	b.n	80040e6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003f4e:	e0ca      	b.n	80040e6 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	69db      	ldr	r3, [r3, #28]
 8003f54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f58:	d166      	bne.n	8004028 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003f5a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003f5e:	2b08      	cmp	r3, #8
 8003f60:	d827      	bhi.n	8003fb2 <UART_SetConfig+0x49a>
 8003f62:	a201      	add	r2, pc, #4	; (adr r2, 8003f68 <UART_SetConfig+0x450>)
 8003f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f68:	08003f8d 	.word	0x08003f8d
 8003f6c:	08003f95 	.word	0x08003f95
 8003f70:	08003f9d 	.word	0x08003f9d
 8003f74:	08003fb3 	.word	0x08003fb3
 8003f78:	08003fa3 	.word	0x08003fa3
 8003f7c:	08003fb3 	.word	0x08003fb3
 8003f80:	08003fb3 	.word	0x08003fb3
 8003f84:	08003fb3 	.word	0x08003fb3
 8003f88:	08003fab 	.word	0x08003fab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f8c:	f7fe fbd4 	bl	8002738 <HAL_RCC_GetPCLK1Freq>
 8003f90:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003f92:	e014      	b.n	8003fbe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f94:	f7fe fbe6 	bl	8002764 <HAL_RCC_GetPCLK2Freq>
 8003f98:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003f9a:	e010      	b.n	8003fbe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f9c:	4b4e      	ldr	r3, [pc, #312]	; (80040d8 <UART_SetConfig+0x5c0>)
 8003f9e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003fa0:	e00d      	b.n	8003fbe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fa2:	f7fe fb31 	bl	8002608 <HAL_RCC_GetSysClockFreq>
 8003fa6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003fa8:	e009      	b.n	8003fbe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003faa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003fb0:	e005      	b.n	8003fbe <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003fbc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	f000 8090 	beq.w	80040e6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fca:	4a44      	ldr	r2, [pc, #272]	; (80040dc <UART_SetConfig+0x5c4>)
 8003fcc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd4:	fbb3 f3f2 	udiv	r3, r3, r2
 8003fd8:	005a      	lsls	r2, r3, #1
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	085b      	lsrs	r3, r3, #1
 8003fe0:	441a      	add	r2, r3
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fea:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fec:	6a3b      	ldr	r3, [r7, #32]
 8003fee:	2b0f      	cmp	r3, #15
 8003ff0:	d916      	bls.n	8004020 <UART_SetConfig+0x508>
 8003ff2:	6a3b      	ldr	r3, [r7, #32]
 8003ff4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ff8:	d212      	bcs.n	8004020 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ffa:	6a3b      	ldr	r3, [r7, #32]
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	f023 030f 	bic.w	r3, r3, #15
 8004002:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004004:	6a3b      	ldr	r3, [r7, #32]
 8004006:	085b      	lsrs	r3, r3, #1
 8004008:	b29b      	uxth	r3, r3
 800400a:	f003 0307 	and.w	r3, r3, #7
 800400e:	b29a      	uxth	r2, r3
 8004010:	8bfb      	ldrh	r3, [r7, #30]
 8004012:	4313      	orrs	r3, r2
 8004014:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	8bfa      	ldrh	r2, [r7, #30]
 800401c:	60da      	str	r2, [r3, #12]
 800401e:	e062      	b.n	80040e6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004026:	e05e      	b.n	80040e6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004028:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800402c:	2b08      	cmp	r3, #8
 800402e:	d828      	bhi.n	8004082 <UART_SetConfig+0x56a>
 8004030:	a201      	add	r2, pc, #4	; (adr r2, 8004038 <UART_SetConfig+0x520>)
 8004032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004036:	bf00      	nop
 8004038:	0800405d 	.word	0x0800405d
 800403c:	08004065 	.word	0x08004065
 8004040:	0800406d 	.word	0x0800406d
 8004044:	08004083 	.word	0x08004083
 8004048:	08004073 	.word	0x08004073
 800404c:	08004083 	.word	0x08004083
 8004050:	08004083 	.word	0x08004083
 8004054:	08004083 	.word	0x08004083
 8004058:	0800407b 	.word	0x0800407b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800405c:	f7fe fb6c 	bl	8002738 <HAL_RCC_GetPCLK1Freq>
 8004060:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004062:	e014      	b.n	800408e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004064:	f7fe fb7e 	bl	8002764 <HAL_RCC_GetPCLK2Freq>
 8004068:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800406a:	e010      	b.n	800408e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800406c:	4b1a      	ldr	r3, [pc, #104]	; (80040d8 <UART_SetConfig+0x5c0>)
 800406e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004070:	e00d      	b.n	800408e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004072:	f7fe fac9 	bl	8002608 <HAL_RCC_GetSysClockFreq>
 8004076:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004078:	e009      	b.n	800408e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800407a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800407e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004080:	e005      	b.n	800408e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004082:	2300      	movs	r3, #0
 8004084:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800408c:	bf00      	nop
    }

    if (pclk != 0U)
 800408e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004090:	2b00      	cmp	r3, #0
 8004092:	d028      	beq.n	80040e6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004098:	4a10      	ldr	r2, [pc, #64]	; (80040dc <UART_SetConfig+0x5c4>)
 800409a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800409e:	461a      	mov	r2, r3
 80040a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a2:	fbb3 f2f2 	udiv	r2, r3, r2
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	085b      	lsrs	r3, r3, #1
 80040ac:	441a      	add	r2, r3
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80040b6:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040b8:	6a3b      	ldr	r3, [r7, #32]
 80040ba:	2b0f      	cmp	r3, #15
 80040bc:	d910      	bls.n	80040e0 <UART_SetConfig+0x5c8>
 80040be:	6a3b      	ldr	r3, [r7, #32]
 80040c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040c4:	d20c      	bcs.n	80040e0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80040c6:	6a3b      	ldr	r3, [r7, #32]
 80040c8:	b29a      	uxth	r2, r3
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	60da      	str	r2, [r3, #12]
 80040d0:	e009      	b.n	80040e6 <UART_SetConfig+0x5ce>
 80040d2:	bf00      	nop
 80040d4:	40008000 	.word	0x40008000
 80040d8:	00f42400 	.word	0x00f42400
 80040dc:	08007cf8 	.word	0x08007cf8
      }
      else
      {
        ret = HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	2201      	movs	r2, #1
 80040ea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	2201      	movs	r2, #1
 80040f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	2200      	movs	r2, #0
 80040fa:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	2200      	movs	r2, #0
 8004100:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004102:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004106:	4618      	mov	r0, r3
 8004108:	3730      	adds	r7, #48	; 0x30
 800410a:	46bd      	mov	sp, r7
 800410c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004110 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800411c:	f003 0301 	and.w	r3, r3, #1
 8004120:	2b00      	cmp	r3, #0
 8004122:	d00a      	beq.n	800413a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	430a      	orrs	r2, r1
 8004138:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800413e:	f003 0302 	and.w	r3, r3, #2
 8004142:	2b00      	cmp	r3, #0
 8004144:	d00a      	beq.n	800415c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	430a      	orrs	r2, r1
 800415a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004160:	f003 0304 	and.w	r3, r3, #4
 8004164:	2b00      	cmp	r3, #0
 8004166:	d00a      	beq.n	800417e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	430a      	orrs	r2, r1
 800417c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004182:	f003 0308 	and.w	r3, r3, #8
 8004186:	2b00      	cmp	r3, #0
 8004188:	d00a      	beq.n	80041a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	430a      	orrs	r2, r1
 800419e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a4:	f003 0310 	and.w	r3, r3, #16
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d00a      	beq.n	80041c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	430a      	orrs	r2, r1
 80041c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c6:	f003 0320 	and.w	r3, r3, #32
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d00a      	beq.n	80041e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	430a      	orrs	r2, r1
 80041e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d01a      	beq.n	8004226 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	430a      	orrs	r2, r1
 8004204:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800420a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800420e:	d10a      	bne.n	8004226 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	430a      	orrs	r2, r1
 8004224:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800422a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800422e:	2b00      	cmp	r3, #0
 8004230:	d00a      	beq.n	8004248 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	430a      	orrs	r2, r1
 8004246:	605a      	str	r2, [r3, #4]
  }
}
 8004248:	bf00      	nop
 800424a:	370c      	adds	r7, #12
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr

08004254 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b086      	sub	sp, #24
 8004258:	af02      	add	r7, sp, #8
 800425a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004264:	f7fc f9d2 	bl	800060c <HAL_GetTick>
 8004268:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0308 	and.w	r3, r3, #8
 8004274:	2b08      	cmp	r3, #8
 8004276:	d10e      	bne.n	8004296 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004278:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800427c:	9300      	str	r3, [sp, #0]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2200      	movs	r2, #0
 8004282:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f000 f82f 	bl	80042ea <UART_WaitOnFlagUntilTimeout>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d001      	beq.n	8004296 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e025      	b.n	80042e2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0304 	and.w	r3, r3, #4
 80042a0:	2b04      	cmp	r3, #4
 80042a2:	d10e      	bne.n	80042c2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80042a8:	9300      	str	r3, [sp, #0]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f000 f819 	bl	80042ea <UART_WaitOnFlagUntilTimeout>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d001      	beq.n	80042c2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	e00f      	b.n	80042e2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2220      	movs	r2, #32
 80042c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2220      	movs	r2, #32
 80042ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3710      	adds	r7, #16
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}

080042ea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80042ea:	b580      	push	{r7, lr}
 80042ec:	b09c      	sub	sp, #112	; 0x70
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	60f8      	str	r0, [r7, #12]
 80042f2:	60b9      	str	r1, [r7, #8]
 80042f4:	603b      	str	r3, [r7, #0]
 80042f6:	4613      	mov	r3, r2
 80042f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042fa:	e0a9      	b.n	8004450 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004302:	f000 80a5 	beq.w	8004450 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004306:	f7fc f981 	bl	800060c <HAL_GetTick>
 800430a:	4602      	mov	r2, r0
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004312:	429a      	cmp	r2, r3
 8004314:	d302      	bcc.n	800431c <UART_WaitOnFlagUntilTimeout+0x32>
 8004316:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004318:	2b00      	cmp	r3, #0
 800431a:	d140      	bne.n	800439e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004322:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004324:	e853 3f00 	ldrex	r3, [r3]
 8004328:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800432a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800432c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004330:	667b      	str	r3, [r7, #100]	; 0x64
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	461a      	mov	r2, r3
 8004338:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800433a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800433c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800433e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004340:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004342:	e841 2300 	strex	r3, r2, [r1]
 8004346:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004348:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800434a:	2b00      	cmp	r3, #0
 800434c:	d1e6      	bne.n	800431c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	3308      	adds	r3, #8
 8004354:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004356:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004358:	e853 3f00 	ldrex	r3, [r3]
 800435c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800435e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004360:	f023 0301 	bic.w	r3, r3, #1
 8004364:	663b      	str	r3, [r7, #96]	; 0x60
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	3308      	adds	r3, #8
 800436c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800436e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004370:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004372:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004374:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004376:	e841 2300 	strex	r3, r2, [r1]
 800437a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800437c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800437e:	2b00      	cmp	r3, #0
 8004380:	d1e5      	bne.n	800434e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2220      	movs	r2, #32
 8004386:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2220      	movs	r2, #32
 800438e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2200      	movs	r2, #0
 8004396:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e069      	b.n	8004472 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 0304 	and.w	r3, r3, #4
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d051      	beq.n	8004450 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	69db      	ldr	r3, [r3, #28]
 80043b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043ba:	d149      	bne.n	8004450 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80043c4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ce:	e853 3f00 	ldrex	r3, [r3]
 80043d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80043d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80043da:	66fb      	str	r3, [r7, #108]	; 0x6c
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	461a      	mov	r2, r3
 80043e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043e4:	637b      	str	r3, [r7, #52]	; 0x34
 80043e6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80043ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043ec:	e841 2300 	strex	r3, r2, [r1]
 80043f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80043f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d1e6      	bne.n	80043c6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	3308      	adds	r3, #8
 80043fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	e853 3f00 	ldrex	r3, [r3]
 8004406:	613b      	str	r3, [r7, #16]
   return(result);
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	f023 0301 	bic.w	r3, r3, #1
 800440e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	3308      	adds	r3, #8
 8004416:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004418:	623a      	str	r2, [r7, #32]
 800441a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800441c:	69f9      	ldr	r1, [r7, #28]
 800441e:	6a3a      	ldr	r2, [r7, #32]
 8004420:	e841 2300 	strex	r3, r2, [r1]
 8004424:	61bb      	str	r3, [r7, #24]
   return(result);
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d1e5      	bne.n	80043f8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2220      	movs	r2, #32
 8004430:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2220      	movs	r2, #32
 8004438:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2220      	movs	r2, #32
 8004440:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2200      	movs	r2, #0
 8004448:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800444c:	2303      	movs	r3, #3
 800444e:	e010      	b.n	8004472 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	69da      	ldr	r2, [r3, #28]
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	4013      	ands	r3, r2
 800445a:	68ba      	ldr	r2, [r7, #8]
 800445c:	429a      	cmp	r2, r3
 800445e:	bf0c      	ite	eq
 8004460:	2301      	moveq	r3, #1
 8004462:	2300      	movne	r3, #0
 8004464:	b2db      	uxtb	r3, r3
 8004466:	461a      	mov	r2, r3
 8004468:	79fb      	ldrb	r3, [r7, #7]
 800446a:	429a      	cmp	r2, r3
 800446c:	f43f af46 	beq.w	80042fc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004470:	2300      	movs	r3, #0
}
 8004472:	4618      	mov	r0, r3
 8004474:	3770      	adds	r7, #112	; 0x70
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}

0800447a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800447a:	b480      	push	{r7}
 800447c:	b085      	sub	sp, #20
 800447e:	af00      	add	r7, sp, #0
 8004480:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004488:	2b01      	cmp	r3, #1
 800448a:	d101      	bne.n	8004490 <HAL_UARTEx_DisableFifoMode+0x16>
 800448c:	2302      	movs	r3, #2
 800448e:	e027      	b.n	80044e0 <HAL_UARTEx_DisableFifoMode+0x66>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2224      	movs	r2, #36	; 0x24
 800449c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f022 0201 	bic.w	r2, r2, #1
 80044b6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80044be:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	68fa      	ldr	r2, [r7, #12]
 80044cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2220      	movs	r2, #32
 80044d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80044de:	2300      	movs	r3, #0
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3714      	adds	r7, #20
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b084      	sub	sp, #16
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d101      	bne.n	8004504 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004500:	2302      	movs	r3, #2
 8004502:	e02d      	b.n	8004560 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2224      	movs	r2, #36	; 0x24
 8004510:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f022 0201 	bic.w	r2, r2, #1
 800452a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	683a      	ldr	r2, [r7, #0]
 800453c:	430a      	orrs	r2, r1
 800453e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f000 f84f 	bl	80045e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	68fa      	ldr	r2, [r7, #12]
 800454c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2220      	movs	r2, #32
 8004552:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800455e:	2300      	movs	r3, #0
}
 8004560:	4618      	mov	r0, r3
 8004562:	3710      	adds	r7, #16
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}

08004568 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004578:	2b01      	cmp	r3, #1
 800457a:	d101      	bne.n	8004580 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800457c:	2302      	movs	r3, #2
 800457e:	e02d      	b.n	80045dc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2224      	movs	r2, #36	; 0x24
 800458c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f022 0201 	bic.w	r2, r2, #1
 80045a6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	683a      	ldr	r2, [r7, #0]
 80045b8:	430a      	orrs	r2, r1
 80045ba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f000 f811 	bl	80045e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	68fa      	ldr	r2, [r7, #12]
 80045c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2220      	movs	r2, #32
 80045ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80045da:	2300      	movs	r3, #0
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3710      	adds	r7, #16
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b085      	sub	sp, #20
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d108      	bne.n	8004606 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2201      	movs	r2, #1
 80045f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004604:	e031      	b.n	800466a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004606:	2308      	movs	r3, #8
 8004608:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800460a:	2308      	movs	r3, #8
 800460c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	0e5b      	lsrs	r3, r3, #25
 8004616:	b2db      	uxtb	r3, r3
 8004618:	f003 0307 	and.w	r3, r3, #7
 800461c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	0f5b      	lsrs	r3, r3, #29
 8004626:	b2db      	uxtb	r3, r3
 8004628:	f003 0307 	and.w	r3, r3, #7
 800462c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800462e:	7bbb      	ldrb	r3, [r7, #14]
 8004630:	7b3a      	ldrb	r2, [r7, #12]
 8004632:	4911      	ldr	r1, [pc, #68]	; (8004678 <UARTEx_SetNbDataToProcess+0x94>)
 8004634:	5c8a      	ldrb	r2, [r1, r2]
 8004636:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800463a:	7b3a      	ldrb	r2, [r7, #12]
 800463c:	490f      	ldr	r1, [pc, #60]	; (800467c <UARTEx_SetNbDataToProcess+0x98>)
 800463e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004640:	fb93 f3f2 	sdiv	r3, r3, r2
 8004644:	b29a      	uxth	r2, r3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800464c:	7bfb      	ldrb	r3, [r7, #15]
 800464e:	7b7a      	ldrb	r2, [r7, #13]
 8004650:	4909      	ldr	r1, [pc, #36]	; (8004678 <UARTEx_SetNbDataToProcess+0x94>)
 8004652:	5c8a      	ldrb	r2, [r1, r2]
 8004654:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004658:	7b7a      	ldrb	r2, [r7, #13]
 800465a:	4908      	ldr	r1, [pc, #32]	; (800467c <UARTEx_SetNbDataToProcess+0x98>)
 800465c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800465e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004662:	b29a      	uxth	r2, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800466a:	bf00      	nop
 800466c:	3714      	adds	r7, #20
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr
 8004676:	bf00      	nop
 8004678:	08007d10 	.word	0x08007d10
 800467c:	08007d18 	.word	0x08007d18

08004680 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004680:	b480      	push	{r7}
 8004682:	b085      	sub	sp, #20
 8004684:	af00      	add	r7, sp, #0
 8004686:	4603      	mov	r3, r0
 8004688:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800468a:	2300      	movs	r3, #0
 800468c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800468e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004692:	2b84      	cmp	r3, #132	; 0x84
 8004694:	d005      	beq.n	80046a2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004696:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	4413      	add	r3, r2
 800469e:	3303      	adds	r3, #3
 80046a0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80046a2:	68fb      	ldr	r3, [r7, #12]
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3714      	adds	r7, #20
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr

080046b0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80046b4:	f000 fade 	bl	8004c74 <vTaskStartScheduler>
  
  return osOK;
 80046b8:	2300      	movs	r3, #0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	bd80      	pop	{r7, pc}

080046be <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80046be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046c0:	b089      	sub	sp, #36	; 0x24
 80046c2:	af04      	add	r7, sp, #16
 80046c4:	6078      	str	r0, [r7, #4]
 80046c6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	695b      	ldr	r3, [r3, #20]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d020      	beq.n	8004712 <osThreadCreate+0x54>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	699b      	ldr	r3, [r3, #24]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d01c      	beq.n	8004712 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	685c      	ldr	r4, [r3, #4]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681d      	ldr	r5, [r3, #0]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	691e      	ldr	r6, [r3, #16]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80046ea:	4618      	mov	r0, r3
 80046ec:	f7ff ffc8 	bl	8004680 <makeFreeRtosPriority>
 80046f0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	695b      	ldr	r3, [r3, #20]
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80046fa:	9202      	str	r2, [sp, #8]
 80046fc:	9301      	str	r3, [sp, #4]
 80046fe:	9100      	str	r1, [sp, #0]
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	4632      	mov	r2, r6
 8004704:	4629      	mov	r1, r5
 8004706:	4620      	mov	r0, r4
 8004708:	f000 f8ed 	bl	80048e6 <xTaskCreateStatic>
 800470c:	4603      	mov	r3, r0
 800470e:	60fb      	str	r3, [r7, #12]
 8004710:	e01c      	b.n	800474c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	685c      	ldr	r4, [r3, #4]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800471e:	b29e      	uxth	r6, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004726:	4618      	mov	r0, r3
 8004728:	f7ff ffaa 	bl	8004680 <makeFreeRtosPriority>
 800472c:	4602      	mov	r2, r0
 800472e:	f107 030c 	add.w	r3, r7, #12
 8004732:	9301      	str	r3, [sp, #4]
 8004734:	9200      	str	r2, [sp, #0]
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	4632      	mov	r2, r6
 800473a:	4629      	mov	r1, r5
 800473c:	4620      	mov	r0, r4
 800473e:	f000 f92f 	bl	80049a0 <xTaskCreate>
 8004742:	4603      	mov	r3, r0
 8004744:	2b01      	cmp	r3, #1
 8004746:	d001      	beq.n	800474c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004748:	2300      	movs	r3, #0
 800474a:	e000      	b.n	800474e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800474c:	68fb      	ldr	r3, [r7, #12]
}
 800474e:	4618      	mov	r0, r3
 8004750:	3714      	adds	r7, #20
 8004752:	46bd      	mov	sp, r7
 8004754:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004756 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004756:	b580      	push	{r7, lr}
 8004758:	b084      	sub	sp, #16
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d001      	beq.n	800476c <osDelay+0x16>
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	e000      	b.n	800476e <osDelay+0x18>
 800476c:	2301      	movs	r3, #1
 800476e:	4618      	mov	r0, r3
 8004770:	f000 fa4c 	bl	8004c0c <vTaskDelay>
  
  return osOK;
 8004774:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004776:	4618      	mov	r0, r3
 8004778:	3710      	adds	r7, #16
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}

0800477e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800477e:	b480      	push	{r7}
 8004780:	b083      	sub	sp, #12
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f103 0208 	add.w	r2, r3, #8
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004796:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f103 0208 	add.w	r2, r3, #8
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f103 0208 	add.w	r2, r3, #8
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80047b2:	bf00      	nop
 80047b4:	370c      	adds	r7, #12
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr

080047be <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80047be:	b480      	push	{r7}
 80047c0:	b083      	sub	sp, #12
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80047cc:	bf00      	nop
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80047d8:	b480      	push	{r7}
 80047da:	b085      	sub	sp, #20
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	689a      	ldr	r2, [r3, #8]
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	683a      	ldr	r2, [r7, #0]
 80047fc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	683a      	ldr	r2, [r7, #0]
 8004802:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	1c5a      	adds	r2, r3, #1
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	601a      	str	r2, [r3, #0]
}
 8004814:	bf00      	nop
 8004816:	3714      	adds	r7, #20
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr

08004820 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004820:	b480      	push	{r7}
 8004822:	b085      	sub	sp, #20
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004836:	d103      	bne.n	8004840 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	691b      	ldr	r3, [r3, #16]
 800483c:	60fb      	str	r3, [r7, #12]
 800483e:	e00c      	b.n	800485a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	3308      	adds	r3, #8
 8004844:	60fb      	str	r3, [r7, #12]
 8004846:	e002      	b.n	800484e <vListInsert+0x2e>
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	60fb      	str	r3, [r7, #12]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	68ba      	ldr	r2, [r7, #8]
 8004856:	429a      	cmp	r2, r3
 8004858:	d2f6      	bcs.n	8004848 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	685a      	ldr	r2, [r3, #4]
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	683a      	ldr	r2, [r7, #0]
 8004868:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	68fa      	ldr	r2, [r7, #12]
 800486e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	683a      	ldr	r2, [r7, #0]
 8004874:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	1c5a      	adds	r2, r3, #1
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	601a      	str	r2, [r3, #0]
}
 8004886:	bf00      	nop
 8004888:	3714      	adds	r7, #20
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr

08004892 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004892:	b480      	push	{r7}
 8004894:	b085      	sub	sp, #20
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	6892      	ldr	r2, [r2, #8]
 80048a8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	6852      	ldr	r2, [r2, #4]
 80048b2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d103      	bne.n	80048c6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	689a      	ldr	r2, [r3, #8]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	1e5a      	subs	r2, r3, #1
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3714      	adds	r7, #20
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr

080048e6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80048e6:	b580      	push	{r7, lr}
 80048e8:	b08e      	sub	sp, #56	; 0x38
 80048ea:	af04      	add	r7, sp, #16
 80048ec:	60f8      	str	r0, [r7, #12]
 80048ee:	60b9      	str	r1, [r7, #8]
 80048f0:	607a      	str	r2, [r7, #4]
 80048f2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80048f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d10a      	bne.n	8004910 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80048fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048fe:	f383 8811 	msr	BASEPRI, r3
 8004902:	f3bf 8f6f 	isb	sy
 8004906:	f3bf 8f4f 	dsb	sy
 800490a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800490c:	bf00      	nop
 800490e:	e7fe      	b.n	800490e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004912:	2b00      	cmp	r3, #0
 8004914:	d10a      	bne.n	800492c <xTaskCreateStatic+0x46>
	__asm volatile
 8004916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800491a:	f383 8811 	msr	BASEPRI, r3
 800491e:	f3bf 8f6f 	isb	sy
 8004922:	f3bf 8f4f 	dsb	sy
 8004926:	61fb      	str	r3, [r7, #28]
}
 8004928:	bf00      	nop
 800492a:	e7fe      	b.n	800492a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800492c:	2354      	movs	r3, #84	; 0x54
 800492e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	2b54      	cmp	r3, #84	; 0x54
 8004934:	d00a      	beq.n	800494c <xTaskCreateStatic+0x66>
	__asm volatile
 8004936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800493a:	f383 8811 	msr	BASEPRI, r3
 800493e:	f3bf 8f6f 	isb	sy
 8004942:	f3bf 8f4f 	dsb	sy
 8004946:	61bb      	str	r3, [r7, #24]
}
 8004948:	bf00      	nop
 800494a:	e7fe      	b.n	800494a <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800494c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800494e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004950:	2b00      	cmp	r3, #0
 8004952:	d01e      	beq.n	8004992 <xTaskCreateStatic+0xac>
 8004954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004956:	2b00      	cmp	r3, #0
 8004958:	d01b      	beq.n	8004992 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800495a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800495c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800495e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004960:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004962:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004966:	2202      	movs	r2, #2
 8004968:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800496c:	2300      	movs	r3, #0
 800496e:	9303      	str	r3, [sp, #12]
 8004970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004972:	9302      	str	r3, [sp, #8]
 8004974:	f107 0314 	add.w	r3, r7, #20
 8004978:	9301      	str	r3, [sp, #4]
 800497a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800497c:	9300      	str	r3, [sp, #0]
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	68b9      	ldr	r1, [r7, #8]
 8004984:	68f8      	ldr	r0, [r7, #12]
 8004986:	f000 f850 	bl	8004a2a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800498a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800498c:	f000 f8d4 	bl	8004b38 <prvAddNewTaskToReadyList>
 8004990:	e001      	b.n	8004996 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004992:	2300      	movs	r3, #0
 8004994:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004996:	697b      	ldr	r3, [r7, #20]
	}
 8004998:	4618      	mov	r0, r3
 800499a:	3728      	adds	r7, #40	; 0x28
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}

080049a0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b08c      	sub	sp, #48	; 0x30
 80049a4:	af04      	add	r7, sp, #16
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	60b9      	str	r1, [r7, #8]
 80049aa:	603b      	str	r3, [r7, #0]
 80049ac:	4613      	mov	r3, r2
 80049ae:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80049b0:	88fb      	ldrh	r3, [r7, #6]
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	4618      	mov	r0, r3
 80049b6:	f000 fec7 	bl	8005748 <pvPortMalloc>
 80049ba:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d00e      	beq.n	80049e0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80049c2:	2054      	movs	r0, #84	; 0x54
 80049c4:	f000 fec0 	bl	8005748 <pvPortMalloc>
 80049c8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80049ca:	69fb      	ldr	r3, [r7, #28]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d003      	beq.n	80049d8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	697a      	ldr	r2, [r7, #20]
 80049d4:	631a      	str	r2, [r3, #48]	; 0x30
 80049d6:	e005      	b.n	80049e4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80049d8:	6978      	ldr	r0, [r7, #20]
 80049da:	f000 ff81 	bl	80058e0 <vPortFree>
 80049de:	e001      	b.n	80049e4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80049e0:	2300      	movs	r3, #0
 80049e2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80049e4:	69fb      	ldr	r3, [r7, #28]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d017      	beq.n	8004a1a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	2200      	movs	r2, #0
 80049ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80049f2:	88fa      	ldrh	r2, [r7, #6]
 80049f4:	2300      	movs	r3, #0
 80049f6:	9303      	str	r3, [sp, #12]
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	9302      	str	r3, [sp, #8]
 80049fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049fe:	9301      	str	r3, [sp, #4]
 8004a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a02:	9300      	str	r3, [sp, #0]
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	68b9      	ldr	r1, [r7, #8]
 8004a08:	68f8      	ldr	r0, [r7, #12]
 8004a0a:	f000 f80e 	bl	8004a2a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004a0e:	69f8      	ldr	r0, [r7, #28]
 8004a10:	f000 f892 	bl	8004b38 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004a14:	2301      	movs	r3, #1
 8004a16:	61bb      	str	r3, [r7, #24]
 8004a18:	e002      	b.n	8004a20 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004a1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004a1e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004a20:	69bb      	ldr	r3, [r7, #24]
	}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3720      	adds	r7, #32
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}

08004a2a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004a2a:	b580      	push	{r7, lr}
 8004a2c:	b088      	sub	sp, #32
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	60f8      	str	r0, [r7, #12]
 8004a32:	60b9      	str	r1, [r7, #8]
 8004a34:	607a      	str	r2, [r7, #4]
 8004a36:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004a42:	3b01      	subs	r3, #1
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	4413      	add	r3, r2
 8004a48:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004a4a:	69bb      	ldr	r3, [r7, #24]
 8004a4c:	f023 0307 	bic.w	r3, r3, #7
 8004a50:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004a52:	69bb      	ldr	r3, [r7, #24]
 8004a54:	f003 0307 	and.w	r3, r3, #7
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d00a      	beq.n	8004a72 <prvInitialiseNewTask+0x48>
	__asm volatile
 8004a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a60:	f383 8811 	msr	BASEPRI, r3
 8004a64:	f3bf 8f6f 	isb	sy
 8004a68:	f3bf 8f4f 	dsb	sy
 8004a6c:	617b      	str	r3, [r7, #20]
}
 8004a6e:	bf00      	nop
 8004a70:	e7fe      	b.n	8004a70 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d01f      	beq.n	8004ab8 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004a78:	2300      	movs	r3, #0
 8004a7a:	61fb      	str	r3, [r7, #28]
 8004a7c:	e012      	b.n	8004aa4 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004a7e:	68ba      	ldr	r2, [r7, #8]
 8004a80:	69fb      	ldr	r3, [r7, #28]
 8004a82:	4413      	add	r3, r2
 8004a84:	7819      	ldrb	r1, [r3, #0]
 8004a86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a88:	69fb      	ldr	r3, [r7, #28]
 8004a8a:	4413      	add	r3, r2
 8004a8c:	3334      	adds	r3, #52	; 0x34
 8004a8e:	460a      	mov	r2, r1
 8004a90:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004a92:	68ba      	ldr	r2, [r7, #8]
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	4413      	add	r3, r2
 8004a98:	781b      	ldrb	r3, [r3, #0]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d006      	beq.n	8004aac <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004a9e:	69fb      	ldr	r3, [r7, #28]
 8004aa0:	3301      	adds	r3, #1
 8004aa2:	61fb      	str	r3, [r7, #28]
 8004aa4:	69fb      	ldr	r3, [r7, #28]
 8004aa6:	2b0f      	cmp	r3, #15
 8004aa8:	d9e9      	bls.n	8004a7e <prvInitialiseNewTask+0x54>
 8004aaa:	e000      	b.n	8004aae <prvInitialiseNewTask+0x84>
			{
				break;
 8004aac:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ab6:	e003      	b.n	8004ac0 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aba:	2200      	movs	r2, #0
 8004abc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac2:	2b06      	cmp	r3, #6
 8004ac4:	d901      	bls.n	8004aca <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004ac6:	2306      	movs	r3, #6
 8004ac8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004acc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ace:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ad4:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad8:	2200      	movs	r2, #0
 8004ada:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ade:	3304      	adds	r3, #4
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f7ff fe6c 	bl	80047be <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae8:	3318      	adds	r3, #24
 8004aea:	4618      	mov	r0, r3
 8004aec:	f7ff fe67 	bl	80047be <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004af4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af8:	f1c3 0207 	rsb	r2, r3, #7
 8004afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004afe:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b04:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b08:	2200      	movs	r2, #0
 8004b0a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004b14:	683a      	ldr	r2, [r7, #0]
 8004b16:	68f9      	ldr	r1, [r7, #12]
 8004b18:	69b8      	ldr	r0, [r7, #24]
 8004b1a:	f000 fc05 	bl	8005328 <pxPortInitialiseStack>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b22:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d002      	beq.n	8004b30 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b2e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b30:	bf00      	nop
 8004b32:	3720      	adds	r7, #32
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}

08004b38 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b082      	sub	sp, #8
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004b40:	f000 fd20 	bl	8005584 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004b44:	4b2a      	ldr	r3, [pc, #168]	; (8004bf0 <prvAddNewTaskToReadyList+0xb8>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	3301      	adds	r3, #1
 8004b4a:	4a29      	ldr	r2, [pc, #164]	; (8004bf0 <prvAddNewTaskToReadyList+0xb8>)
 8004b4c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004b4e:	4b29      	ldr	r3, [pc, #164]	; (8004bf4 <prvAddNewTaskToReadyList+0xbc>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d109      	bne.n	8004b6a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004b56:	4a27      	ldr	r2, [pc, #156]	; (8004bf4 <prvAddNewTaskToReadyList+0xbc>)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004b5c:	4b24      	ldr	r3, [pc, #144]	; (8004bf0 <prvAddNewTaskToReadyList+0xb8>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d110      	bne.n	8004b86 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004b64:	f000 fabc 	bl	80050e0 <prvInitialiseTaskLists>
 8004b68:	e00d      	b.n	8004b86 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004b6a:	4b23      	ldr	r3, [pc, #140]	; (8004bf8 <prvAddNewTaskToReadyList+0xc0>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d109      	bne.n	8004b86 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004b72:	4b20      	ldr	r3, [pc, #128]	; (8004bf4 <prvAddNewTaskToReadyList+0xbc>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d802      	bhi.n	8004b86 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004b80:	4a1c      	ldr	r2, [pc, #112]	; (8004bf4 <prvAddNewTaskToReadyList+0xbc>)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004b86:	4b1d      	ldr	r3, [pc, #116]	; (8004bfc <prvAddNewTaskToReadyList+0xc4>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	3301      	adds	r3, #1
 8004b8c:	4a1b      	ldr	r2, [pc, #108]	; (8004bfc <prvAddNewTaskToReadyList+0xc4>)
 8004b8e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b94:	2201      	movs	r2, #1
 8004b96:	409a      	lsls	r2, r3
 8004b98:	4b19      	ldr	r3, [pc, #100]	; (8004c00 <prvAddNewTaskToReadyList+0xc8>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	4a18      	ldr	r2, [pc, #96]	; (8004c00 <prvAddNewTaskToReadyList+0xc8>)
 8004ba0:	6013      	str	r3, [r2, #0]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ba6:	4613      	mov	r3, r2
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	4413      	add	r3, r2
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	4a15      	ldr	r2, [pc, #84]	; (8004c04 <prvAddNewTaskToReadyList+0xcc>)
 8004bb0:	441a      	add	r2, r3
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	3304      	adds	r3, #4
 8004bb6:	4619      	mov	r1, r3
 8004bb8:	4610      	mov	r0, r2
 8004bba:	f7ff fe0d 	bl	80047d8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004bbe:	f000 fd11 	bl	80055e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004bc2:	4b0d      	ldr	r3, [pc, #52]	; (8004bf8 <prvAddNewTaskToReadyList+0xc0>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d00e      	beq.n	8004be8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004bca:	4b0a      	ldr	r3, [pc, #40]	; (8004bf4 <prvAddNewTaskToReadyList+0xbc>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d207      	bcs.n	8004be8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004bd8:	4b0b      	ldr	r3, [pc, #44]	; (8004c08 <prvAddNewTaskToReadyList+0xd0>)
 8004bda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bde:	601a      	str	r2, [r3, #0]
 8004be0:	f3bf 8f4f 	dsb	sy
 8004be4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004be8:	bf00      	nop
 8004bea:	3708      	adds	r7, #8
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}
 8004bf0:	2000023c 	.word	0x2000023c
 8004bf4:	2000013c 	.word	0x2000013c
 8004bf8:	20000248 	.word	0x20000248
 8004bfc:	20000258 	.word	0x20000258
 8004c00:	20000244 	.word	0x20000244
 8004c04:	20000140 	.word	0x20000140
 8004c08:	e000ed04 	.word	0xe000ed04

08004c0c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b084      	sub	sp, #16
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004c14:	2300      	movs	r3, #0
 8004c16:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d017      	beq.n	8004c4e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004c1e:	4b13      	ldr	r3, [pc, #76]	; (8004c6c <vTaskDelay+0x60>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d00a      	beq.n	8004c3c <vTaskDelay+0x30>
	__asm volatile
 8004c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c2a:	f383 8811 	msr	BASEPRI, r3
 8004c2e:	f3bf 8f6f 	isb	sy
 8004c32:	f3bf 8f4f 	dsb	sy
 8004c36:	60bb      	str	r3, [r7, #8]
}
 8004c38:	bf00      	nop
 8004c3a:	e7fe      	b.n	8004c3a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004c3c:	f000 f87a 	bl	8004d34 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004c40:	2100      	movs	r1, #0
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 fb0a 	bl	800525c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004c48:	f000 f882 	bl	8004d50 <xTaskResumeAll>
 8004c4c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d107      	bne.n	8004c64 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004c54:	4b06      	ldr	r3, [pc, #24]	; (8004c70 <vTaskDelay+0x64>)
 8004c56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c5a:	601a      	str	r2, [r3, #0]
 8004c5c:	f3bf 8f4f 	dsb	sy
 8004c60:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004c64:	bf00      	nop
 8004c66:	3710      	adds	r7, #16
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	20000264 	.word	0x20000264
 8004c70:	e000ed04 	.word	0xe000ed04

08004c74 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b08a      	sub	sp, #40	; 0x28
 8004c78:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004c82:	463a      	mov	r2, r7
 8004c84:	1d39      	adds	r1, r7, #4
 8004c86:	f107 0308 	add.w	r3, r7, #8
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f000 ff46 	bl	8005b1c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004c90:	6839      	ldr	r1, [r7, #0]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	68ba      	ldr	r2, [r7, #8]
 8004c96:	9202      	str	r2, [sp, #8]
 8004c98:	9301      	str	r3, [sp, #4]
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	9300      	str	r3, [sp, #0]
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	460a      	mov	r2, r1
 8004ca2:	491e      	ldr	r1, [pc, #120]	; (8004d1c <vTaskStartScheduler+0xa8>)
 8004ca4:	481e      	ldr	r0, [pc, #120]	; (8004d20 <vTaskStartScheduler+0xac>)
 8004ca6:	f7ff fe1e 	bl	80048e6 <xTaskCreateStatic>
 8004caa:	4603      	mov	r3, r0
 8004cac:	4a1d      	ldr	r2, [pc, #116]	; (8004d24 <vTaskStartScheduler+0xb0>)
 8004cae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004cb0:	4b1c      	ldr	r3, [pc, #112]	; (8004d24 <vTaskStartScheduler+0xb0>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d002      	beq.n	8004cbe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	617b      	str	r3, [r7, #20]
 8004cbc:	e001      	b.n	8004cc2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d116      	bne.n	8004cf6 <vTaskStartScheduler+0x82>
	__asm volatile
 8004cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ccc:	f383 8811 	msr	BASEPRI, r3
 8004cd0:	f3bf 8f6f 	isb	sy
 8004cd4:	f3bf 8f4f 	dsb	sy
 8004cd8:	613b      	str	r3, [r7, #16]
}
 8004cda:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004cdc:	4b12      	ldr	r3, [pc, #72]	; (8004d28 <vTaskStartScheduler+0xb4>)
 8004cde:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004ce2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004ce4:	4b11      	ldr	r3, [pc, #68]	; (8004d2c <vTaskStartScheduler+0xb8>)
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004cea:	4b11      	ldr	r3, [pc, #68]	; (8004d30 <vTaskStartScheduler+0xbc>)
 8004cec:	2200      	movs	r2, #0
 8004cee:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004cf0:	f000 fba6 	bl	8005440 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004cf4:	e00e      	b.n	8004d14 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cfc:	d10a      	bne.n	8004d14 <vTaskStartScheduler+0xa0>
	__asm volatile
 8004cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d02:	f383 8811 	msr	BASEPRI, r3
 8004d06:	f3bf 8f6f 	isb	sy
 8004d0a:	f3bf 8f4f 	dsb	sy
 8004d0e:	60fb      	str	r3, [r7, #12]
}
 8004d10:	bf00      	nop
 8004d12:	e7fe      	b.n	8004d12 <vTaskStartScheduler+0x9e>
}
 8004d14:	bf00      	nop
 8004d16:	3718      	adds	r7, #24
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}
 8004d1c:	08007bb8 	.word	0x08007bb8
 8004d20:	080050b1 	.word	0x080050b1
 8004d24:	20000260 	.word	0x20000260
 8004d28:	2000025c 	.word	0x2000025c
 8004d2c:	20000248 	.word	0x20000248
 8004d30:	20000240 	.word	0x20000240

08004d34 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004d34:	b480      	push	{r7}
 8004d36:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004d38:	4b04      	ldr	r3, [pc, #16]	; (8004d4c <vTaskSuspendAll+0x18>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	3301      	adds	r3, #1
 8004d3e:	4a03      	ldr	r2, [pc, #12]	; (8004d4c <vTaskSuspendAll+0x18>)
 8004d40:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004d42:	bf00      	nop
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr
 8004d4c:	20000264 	.word	0x20000264

08004d50 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b084      	sub	sp, #16
 8004d54:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004d56:	2300      	movs	r3, #0
 8004d58:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004d5e:	4b41      	ldr	r3, [pc, #260]	; (8004e64 <xTaskResumeAll+0x114>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d10a      	bne.n	8004d7c <xTaskResumeAll+0x2c>
	__asm volatile
 8004d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d6a:	f383 8811 	msr	BASEPRI, r3
 8004d6e:	f3bf 8f6f 	isb	sy
 8004d72:	f3bf 8f4f 	dsb	sy
 8004d76:	603b      	str	r3, [r7, #0]
}
 8004d78:	bf00      	nop
 8004d7a:	e7fe      	b.n	8004d7a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004d7c:	f000 fc02 	bl	8005584 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004d80:	4b38      	ldr	r3, [pc, #224]	; (8004e64 <xTaskResumeAll+0x114>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	3b01      	subs	r3, #1
 8004d86:	4a37      	ldr	r2, [pc, #220]	; (8004e64 <xTaskResumeAll+0x114>)
 8004d88:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d8a:	4b36      	ldr	r3, [pc, #216]	; (8004e64 <xTaskResumeAll+0x114>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d161      	bne.n	8004e56 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004d92:	4b35      	ldr	r3, [pc, #212]	; (8004e68 <xTaskResumeAll+0x118>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d05d      	beq.n	8004e56 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d9a:	e02e      	b.n	8004dfa <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d9c:	4b33      	ldr	r3, [pc, #204]	; (8004e6c <xTaskResumeAll+0x11c>)
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	3318      	adds	r3, #24
 8004da8:	4618      	mov	r0, r3
 8004daa:	f7ff fd72 	bl	8004892 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	3304      	adds	r3, #4
 8004db2:	4618      	mov	r0, r3
 8004db4:	f7ff fd6d 	bl	8004892 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	409a      	lsls	r2, r3
 8004dc0:	4b2b      	ldr	r3, [pc, #172]	; (8004e70 <xTaskResumeAll+0x120>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	4a2a      	ldr	r2, [pc, #168]	; (8004e70 <xTaskResumeAll+0x120>)
 8004dc8:	6013      	str	r3, [r2, #0]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dce:	4613      	mov	r3, r2
 8004dd0:	009b      	lsls	r3, r3, #2
 8004dd2:	4413      	add	r3, r2
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	4a27      	ldr	r2, [pc, #156]	; (8004e74 <xTaskResumeAll+0x124>)
 8004dd8:	441a      	add	r2, r3
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	3304      	adds	r3, #4
 8004dde:	4619      	mov	r1, r3
 8004de0:	4610      	mov	r0, r2
 8004de2:	f7ff fcf9 	bl	80047d8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dea:	4b23      	ldr	r3, [pc, #140]	; (8004e78 <xTaskResumeAll+0x128>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d302      	bcc.n	8004dfa <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004df4:	4b21      	ldr	r3, [pc, #132]	; (8004e7c <xTaskResumeAll+0x12c>)
 8004df6:	2201      	movs	r2, #1
 8004df8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004dfa:	4b1c      	ldr	r3, [pc, #112]	; (8004e6c <xTaskResumeAll+0x11c>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d1cc      	bne.n	8004d9c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d001      	beq.n	8004e0c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004e08:	f000 fa08 	bl	800521c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004e0c:	4b1c      	ldr	r3, [pc, #112]	; (8004e80 <xTaskResumeAll+0x130>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d010      	beq.n	8004e3a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004e18:	f000 f836 	bl	8004e88 <xTaskIncrementTick>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d002      	beq.n	8004e28 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004e22:	4b16      	ldr	r3, [pc, #88]	; (8004e7c <xTaskResumeAll+0x12c>)
 8004e24:	2201      	movs	r2, #1
 8004e26:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d1f1      	bne.n	8004e18 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8004e34:	4b12      	ldr	r3, [pc, #72]	; (8004e80 <xTaskResumeAll+0x130>)
 8004e36:	2200      	movs	r2, #0
 8004e38:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004e3a:	4b10      	ldr	r3, [pc, #64]	; (8004e7c <xTaskResumeAll+0x12c>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d009      	beq.n	8004e56 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004e42:	2301      	movs	r3, #1
 8004e44:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004e46:	4b0f      	ldr	r3, [pc, #60]	; (8004e84 <xTaskResumeAll+0x134>)
 8004e48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e4c:	601a      	str	r2, [r3, #0]
 8004e4e:	f3bf 8f4f 	dsb	sy
 8004e52:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004e56:	f000 fbc5 	bl	80055e4 <vPortExitCritical>

	return xAlreadyYielded;
 8004e5a:	68bb      	ldr	r3, [r7, #8]
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3710      	adds	r7, #16
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	20000264 	.word	0x20000264
 8004e68:	2000023c 	.word	0x2000023c
 8004e6c:	200001fc 	.word	0x200001fc
 8004e70:	20000244 	.word	0x20000244
 8004e74:	20000140 	.word	0x20000140
 8004e78:	2000013c 	.word	0x2000013c
 8004e7c:	20000250 	.word	0x20000250
 8004e80:	2000024c 	.word	0x2000024c
 8004e84:	e000ed04 	.word	0xe000ed04

08004e88 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b086      	sub	sp, #24
 8004e8c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e92:	4b4e      	ldr	r3, [pc, #312]	; (8004fcc <xTaskIncrementTick+0x144>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	f040 808e 	bne.w	8004fb8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004e9c:	4b4c      	ldr	r3, [pc, #304]	; (8004fd0 <xTaskIncrementTick+0x148>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	3301      	adds	r3, #1
 8004ea2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004ea4:	4a4a      	ldr	r2, [pc, #296]	; (8004fd0 <xTaskIncrementTick+0x148>)
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d120      	bne.n	8004ef2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004eb0:	4b48      	ldr	r3, [pc, #288]	; (8004fd4 <xTaskIncrementTick+0x14c>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d00a      	beq.n	8004ed0 <xTaskIncrementTick+0x48>
	__asm volatile
 8004eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ebe:	f383 8811 	msr	BASEPRI, r3
 8004ec2:	f3bf 8f6f 	isb	sy
 8004ec6:	f3bf 8f4f 	dsb	sy
 8004eca:	603b      	str	r3, [r7, #0]
}
 8004ecc:	bf00      	nop
 8004ece:	e7fe      	b.n	8004ece <xTaskIncrementTick+0x46>
 8004ed0:	4b40      	ldr	r3, [pc, #256]	; (8004fd4 <xTaskIncrementTick+0x14c>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	60fb      	str	r3, [r7, #12]
 8004ed6:	4b40      	ldr	r3, [pc, #256]	; (8004fd8 <xTaskIncrementTick+0x150>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a3e      	ldr	r2, [pc, #248]	; (8004fd4 <xTaskIncrementTick+0x14c>)
 8004edc:	6013      	str	r3, [r2, #0]
 8004ede:	4a3e      	ldr	r2, [pc, #248]	; (8004fd8 <xTaskIncrementTick+0x150>)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	6013      	str	r3, [r2, #0]
 8004ee4:	4b3d      	ldr	r3, [pc, #244]	; (8004fdc <xTaskIncrementTick+0x154>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	3301      	adds	r3, #1
 8004eea:	4a3c      	ldr	r2, [pc, #240]	; (8004fdc <xTaskIncrementTick+0x154>)
 8004eec:	6013      	str	r3, [r2, #0]
 8004eee:	f000 f995 	bl	800521c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004ef2:	4b3b      	ldr	r3, [pc, #236]	; (8004fe0 <xTaskIncrementTick+0x158>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	693a      	ldr	r2, [r7, #16]
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d348      	bcc.n	8004f8e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004efc:	4b35      	ldr	r3, [pc, #212]	; (8004fd4 <xTaskIncrementTick+0x14c>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d104      	bne.n	8004f10 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f06:	4b36      	ldr	r3, [pc, #216]	; (8004fe0 <xTaskIncrementTick+0x158>)
 8004f08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004f0c:	601a      	str	r2, [r3, #0]
					break;
 8004f0e:	e03e      	b.n	8004f8e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f10:	4b30      	ldr	r3, [pc, #192]	; (8004fd4 <xTaskIncrementTick+0x14c>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	68db      	ldr	r3, [r3, #12]
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004f20:	693a      	ldr	r2, [r7, #16]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d203      	bcs.n	8004f30 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004f28:	4a2d      	ldr	r2, [pc, #180]	; (8004fe0 <xTaskIncrementTick+0x158>)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004f2e:	e02e      	b.n	8004f8e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	3304      	adds	r3, #4
 8004f34:	4618      	mov	r0, r3
 8004f36:	f7ff fcac 	bl	8004892 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d004      	beq.n	8004f4c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	3318      	adds	r3, #24
 8004f46:	4618      	mov	r0, r3
 8004f48:	f7ff fca3 	bl	8004892 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f50:	2201      	movs	r2, #1
 8004f52:	409a      	lsls	r2, r3
 8004f54:	4b23      	ldr	r3, [pc, #140]	; (8004fe4 <xTaskIncrementTick+0x15c>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	4a22      	ldr	r2, [pc, #136]	; (8004fe4 <xTaskIncrementTick+0x15c>)
 8004f5c:	6013      	str	r3, [r2, #0]
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f62:	4613      	mov	r3, r2
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	4413      	add	r3, r2
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	4a1f      	ldr	r2, [pc, #124]	; (8004fe8 <xTaskIncrementTick+0x160>)
 8004f6c:	441a      	add	r2, r3
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	3304      	adds	r3, #4
 8004f72:	4619      	mov	r1, r3
 8004f74:	4610      	mov	r0, r2
 8004f76:	f7ff fc2f 	bl	80047d8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f7e:	4b1b      	ldr	r3, [pc, #108]	; (8004fec <xTaskIncrementTick+0x164>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d3b9      	bcc.n	8004efc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f8c:	e7b6      	b.n	8004efc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004f8e:	4b17      	ldr	r3, [pc, #92]	; (8004fec <xTaskIncrementTick+0x164>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f94:	4914      	ldr	r1, [pc, #80]	; (8004fe8 <xTaskIncrementTick+0x160>)
 8004f96:	4613      	mov	r3, r2
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	4413      	add	r3, r2
 8004f9c:	009b      	lsls	r3, r3, #2
 8004f9e:	440b      	add	r3, r1
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d901      	bls.n	8004faa <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004faa:	4b11      	ldr	r3, [pc, #68]	; (8004ff0 <xTaskIncrementTick+0x168>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d007      	beq.n	8004fc2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	617b      	str	r3, [r7, #20]
 8004fb6:	e004      	b.n	8004fc2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004fb8:	4b0e      	ldr	r3, [pc, #56]	; (8004ff4 <xTaskIncrementTick+0x16c>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	3301      	adds	r3, #1
 8004fbe:	4a0d      	ldr	r2, [pc, #52]	; (8004ff4 <xTaskIncrementTick+0x16c>)
 8004fc0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004fc2:	697b      	ldr	r3, [r7, #20]
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3718      	adds	r7, #24
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	20000264 	.word	0x20000264
 8004fd0:	20000240 	.word	0x20000240
 8004fd4:	200001f4 	.word	0x200001f4
 8004fd8:	200001f8 	.word	0x200001f8
 8004fdc:	20000254 	.word	0x20000254
 8004fe0:	2000025c 	.word	0x2000025c
 8004fe4:	20000244 	.word	0x20000244
 8004fe8:	20000140 	.word	0x20000140
 8004fec:	2000013c 	.word	0x2000013c
 8004ff0:	20000250 	.word	0x20000250
 8004ff4:	2000024c 	.word	0x2000024c

08004ff8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b087      	sub	sp, #28
 8004ffc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004ffe:	4b27      	ldr	r3, [pc, #156]	; (800509c <vTaskSwitchContext+0xa4>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d003      	beq.n	800500e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005006:	4b26      	ldr	r3, [pc, #152]	; (80050a0 <vTaskSwitchContext+0xa8>)
 8005008:	2201      	movs	r2, #1
 800500a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800500c:	e03f      	b.n	800508e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800500e:	4b24      	ldr	r3, [pc, #144]	; (80050a0 <vTaskSwitchContext+0xa8>)
 8005010:	2200      	movs	r2, #0
 8005012:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005014:	4b23      	ldr	r3, [pc, #140]	; (80050a4 <vTaskSwitchContext+0xac>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	fab3 f383 	clz	r3, r3
 8005020:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005022:	7afb      	ldrb	r3, [r7, #11]
 8005024:	f1c3 031f 	rsb	r3, r3, #31
 8005028:	617b      	str	r3, [r7, #20]
 800502a:	491f      	ldr	r1, [pc, #124]	; (80050a8 <vTaskSwitchContext+0xb0>)
 800502c:	697a      	ldr	r2, [r7, #20]
 800502e:	4613      	mov	r3, r2
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	4413      	add	r3, r2
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	440b      	add	r3, r1
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d10a      	bne.n	8005054 <vTaskSwitchContext+0x5c>
	__asm volatile
 800503e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005042:	f383 8811 	msr	BASEPRI, r3
 8005046:	f3bf 8f6f 	isb	sy
 800504a:	f3bf 8f4f 	dsb	sy
 800504e:	607b      	str	r3, [r7, #4]
}
 8005050:	bf00      	nop
 8005052:	e7fe      	b.n	8005052 <vTaskSwitchContext+0x5a>
 8005054:	697a      	ldr	r2, [r7, #20]
 8005056:	4613      	mov	r3, r2
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	4413      	add	r3, r2
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	4a12      	ldr	r2, [pc, #72]	; (80050a8 <vTaskSwitchContext+0xb0>)
 8005060:	4413      	add	r3, r2
 8005062:	613b      	str	r3, [r7, #16]
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	685a      	ldr	r2, [r3, #4]
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	605a      	str	r2, [r3, #4]
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	685a      	ldr	r2, [r3, #4]
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	3308      	adds	r3, #8
 8005076:	429a      	cmp	r2, r3
 8005078:	d104      	bne.n	8005084 <vTaskSwitchContext+0x8c>
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	685a      	ldr	r2, [r3, #4]
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	605a      	str	r2, [r3, #4]
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	68db      	ldr	r3, [r3, #12]
 800508a:	4a08      	ldr	r2, [pc, #32]	; (80050ac <vTaskSwitchContext+0xb4>)
 800508c:	6013      	str	r3, [r2, #0]
}
 800508e:	bf00      	nop
 8005090:	371c      	adds	r7, #28
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr
 800509a:	bf00      	nop
 800509c:	20000264 	.word	0x20000264
 80050a0:	20000250 	.word	0x20000250
 80050a4:	20000244 	.word	0x20000244
 80050a8:	20000140 	.word	0x20000140
 80050ac:	2000013c 	.word	0x2000013c

080050b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b082      	sub	sp, #8
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80050b8:	f000 f852 	bl	8005160 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80050bc:	4b06      	ldr	r3, [pc, #24]	; (80050d8 <prvIdleTask+0x28>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d9f9      	bls.n	80050b8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80050c4:	4b05      	ldr	r3, [pc, #20]	; (80050dc <prvIdleTask+0x2c>)
 80050c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050ca:	601a      	str	r2, [r3, #0]
 80050cc:	f3bf 8f4f 	dsb	sy
 80050d0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80050d4:	e7f0      	b.n	80050b8 <prvIdleTask+0x8>
 80050d6:	bf00      	nop
 80050d8:	20000140 	.word	0x20000140
 80050dc:	e000ed04 	.word	0xe000ed04

080050e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b082      	sub	sp, #8
 80050e4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80050e6:	2300      	movs	r3, #0
 80050e8:	607b      	str	r3, [r7, #4]
 80050ea:	e00c      	b.n	8005106 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	4613      	mov	r3, r2
 80050f0:	009b      	lsls	r3, r3, #2
 80050f2:	4413      	add	r3, r2
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	4a12      	ldr	r2, [pc, #72]	; (8005140 <prvInitialiseTaskLists+0x60>)
 80050f8:	4413      	add	r3, r2
 80050fa:	4618      	mov	r0, r3
 80050fc:	f7ff fb3f 	bl	800477e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	3301      	adds	r3, #1
 8005104:	607b      	str	r3, [r7, #4]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2b06      	cmp	r3, #6
 800510a:	d9ef      	bls.n	80050ec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800510c:	480d      	ldr	r0, [pc, #52]	; (8005144 <prvInitialiseTaskLists+0x64>)
 800510e:	f7ff fb36 	bl	800477e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005112:	480d      	ldr	r0, [pc, #52]	; (8005148 <prvInitialiseTaskLists+0x68>)
 8005114:	f7ff fb33 	bl	800477e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005118:	480c      	ldr	r0, [pc, #48]	; (800514c <prvInitialiseTaskLists+0x6c>)
 800511a:	f7ff fb30 	bl	800477e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800511e:	480c      	ldr	r0, [pc, #48]	; (8005150 <prvInitialiseTaskLists+0x70>)
 8005120:	f7ff fb2d 	bl	800477e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005124:	480b      	ldr	r0, [pc, #44]	; (8005154 <prvInitialiseTaskLists+0x74>)
 8005126:	f7ff fb2a 	bl	800477e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800512a:	4b0b      	ldr	r3, [pc, #44]	; (8005158 <prvInitialiseTaskLists+0x78>)
 800512c:	4a05      	ldr	r2, [pc, #20]	; (8005144 <prvInitialiseTaskLists+0x64>)
 800512e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005130:	4b0a      	ldr	r3, [pc, #40]	; (800515c <prvInitialiseTaskLists+0x7c>)
 8005132:	4a05      	ldr	r2, [pc, #20]	; (8005148 <prvInitialiseTaskLists+0x68>)
 8005134:	601a      	str	r2, [r3, #0]
}
 8005136:	bf00      	nop
 8005138:	3708      	adds	r7, #8
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}
 800513e:	bf00      	nop
 8005140:	20000140 	.word	0x20000140
 8005144:	200001cc 	.word	0x200001cc
 8005148:	200001e0 	.word	0x200001e0
 800514c:	200001fc 	.word	0x200001fc
 8005150:	20000210 	.word	0x20000210
 8005154:	20000228 	.word	0x20000228
 8005158:	200001f4 	.word	0x200001f4
 800515c:	200001f8 	.word	0x200001f8

08005160 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b082      	sub	sp, #8
 8005164:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005166:	e019      	b.n	800519c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005168:	f000 fa0c 	bl	8005584 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800516c:	4b10      	ldr	r3, [pc, #64]	; (80051b0 <prvCheckTasksWaitingTermination+0x50>)
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	3304      	adds	r3, #4
 8005178:	4618      	mov	r0, r3
 800517a:	f7ff fb8a 	bl	8004892 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800517e:	4b0d      	ldr	r3, [pc, #52]	; (80051b4 <prvCheckTasksWaitingTermination+0x54>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	3b01      	subs	r3, #1
 8005184:	4a0b      	ldr	r2, [pc, #44]	; (80051b4 <prvCheckTasksWaitingTermination+0x54>)
 8005186:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005188:	4b0b      	ldr	r3, [pc, #44]	; (80051b8 <prvCheckTasksWaitingTermination+0x58>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	3b01      	subs	r3, #1
 800518e:	4a0a      	ldr	r2, [pc, #40]	; (80051b8 <prvCheckTasksWaitingTermination+0x58>)
 8005190:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005192:	f000 fa27 	bl	80055e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f000 f810 	bl	80051bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800519c:	4b06      	ldr	r3, [pc, #24]	; (80051b8 <prvCheckTasksWaitingTermination+0x58>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d1e1      	bne.n	8005168 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80051a4:	bf00      	nop
 80051a6:	bf00      	nop
 80051a8:	3708      	adds	r7, #8
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
 80051ae:	bf00      	nop
 80051b0:	20000210 	.word	0x20000210
 80051b4:	2000023c 	.word	0x2000023c
 80051b8:	20000224 	.word	0x20000224

080051bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d108      	bne.n	80051e0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d2:	4618      	mov	r0, r3
 80051d4:	f000 fb84 	bl	80058e0 <vPortFree>
				vPortFree( pxTCB );
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f000 fb81 	bl	80058e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80051de:	e018      	b.n	8005212 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d103      	bne.n	80051f2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f000 fb78 	bl	80058e0 <vPortFree>
	}
 80051f0:	e00f      	b.n	8005212 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80051f8:	2b02      	cmp	r3, #2
 80051fa:	d00a      	beq.n	8005212 <prvDeleteTCB+0x56>
	__asm volatile
 80051fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005200:	f383 8811 	msr	BASEPRI, r3
 8005204:	f3bf 8f6f 	isb	sy
 8005208:	f3bf 8f4f 	dsb	sy
 800520c:	60fb      	str	r3, [r7, #12]
}
 800520e:	bf00      	nop
 8005210:	e7fe      	b.n	8005210 <prvDeleteTCB+0x54>
	}
 8005212:	bf00      	nop
 8005214:	3710      	adds	r7, #16
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
	...

0800521c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800521c:	b480      	push	{r7}
 800521e:	b083      	sub	sp, #12
 8005220:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005222:	4b0c      	ldr	r3, [pc, #48]	; (8005254 <prvResetNextTaskUnblockTime+0x38>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d104      	bne.n	8005236 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800522c:	4b0a      	ldr	r3, [pc, #40]	; (8005258 <prvResetNextTaskUnblockTime+0x3c>)
 800522e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005232:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005234:	e008      	b.n	8005248 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005236:	4b07      	ldr	r3, [pc, #28]	; (8005254 <prvResetNextTaskUnblockTime+0x38>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	4a04      	ldr	r2, [pc, #16]	; (8005258 <prvResetNextTaskUnblockTime+0x3c>)
 8005246:	6013      	str	r3, [r2, #0]
}
 8005248:	bf00      	nop
 800524a:	370c      	adds	r7, #12
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr
 8005254:	200001f4 	.word	0x200001f4
 8005258:	2000025c 	.word	0x2000025c

0800525c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b084      	sub	sp, #16
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005266:	4b29      	ldr	r3, [pc, #164]	; (800530c <prvAddCurrentTaskToDelayedList+0xb0>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800526c:	4b28      	ldr	r3, [pc, #160]	; (8005310 <prvAddCurrentTaskToDelayedList+0xb4>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	3304      	adds	r3, #4
 8005272:	4618      	mov	r0, r3
 8005274:	f7ff fb0d 	bl	8004892 <uxListRemove>
 8005278:	4603      	mov	r3, r0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d10b      	bne.n	8005296 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800527e:	4b24      	ldr	r3, [pc, #144]	; (8005310 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005284:	2201      	movs	r2, #1
 8005286:	fa02 f303 	lsl.w	r3, r2, r3
 800528a:	43da      	mvns	r2, r3
 800528c:	4b21      	ldr	r3, [pc, #132]	; (8005314 <prvAddCurrentTaskToDelayedList+0xb8>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4013      	ands	r3, r2
 8005292:	4a20      	ldr	r2, [pc, #128]	; (8005314 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005294:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800529c:	d10a      	bne.n	80052b4 <prvAddCurrentTaskToDelayedList+0x58>
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d007      	beq.n	80052b4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80052a4:	4b1a      	ldr	r3, [pc, #104]	; (8005310 <prvAddCurrentTaskToDelayedList+0xb4>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	3304      	adds	r3, #4
 80052aa:	4619      	mov	r1, r3
 80052ac:	481a      	ldr	r0, [pc, #104]	; (8005318 <prvAddCurrentTaskToDelayedList+0xbc>)
 80052ae:	f7ff fa93 	bl	80047d8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80052b2:	e026      	b.n	8005302 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80052b4:	68fa      	ldr	r2, [r7, #12]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4413      	add	r3, r2
 80052ba:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80052bc:	4b14      	ldr	r3, [pc, #80]	; (8005310 <prvAddCurrentTaskToDelayedList+0xb4>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	68ba      	ldr	r2, [r7, #8]
 80052c2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80052c4:	68ba      	ldr	r2, [r7, #8]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d209      	bcs.n	80052e0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80052cc:	4b13      	ldr	r3, [pc, #76]	; (800531c <prvAddCurrentTaskToDelayedList+0xc0>)
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	4b0f      	ldr	r3, [pc, #60]	; (8005310 <prvAddCurrentTaskToDelayedList+0xb4>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	3304      	adds	r3, #4
 80052d6:	4619      	mov	r1, r3
 80052d8:	4610      	mov	r0, r2
 80052da:	f7ff faa1 	bl	8004820 <vListInsert>
}
 80052de:	e010      	b.n	8005302 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80052e0:	4b0f      	ldr	r3, [pc, #60]	; (8005320 <prvAddCurrentTaskToDelayedList+0xc4>)
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	4b0a      	ldr	r3, [pc, #40]	; (8005310 <prvAddCurrentTaskToDelayedList+0xb4>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	3304      	adds	r3, #4
 80052ea:	4619      	mov	r1, r3
 80052ec:	4610      	mov	r0, r2
 80052ee:	f7ff fa97 	bl	8004820 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80052f2:	4b0c      	ldr	r3, [pc, #48]	; (8005324 <prvAddCurrentTaskToDelayedList+0xc8>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	68ba      	ldr	r2, [r7, #8]
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d202      	bcs.n	8005302 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80052fc:	4a09      	ldr	r2, [pc, #36]	; (8005324 <prvAddCurrentTaskToDelayedList+0xc8>)
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	6013      	str	r3, [r2, #0]
}
 8005302:	bf00      	nop
 8005304:	3710      	adds	r7, #16
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
 800530a:	bf00      	nop
 800530c:	20000240 	.word	0x20000240
 8005310:	2000013c 	.word	0x2000013c
 8005314:	20000244 	.word	0x20000244
 8005318:	20000228 	.word	0x20000228
 800531c:	200001f8 	.word	0x200001f8
 8005320:	200001f4 	.word	0x200001f4
 8005324:	2000025c 	.word	0x2000025c

08005328 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005328:	b480      	push	{r7}
 800532a:	b085      	sub	sp, #20
 800532c:	af00      	add	r7, sp, #0
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	60b9      	str	r1, [r7, #8]
 8005332:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	3b04      	subs	r3, #4
 8005338:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005340:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	3b04      	subs	r3, #4
 8005346:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	f023 0201 	bic.w	r2, r3, #1
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	3b04      	subs	r3, #4
 8005356:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005358:	4a0c      	ldr	r2, [pc, #48]	; (800538c <pxPortInitialiseStack+0x64>)
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	3b14      	subs	r3, #20
 8005362:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005364:	687a      	ldr	r2, [r7, #4]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	3b04      	subs	r3, #4
 800536e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f06f 0202 	mvn.w	r2, #2
 8005376:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	3b20      	subs	r3, #32
 800537c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800537e:	68fb      	ldr	r3, [r7, #12]
}
 8005380:	4618      	mov	r0, r3
 8005382:	3714      	adds	r7, #20
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr
 800538c:	08005391 	.word	0x08005391

08005390 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005390:	b480      	push	{r7}
 8005392:	b085      	sub	sp, #20
 8005394:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005396:	2300      	movs	r3, #0
 8005398:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800539a:	4b12      	ldr	r3, [pc, #72]	; (80053e4 <prvTaskExitError+0x54>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053a2:	d00a      	beq.n	80053ba <prvTaskExitError+0x2a>
	__asm volatile
 80053a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a8:	f383 8811 	msr	BASEPRI, r3
 80053ac:	f3bf 8f6f 	isb	sy
 80053b0:	f3bf 8f4f 	dsb	sy
 80053b4:	60fb      	str	r3, [r7, #12]
}
 80053b6:	bf00      	nop
 80053b8:	e7fe      	b.n	80053b8 <prvTaskExitError+0x28>
	__asm volatile
 80053ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053be:	f383 8811 	msr	BASEPRI, r3
 80053c2:	f3bf 8f6f 	isb	sy
 80053c6:	f3bf 8f4f 	dsb	sy
 80053ca:	60bb      	str	r3, [r7, #8]
}
 80053cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80053ce:	bf00      	nop
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d0fc      	beq.n	80053d0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80053d6:	bf00      	nop
 80053d8:	bf00      	nop
 80053da:	3714      	adds	r7, #20
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr
 80053e4:	20000008 	.word	0x20000008
	...

080053f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80053f0:	4b07      	ldr	r3, [pc, #28]	; (8005410 <pxCurrentTCBConst2>)
 80053f2:	6819      	ldr	r1, [r3, #0]
 80053f4:	6808      	ldr	r0, [r1, #0]
 80053f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053fa:	f380 8809 	msr	PSP, r0
 80053fe:	f3bf 8f6f 	isb	sy
 8005402:	f04f 0000 	mov.w	r0, #0
 8005406:	f380 8811 	msr	BASEPRI, r0
 800540a:	4770      	bx	lr
 800540c:	f3af 8000 	nop.w

08005410 <pxCurrentTCBConst2>:
 8005410:	2000013c 	.word	0x2000013c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005414:	bf00      	nop
 8005416:	bf00      	nop

08005418 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005418:	4808      	ldr	r0, [pc, #32]	; (800543c <prvPortStartFirstTask+0x24>)
 800541a:	6800      	ldr	r0, [r0, #0]
 800541c:	6800      	ldr	r0, [r0, #0]
 800541e:	f380 8808 	msr	MSP, r0
 8005422:	f04f 0000 	mov.w	r0, #0
 8005426:	f380 8814 	msr	CONTROL, r0
 800542a:	b662      	cpsie	i
 800542c:	b661      	cpsie	f
 800542e:	f3bf 8f4f 	dsb	sy
 8005432:	f3bf 8f6f 	isb	sy
 8005436:	df00      	svc	0
 8005438:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800543a:	bf00      	nop
 800543c:	e000ed08 	.word	0xe000ed08

08005440 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b086      	sub	sp, #24
 8005444:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005446:	4b46      	ldr	r3, [pc, #280]	; (8005560 <xPortStartScheduler+0x120>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a46      	ldr	r2, [pc, #280]	; (8005564 <xPortStartScheduler+0x124>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d10a      	bne.n	8005466 <xPortStartScheduler+0x26>
	__asm volatile
 8005450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005454:	f383 8811 	msr	BASEPRI, r3
 8005458:	f3bf 8f6f 	isb	sy
 800545c:	f3bf 8f4f 	dsb	sy
 8005460:	613b      	str	r3, [r7, #16]
}
 8005462:	bf00      	nop
 8005464:	e7fe      	b.n	8005464 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005466:	4b3e      	ldr	r3, [pc, #248]	; (8005560 <xPortStartScheduler+0x120>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a3f      	ldr	r2, [pc, #252]	; (8005568 <xPortStartScheduler+0x128>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d10a      	bne.n	8005486 <xPortStartScheduler+0x46>
	__asm volatile
 8005470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005474:	f383 8811 	msr	BASEPRI, r3
 8005478:	f3bf 8f6f 	isb	sy
 800547c:	f3bf 8f4f 	dsb	sy
 8005480:	60fb      	str	r3, [r7, #12]
}
 8005482:	bf00      	nop
 8005484:	e7fe      	b.n	8005484 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005486:	4b39      	ldr	r3, [pc, #228]	; (800556c <xPortStartScheduler+0x12c>)
 8005488:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	b2db      	uxtb	r3, r3
 8005490:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	22ff      	movs	r2, #255	; 0xff
 8005496:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	b2db      	uxtb	r3, r3
 800549e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80054a0:	78fb      	ldrb	r3, [r7, #3]
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80054a8:	b2da      	uxtb	r2, r3
 80054aa:	4b31      	ldr	r3, [pc, #196]	; (8005570 <xPortStartScheduler+0x130>)
 80054ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80054ae:	4b31      	ldr	r3, [pc, #196]	; (8005574 <xPortStartScheduler+0x134>)
 80054b0:	2207      	movs	r2, #7
 80054b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80054b4:	e009      	b.n	80054ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80054b6:	4b2f      	ldr	r3, [pc, #188]	; (8005574 <xPortStartScheduler+0x134>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	3b01      	subs	r3, #1
 80054bc:	4a2d      	ldr	r2, [pc, #180]	; (8005574 <xPortStartScheduler+0x134>)
 80054be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80054c0:	78fb      	ldrb	r3, [r7, #3]
 80054c2:	b2db      	uxtb	r3, r3
 80054c4:	005b      	lsls	r3, r3, #1
 80054c6:	b2db      	uxtb	r3, r3
 80054c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80054ca:	78fb      	ldrb	r3, [r7, #3]
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054d2:	2b80      	cmp	r3, #128	; 0x80
 80054d4:	d0ef      	beq.n	80054b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80054d6:	4b27      	ldr	r3, [pc, #156]	; (8005574 <xPortStartScheduler+0x134>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f1c3 0307 	rsb	r3, r3, #7
 80054de:	2b04      	cmp	r3, #4
 80054e0:	d00a      	beq.n	80054f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80054e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e6:	f383 8811 	msr	BASEPRI, r3
 80054ea:	f3bf 8f6f 	isb	sy
 80054ee:	f3bf 8f4f 	dsb	sy
 80054f2:	60bb      	str	r3, [r7, #8]
}
 80054f4:	bf00      	nop
 80054f6:	e7fe      	b.n	80054f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80054f8:	4b1e      	ldr	r3, [pc, #120]	; (8005574 <xPortStartScheduler+0x134>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	021b      	lsls	r3, r3, #8
 80054fe:	4a1d      	ldr	r2, [pc, #116]	; (8005574 <xPortStartScheduler+0x134>)
 8005500:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005502:	4b1c      	ldr	r3, [pc, #112]	; (8005574 <xPortStartScheduler+0x134>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800550a:	4a1a      	ldr	r2, [pc, #104]	; (8005574 <xPortStartScheduler+0x134>)
 800550c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	b2da      	uxtb	r2, r3
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005516:	4b18      	ldr	r3, [pc, #96]	; (8005578 <xPortStartScheduler+0x138>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a17      	ldr	r2, [pc, #92]	; (8005578 <xPortStartScheduler+0x138>)
 800551c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005520:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005522:	4b15      	ldr	r3, [pc, #84]	; (8005578 <xPortStartScheduler+0x138>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a14      	ldr	r2, [pc, #80]	; (8005578 <xPortStartScheduler+0x138>)
 8005528:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800552c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800552e:	f000 f8dd 	bl	80056ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005532:	4b12      	ldr	r3, [pc, #72]	; (800557c <xPortStartScheduler+0x13c>)
 8005534:	2200      	movs	r2, #0
 8005536:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005538:	f000 f8fc 	bl	8005734 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800553c:	4b10      	ldr	r3, [pc, #64]	; (8005580 <xPortStartScheduler+0x140>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a0f      	ldr	r2, [pc, #60]	; (8005580 <xPortStartScheduler+0x140>)
 8005542:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005546:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005548:	f7ff ff66 	bl	8005418 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800554c:	f7ff fd54 	bl	8004ff8 <vTaskSwitchContext>
	prvTaskExitError();
 8005550:	f7ff ff1e 	bl	8005390 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005554:	2300      	movs	r3, #0
}
 8005556:	4618      	mov	r0, r3
 8005558:	3718      	adds	r7, #24
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}
 800555e:	bf00      	nop
 8005560:	e000ed00 	.word	0xe000ed00
 8005564:	410fc271 	.word	0x410fc271
 8005568:	410fc270 	.word	0x410fc270
 800556c:	e000e400 	.word	0xe000e400
 8005570:	20000268 	.word	0x20000268
 8005574:	2000026c 	.word	0x2000026c
 8005578:	e000ed20 	.word	0xe000ed20
 800557c:	20000008 	.word	0x20000008
 8005580:	e000ef34 	.word	0xe000ef34

08005584 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005584:	b480      	push	{r7}
 8005586:	b083      	sub	sp, #12
 8005588:	af00      	add	r7, sp, #0
	__asm volatile
 800558a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800558e:	f383 8811 	msr	BASEPRI, r3
 8005592:	f3bf 8f6f 	isb	sy
 8005596:	f3bf 8f4f 	dsb	sy
 800559a:	607b      	str	r3, [r7, #4]
}
 800559c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800559e:	4b0f      	ldr	r3, [pc, #60]	; (80055dc <vPortEnterCritical+0x58>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	3301      	adds	r3, #1
 80055a4:	4a0d      	ldr	r2, [pc, #52]	; (80055dc <vPortEnterCritical+0x58>)
 80055a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80055a8:	4b0c      	ldr	r3, [pc, #48]	; (80055dc <vPortEnterCritical+0x58>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d10f      	bne.n	80055d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80055b0:	4b0b      	ldr	r3, [pc, #44]	; (80055e0 <vPortEnterCritical+0x5c>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d00a      	beq.n	80055d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80055ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055be:	f383 8811 	msr	BASEPRI, r3
 80055c2:	f3bf 8f6f 	isb	sy
 80055c6:	f3bf 8f4f 	dsb	sy
 80055ca:	603b      	str	r3, [r7, #0]
}
 80055cc:	bf00      	nop
 80055ce:	e7fe      	b.n	80055ce <vPortEnterCritical+0x4a>
	}
}
 80055d0:	bf00      	nop
 80055d2:	370c      	adds	r7, #12
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr
 80055dc:	20000008 	.word	0x20000008
 80055e0:	e000ed04 	.word	0xe000ed04

080055e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80055e4:	b480      	push	{r7}
 80055e6:	b083      	sub	sp, #12
 80055e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80055ea:	4b12      	ldr	r3, [pc, #72]	; (8005634 <vPortExitCritical+0x50>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d10a      	bne.n	8005608 <vPortExitCritical+0x24>
	__asm volatile
 80055f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f6:	f383 8811 	msr	BASEPRI, r3
 80055fa:	f3bf 8f6f 	isb	sy
 80055fe:	f3bf 8f4f 	dsb	sy
 8005602:	607b      	str	r3, [r7, #4]
}
 8005604:	bf00      	nop
 8005606:	e7fe      	b.n	8005606 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005608:	4b0a      	ldr	r3, [pc, #40]	; (8005634 <vPortExitCritical+0x50>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	3b01      	subs	r3, #1
 800560e:	4a09      	ldr	r2, [pc, #36]	; (8005634 <vPortExitCritical+0x50>)
 8005610:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005612:	4b08      	ldr	r3, [pc, #32]	; (8005634 <vPortExitCritical+0x50>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d105      	bne.n	8005626 <vPortExitCritical+0x42>
 800561a:	2300      	movs	r3, #0
 800561c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005624:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005626:	bf00      	nop
 8005628:	370c      	adds	r7, #12
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr
 8005632:	bf00      	nop
 8005634:	20000008 	.word	0x20000008
	...

08005640 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005640:	f3ef 8009 	mrs	r0, PSP
 8005644:	f3bf 8f6f 	isb	sy
 8005648:	4b15      	ldr	r3, [pc, #84]	; (80056a0 <pxCurrentTCBConst>)
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	f01e 0f10 	tst.w	lr, #16
 8005650:	bf08      	it	eq
 8005652:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005656:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800565a:	6010      	str	r0, [r2, #0]
 800565c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005660:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005664:	f380 8811 	msr	BASEPRI, r0
 8005668:	f3bf 8f4f 	dsb	sy
 800566c:	f3bf 8f6f 	isb	sy
 8005670:	f7ff fcc2 	bl	8004ff8 <vTaskSwitchContext>
 8005674:	f04f 0000 	mov.w	r0, #0
 8005678:	f380 8811 	msr	BASEPRI, r0
 800567c:	bc09      	pop	{r0, r3}
 800567e:	6819      	ldr	r1, [r3, #0]
 8005680:	6808      	ldr	r0, [r1, #0]
 8005682:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005686:	f01e 0f10 	tst.w	lr, #16
 800568a:	bf08      	it	eq
 800568c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005690:	f380 8809 	msr	PSP, r0
 8005694:	f3bf 8f6f 	isb	sy
 8005698:	4770      	bx	lr
 800569a:	bf00      	nop
 800569c:	f3af 8000 	nop.w

080056a0 <pxCurrentTCBConst>:
 80056a0:	2000013c 	.word	0x2000013c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80056a4:	bf00      	nop
 80056a6:	bf00      	nop

080056a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b082      	sub	sp, #8
 80056ac:	af00      	add	r7, sp, #0
	__asm volatile
 80056ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b2:	f383 8811 	msr	BASEPRI, r3
 80056b6:	f3bf 8f6f 	isb	sy
 80056ba:	f3bf 8f4f 	dsb	sy
 80056be:	607b      	str	r3, [r7, #4]
}
 80056c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80056c2:	f7ff fbe1 	bl	8004e88 <xTaskIncrementTick>
 80056c6:	4603      	mov	r3, r0
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d003      	beq.n	80056d4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80056cc:	4b06      	ldr	r3, [pc, #24]	; (80056e8 <SysTick_Handler+0x40>)
 80056ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056d2:	601a      	str	r2, [r3, #0]
 80056d4:	2300      	movs	r3, #0
 80056d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	f383 8811 	msr	BASEPRI, r3
}
 80056de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80056e0:	bf00      	nop
 80056e2:	3708      	adds	r7, #8
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}
 80056e8:	e000ed04 	.word	0xe000ed04

080056ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80056ec:	b480      	push	{r7}
 80056ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80056f0:	4b0b      	ldr	r3, [pc, #44]	; (8005720 <vPortSetupTimerInterrupt+0x34>)
 80056f2:	2200      	movs	r2, #0
 80056f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80056f6:	4b0b      	ldr	r3, [pc, #44]	; (8005724 <vPortSetupTimerInterrupt+0x38>)
 80056f8:	2200      	movs	r2, #0
 80056fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80056fc:	4b0a      	ldr	r3, [pc, #40]	; (8005728 <vPortSetupTimerInterrupt+0x3c>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a0a      	ldr	r2, [pc, #40]	; (800572c <vPortSetupTimerInterrupt+0x40>)
 8005702:	fba2 2303 	umull	r2, r3, r2, r3
 8005706:	099b      	lsrs	r3, r3, #6
 8005708:	4a09      	ldr	r2, [pc, #36]	; (8005730 <vPortSetupTimerInterrupt+0x44>)
 800570a:	3b01      	subs	r3, #1
 800570c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800570e:	4b04      	ldr	r3, [pc, #16]	; (8005720 <vPortSetupTimerInterrupt+0x34>)
 8005710:	2207      	movs	r2, #7
 8005712:	601a      	str	r2, [r3, #0]
}
 8005714:	bf00      	nop
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr
 800571e:	bf00      	nop
 8005720:	e000e010 	.word	0xe000e010
 8005724:	e000e018 	.word	0xe000e018
 8005728:	200000b4 	.word	0x200000b4
 800572c:	10624dd3 	.word	0x10624dd3
 8005730:	e000e014 	.word	0xe000e014

08005734 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005734:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005744 <vPortEnableVFP+0x10>
 8005738:	6801      	ldr	r1, [r0, #0]
 800573a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800573e:	6001      	str	r1, [r0, #0]
 8005740:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005742:	bf00      	nop
 8005744:	e000ed88 	.word	0xe000ed88

08005748 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b08a      	sub	sp, #40	; 0x28
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005750:	2300      	movs	r3, #0
 8005752:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005754:	f7ff faee 	bl	8004d34 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005758:	4b5b      	ldr	r3, [pc, #364]	; (80058c8 <pvPortMalloc+0x180>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d101      	bne.n	8005764 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005760:	f000 f920 	bl	80059a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005764:	4b59      	ldr	r3, [pc, #356]	; (80058cc <pvPortMalloc+0x184>)
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	4013      	ands	r3, r2
 800576c:	2b00      	cmp	r3, #0
 800576e:	f040 8093 	bne.w	8005898 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d01d      	beq.n	80057b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005778:	2208      	movs	r2, #8
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	4413      	add	r3, r2
 800577e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f003 0307 	and.w	r3, r3, #7
 8005786:	2b00      	cmp	r3, #0
 8005788:	d014      	beq.n	80057b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f023 0307 	bic.w	r3, r3, #7
 8005790:	3308      	adds	r3, #8
 8005792:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f003 0307 	and.w	r3, r3, #7
 800579a:	2b00      	cmp	r3, #0
 800579c:	d00a      	beq.n	80057b4 <pvPortMalloc+0x6c>
	__asm volatile
 800579e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a2:	f383 8811 	msr	BASEPRI, r3
 80057a6:	f3bf 8f6f 	isb	sy
 80057aa:	f3bf 8f4f 	dsb	sy
 80057ae:	617b      	str	r3, [r7, #20]
}
 80057b0:	bf00      	nop
 80057b2:	e7fe      	b.n	80057b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d06e      	beq.n	8005898 <pvPortMalloc+0x150>
 80057ba:	4b45      	ldr	r3, [pc, #276]	; (80058d0 <pvPortMalloc+0x188>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d869      	bhi.n	8005898 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80057c4:	4b43      	ldr	r3, [pc, #268]	; (80058d4 <pvPortMalloc+0x18c>)
 80057c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80057c8:	4b42      	ldr	r3, [pc, #264]	; (80058d4 <pvPortMalloc+0x18c>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80057ce:	e004      	b.n	80057da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80057d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80057d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80057da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	687a      	ldr	r2, [r7, #4]
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d903      	bls.n	80057ec <pvPortMalloc+0xa4>
 80057e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d1f1      	bne.n	80057d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80057ec:	4b36      	ldr	r3, [pc, #216]	; (80058c8 <pvPortMalloc+0x180>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d050      	beq.n	8005898 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80057f6:	6a3b      	ldr	r3, [r7, #32]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	2208      	movs	r2, #8
 80057fc:	4413      	add	r3, r2
 80057fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	6a3b      	ldr	r3, [r7, #32]
 8005806:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580a:	685a      	ldr	r2, [r3, #4]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	1ad2      	subs	r2, r2, r3
 8005810:	2308      	movs	r3, #8
 8005812:	005b      	lsls	r3, r3, #1
 8005814:	429a      	cmp	r2, r3
 8005816:	d91f      	bls.n	8005858 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005818:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4413      	add	r3, r2
 800581e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005820:	69bb      	ldr	r3, [r7, #24]
 8005822:	f003 0307 	and.w	r3, r3, #7
 8005826:	2b00      	cmp	r3, #0
 8005828:	d00a      	beq.n	8005840 <pvPortMalloc+0xf8>
	__asm volatile
 800582a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800582e:	f383 8811 	msr	BASEPRI, r3
 8005832:	f3bf 8f6f 	isb	sy
 8005836:	f3bf 8f4f 	dsb	sy
 800583a:	613b      	str	r3, [r7, #16]
}
 800583c:	bf00      	nop
 800583e:	e7fe      	b.n	800583e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005842:	685a      	ldr	r2, [r3, #4]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	1ad2      	subs	r2, r2, r3
 8005848:	69bb      	ldr	r3, [r7, #24]
 800584a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800584c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584e:	687a      	ldr	r2, [r7, #4]
 8005850:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005852:	69b8      	ldr	r0, [r7, #24]
 8005854:	f000 f908 	bl	8005a68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005858:	4b1d      	ldr	r3, [pc, #116]	; (80058d0 <pvPortMalloc+0x188>)
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	4a1b      	ldr	r2, [pc, #108]	; (80058d0 <pvPortMalloc+0x188>)
 8005864:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005866:	4b1a      	ldr	r3, [pc, #104]	; (80058d0 <pvPortMalloc+0x188>)
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	4b1b      	ldr	r3, [pc, #108]	; (80058d8 <pvPortMalloc+0x190>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	429a      	cmp	r2, r3
 8005870:	d203      	bcs.n	800587a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005872:	4b17      	ldr	r3, [pc, #92]	; (80058d0 <pvPortMalloc+0x188>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a18      	ldr	r2, [pc, #96]	; (80058d8 <pvPortMalloc+0x190>)
 8005878:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800587a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587c:	685a      	ldr	r2, [r3, #4]
 800587e:	4b13      	ldr	r3, [pc, #76]	; (80058cc <pvPortMalloc+0x184>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	431a      	orrs	r2, r3
 8005884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005886:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588a:	2200      	movs	r2, #0
 800588c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800588e:	4b13      	ldr	r3, [pc, #76]	; (80058dc <pvPortMalloc+0x194>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	3301      	adds	r3, #1
 8005894:	4a11      	ldr	r2, [pc, #68]	; (80058dc <pvPortMalloc+0x194>)
 8005896:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005898:	f7ff fa5a 	bl	8004d50 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800589c:	69fb      	ldr	r3, [r7, #28]
 800589e:	f003 0307 	and.w	r3, r3, #7
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d00a      	beq.n	80058bc <pvPortMalloc+0x174>
	__asm volatile
 80058a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058aa:	f383 8811 	msr	BASEPRI, r3
 80058ae:	f3bf 8f6f 	isb	sy
 80058b2:	f3bf 8f4f 	dsb	sy
 80058b6:	60fb      	str	r3, [r7, #12]
}
 80058b8:	bf00      	nop
 80058ba:	e7fe      	b.n	80058ba <pvPortMalloc+0x172>
	return pvReturn;
 80058bc:	69fb      	ldr	r3, [r7, #28]
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3728      	adds	r7, #40	; 0x28
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
 80058c6:	bf00      	nop
 80058c8:	20000e30 	.word	0x20000e30
 80058cc:	20000e44 	.word	0x20000e44
 80058d0:	20000e34 	.word	0x20000e34
 80058d4:	20000e28 	.word	0x20000e28
 80058d8:	20000e38 	.word	0x20000e38
 80058dc:	20000e3c 	.word	0x20000e3c

080058e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b086      	sub	sp, #24
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d04d      	beq.n	800598e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80058f2:	2308      	movs	r3, #8
 80058f4:	425b      	negs	r3, r3
 80058f6:	697a      	ldr	r2, [r7, #20]
 80058f8:	4413      	add	r3, r2
 80058fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	685a      	ldr	r2, [r3, #4]
 8005904:	4b24      	ldr	r3, [pc, #144]	; (8005998 <vPortFree+0xb8>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4013      	ands	r3, r2
 800590a:	2b00      	cmp	r3, #0
 800590c:	d10a      	bne.n	8005924 <vPortFree+0x44>
	__asm volatile
 800590e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005912:	f383 8811 	msr	BASEPRI, r3
 8005916:	f3bf 8f6f 	isb	sy
 800591a:	f3bf 8f4f 	dsb	sy
 800591e:	60fb      	str	r3, [r7, #12]
}
 8005920:	bf00      	nop
 8005922:	e7fe      	b.n	8005922 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d00a      	beq.n	8005942 <vPortFree+0x62>
	__asm volatile
 800592c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005930:	f383 8811 	msr	BASEPRI, r3
 8005934:	f3bf 8f6f 	isb	sy
 8005938:	f3bf 8f4f 	dsb	sy
 800593c:	60bb      	str	r3, [r7, #8]
}
 800593e:	bf00      	nop
 8005940:	e7fe      	b.n	8005940 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	685a      	ldr	r2, [r3, #4]
 8005946:	4b14      	ldr	r3, [pc, #80]	; (8005998 <vPortFree+0xb8>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4013      	ands	r3, r2
 800594c:	2b00      	cmp	r3, #0
 800594e:	d01e      	beq.n	800598e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d11a      	bne.n	800598e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	685a      	ldr	r2, [r3, #4]
 800595c:	4b0e      	ldr	r3, [pc, #56]	; (8005998 <vPortFree+0xb8>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	43db      	mvns	r3, r3
 8005962:	401a      	ands	r2, r3
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005968:	f7ff f9e4 	bl	8004d34 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	685a      	ldr	r2, [r3, #4]
 8005970:	4b0a      	ldr	r3, [pc, #40]	; (800599c <vPortFree+0xbc>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4413      	add	r3, r2
 8005976:	4a09      	ldr	r2, [pc, #36]	; (800599c <vPortFree+0xbc>)
 8005978:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800597a:	6938      	ldr	r0, [r7, #16]
 800597c:	f000 f874 	bl	8005a68 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005980:	4b07      	ldr	r3, [pc, #28]	; (80059a0 <vPortFree+0xc0>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	3301      	adds	r3, #1
 8005986:	4a06      	ldr	r2, [pc, #24]	; (80059a0 <vPortFree+0xc0>)
 8005988:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800598a:	f7ff f9e1 	bl	8004d50 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800598e:	bf00      	nop
 8005990:	3718      	adds	r7, #24
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop
 8005998:	20000e44 	.word	0x20000e44
 800599c:	20000e34 	.word	0x20000e34
 80059a0:	20000e40 	.word	0x20000e40

080059a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80059a4:	b480      	push	{r7}
 80059a6:	b085      	sub	sp, #20
 80059a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80059aa:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80059ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80059b0:	4b27      	ldr	r3, [pc, #156]	; (8005a50 <prvHeapInit+0xac>)
 80059b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f003 0307 	and.w	r3, r3, #7
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d00c      	beq.n	80059d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	3307      	adds	r3, #7
 80059c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f023 0307 	bic.w	r3, r3, #7
 80059ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80059cc:	68ba      	ldr	r2, [r7, #8]
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	1ad3      	subs	r3, r2, r3
 80059d2:	4a1f      	ldr	r2, [pc, #124]	; (8005a50 <prvHeapInit+0xac>)
 80059d4:	4413      	add	r3, r2
 80059d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80059dc:	4a1d      	ldr	r2, [pc, #116]	; (8005a54 <prvHeapInit+0xb0>)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80059e2:	4b1c      	ldr	r3, [pc, #112]	; (8005a54 <prvHeapInit+0xb0>)
 80059e4:	2200      	movs	r2, #0
 80059e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	68ba      	ldr	r2, [r7, #8]
 80059ec:	4413      	add	r3, r2
 80059ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80059f0:	2208      	movs	r2, #8
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	1a9b      	subs	r3, r3, r2
 80059f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f023 0307 	bic.w	r3, r3, #7
 80059fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	4a15      	ldr	r2, [pc, #84]	; (8005a58 <prvHeapInit+0xb4>)
 8005a04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005a06:	4b14      	ldr	r3, [pc, #80]	; (8005a58 <prvHeapInit+0xb4>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005a0e:	4b12      	ldr	r3, [pc, #72]	; (8005a58 <prvHeapInit+0xb4>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	2200      	movs	r2, #0
 8005a14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	68fa      	ldr	r2, [r7, #12]
 8005a1e:	1ad2      	subs	r2, r2, r3
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005a24:	4b0c      	ldr	r3, [pc, #48]	; (8005a58 <prvHeapInit+0xb4>)
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	4a0a      	ldr	r2, [pc, #40]	; (8005a5c <prvHeapInit+0xb8>)
 8005a32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	4a09      	ldr	r2, [pc, #36]	; (8005a60 <prvHeapInit+0xbc>)
 8005a3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005a3c:	4b09      	ldr	r3, [pc, #36]	; (8005a64 <prvHeapInit+0xc0>)
 8005a3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005a42:	601a      	str	r2, [r3, #0]
}
 8005a44:	bf00      	nop
 8005a46:	3714      	adds	r7, #20
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr
 8005a50:	20000270 	.word	0x20000270
 8005a54:	20000e28 	.word	0x20000e28
 8005a58:	20000e30 	.word	0x20000e30
 8005a5c:	20000e38 	.word	0x20000e38
 8005a60:	20000e34 	.word	0x20000e34
 8005a64:	20000e44 	.word	0x20000e44

08005a68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b085      	sub	sp, #20
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005a70:	4b28      	ldr	r3, [pc, #160]	; (8005b14 <prvInsertBlockIntoFreeList+0xac>)
 8005a72:	60fb      	str	r3, [r7, #12]
 8005a74:	e002      	b.n	8005a7c <prvInsertBlockIntoFreeList+0x14>
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	60fb      	str	r3, [r7, #12]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	687a      	ldr	r2, [r7, #4]
 8005a82:	429a      	cmp	r2, r3
 8005a84:	d8f7      	bhi.n	8005a76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	68ba      	ldr	r2, [r7, #8]
 8005a90:	4413      	add	r3, r2
 8005a92:	687a      	ldr	r2, [r7, #4]
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d108      	bne.n	8005aaa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	685a      	ldr	r2, [r3, #4]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	441a      	add	r2, r3
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	68ba      	ldr	r2, [r7, #8]
 8005ab4:	441a      	add	r2, r3
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d118      	bne.n	8005af0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	4b15      	ldr	r3, [pc, #84]	; (8005b18 <prvInsertBlockIntoFreeList+0xb0>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d00d      	beq.n	8005ae6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	685a      	ldr	r2, [r3, #4]
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	441a      	add	r2, r3
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	601a      	str	r2, [r3, #0]
 8005ae4:	e008      	b.n	8005af8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005ae6:	4b0c      	ldr	r3, [pc, #48]	; (8005b18 <prvInsertBlockIntoFreeList+0xb0>)
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	601a      	str	r2, [r3, #0]
 8005aee:	e003      	b.n	8005af8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005af8:	68fa      	ldr	r2, [r7, #12]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d002      	beq.n	8005b06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b06:	bf00      	nop
 8005b08:	3714      	adds	r7, #20
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr
 8005b12:	bf00      	nop
 8005b14:	20000e28 	.word	0x20000e28
 8005b18:	20000e30 	.word	0x20000e30

08005b1c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b085      	sub	sp, #20
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	4a07      	ldr	r2, [pc, #28]	; (8005b48 <vApplicationGetIdleTaskMemory+0x2c>)
 8005b2c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	4a06      	ldr	r2, [pc, #24]	; (8005b4c <vApplicationGetIdleTaskMemory+0x30>)
 8005b32:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2280      	movs	r2, #128	; 0x80
 8005b38:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8005b3a:	bf00      	nop
 8005b3c:	3714      	adds	r7, #20
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b44:	4770      	bx	lr
 8005b46:	bf00      	nop
 8005b48:	20000e48 	.word	0x20000e48
 8005b4c:	20000e9c 	.word	0x20000e9c

08005b50 <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b082      	sub	sp, #8
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	463b      	mov	r3, r7
 8005b58:	e883 0003 	stmia.w	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 8005b5c:	783b      	ldrb	r3, [r7, #0]
 8005b5e:	461a      	mov	r2, r3
 8005b60:	2120      	movs	r1, #32
 8005b62:	203c      	movs	r0, #60	; 0x3c
 8005b64:	f000 ffe8 	bl	8006b38 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 8005b68:	787b      	ldrb	r3, [r7, #1]
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	2121      	movs	r1, #33	; 0x21
 8005b6e:	203c      	movs	r0, #60	; 0x3c
 8005b70:	f000 ffe2 	bl	8006b38 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 8005b74:	78bb      	ldrb	r3, [r7, #2]
 8005b76:	461a      	mov	r2, r3
 8005b78:	2122      	movs	r1, #34	; 0x22
 8005b7a:	203c      	movs	r0, #60	; 0x3c
 8005b7c:	f000 ffdc 	bl	8006b38 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 8005b80:	78fb      	ldrb	r3, [r7, #3]
 8005b82:	461a      	mov	r2, r3
 8005b84:	2123      	movs	r1, #35	; 0x23
 8005b86:	203c      	movs	r0, #60	; 0x3c
 8005b88:	f000 ffd6 	bl	8006b38 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 8005b8c:	793b      	ldrb	r3, [r7, #4]
 8005b8e:	461a      	mov	r2, r3
 8005b90:	2124      	movs	r1, #36	; 0x24
 8005b92:	203c      	movs	r0, #60	; 0x3c
 8005b94:	f000 ffd0 	bl	8006b38 <SENSOR_IO_Write>
}
 8005b98:	bf00      	nop
 8005b9a:	3708      	adds	r7, #8
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b082      	sub	sp, #8
 8005ba4:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8005baa:	2122      	movs	r1, #34	; 0x22
 8005bac:	203c      	movs	r0, #60	; 0x3c
 8005bae:	f000 ffdd 	bl	8006b6c <SENSOR_IO_Read>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	71fb      	strb	r3, [r7, #7]

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 8005bb6:	79fb      	ldrb	r3, [r7, #7]
 8005bb8:	f023 0303 	bic.w	r3, r3, #3
 8005bbc:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
 8005bbe:	79fb      	ldrb	r3, [r7, #7]
 8005bc0:	f043 0303 	orr.w	r3, r3, #3
 8005bc4:	71fb      	strb	r3, [r7, #7]
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8005bc6:	79fb      	ldrb	r3, [r7, #7]
 8005bc8:	461a      	mov	r2, r3
 8005bca:	2122      	movs	r1, #34	; 0x22
 8005bcc:	203c      	movs	r0, #60	; 0x3c
 8005bce:	f000 ffb3 	bl	8006b38 <SENSOR_IO_Write>
}
 8005bd2:	bf00      	nop
 8005bd4:	3708      	adds	r7, #8
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}

08005bda <LIS3MDL_MagReadID>:
/**
  * @brief  Read LIS3MDL ID.
  * @retval ID 
  */
uint8_t LIS3MDL_MagReadID(void)
{
 8005bda:	b580      	push	{r7, lr}
 8005bdc:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 8005bde:	f000 ffa1 	bl	8006b24 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 8005be2:	210f      	movs	r1, #15
 8005be4:	203c      	movs	r0, #60	; 0x3c
 8005be6:	f000 ffc1 	bl	8006b6c <SENSOR_IO_Read>
 8005bea:	4603      	mov	r3, r0
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	73fb      	strb	r3, [r7, #15]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8005bfe:	2122      	movs	r1, #34	; 0x22
 8005c00:	203c      	movs	r0, #60	; 0x3c
 8005c02:	f000 ffb3 	bl	8006b6c <SENSOR_IO_Read>
 8005c06:	4603      	mov	r3, r0
 8005c08:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 8005c0a:	7bfb      	ldrb	r3, [r7, #15]
 8005c0c:	f023 0320 	bic.w	r3, r3, #32
 8005c10:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8005c12:	88fb      	ldrh	r3, [r7, #6]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d003      	beq.n	8005c20 <LIS3MDL_MagLowPower+0x30>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 8005c18:	7bfb      	ldrb	r3, [r7, #15]
 8005c1a:	f043 0320 	orr.w	r3, r3, #32
 8005c1e:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8005c20:	7bfb      	ldrb	r3, [r7, #15]
 8005c22:	461a      	mov	r2, r3
 8005c24:	2122      	movs	r1, #34	; 0x22
 8005c26:	203c      	movs	r0, #60	; 0x3c
 8005c28:	f000 ff86 	bl	8006b38 <SENSOR_IO_Write>
}
 8005c2c:	bf00      	nop
 8005c2e:	3710      	adds	r7, #16
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}

08005c34 <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b088      	sub	sp, #32
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlm= 0;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8005c40:	2300      	movs	r3, #0
 8005c42:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8005c44:	f04f 0300 	mov.w	r3, #0
 8005c48:	61bb      	str	r3, [r7, #24]
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 8005c4a:	2121      	movs	r1, #33	; 0x21
 8005c4c:	203c      	movs	r0, #60	; 0x3c
 8005c4e:	f000 ff8d 	bl	8006b6c <SENSOR_IO_Read>
 8005c52:	4603      	mov	r3, r0
 8005c54:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 8005c56:	f107 0208 	add.w	r2, r7, #8
 8005c5a:	2306      	movs	r3, #6
 8005c5c:	21a8      	movs	r1, #168	; 0xa8
 8005c5e:	203c      	movs	r0, #60	; 0x3c
 8005c60:	f000 ffa2 	bl	8006ba8 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8005c64:	2300      	movs	r3, #0
 8005c66:	77fb      	strb	r3, [r7, #31]
 8005c68:	e01c      	b.n	8005ca4 <LIS3MDL_MagReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8005c6a:	7ffb      	ldrb	r3, [r7, #31]
 8005c6c:	005b      	lsls	r3, r3, #1
 8005c6e:	3301      	adds	r3, #1
 8005c70:	3320      	adds	r3, #32
 8005c72:	443b      	add	r3, r7
 8005c74:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	021b      	lsls	r3, r3, #8
 8005c7c:	b29a      	uxth	r2, r3
 8005c7e:	7ffb      	ldrb	r3, [r7, #31]
 8005c80:	005b      	lsls	r3, r3, #1
 8005c82:	3320      	adds	r3, #32
 8005c84:	443b      	add	r3, r7
 8005c86:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	4413      	add	r3, r2
 8005c8e:	b29a      	uxth	r2, r3
 8005c90:	7ffb      	ldrb	r3, [r7, #31]
 8005c92:	b212      	sxth	r2, r2
 8005c94:	005b      	lsls	r3, r3, #1
 8005c96:	3320      	adds	r3, #32
 8005c98:	443b      	add	r3, r7
 8005c9a:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8005c9e:	7ffb      	ldrb	r3, [r7, #31]
 8005ca0:	3301      	adds	r3, #1
 8005ca2:	77fb      	strb	r3, [r7, #31]
 8005ca4:	7ffb      	ldrb	r3, [r7, #31]
 8005ca6:	2b02      	cmp	r3, #2
 8005ca8:	d9df      	bls.n	8005c6a <LIS3MDL_MagReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 8005caa:	7dfb      	ldrb	r3, [r7, #23]
 8005cac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005cb0:	2b60      	cmp	r3, #96	; 0x60
 8005cb2:	d013      	beq.n	8005cdc <LIS3MDL_MagReadXYZ+0xa8>
 8005cb4:	2b60      	cmp	r3, #96	; 0x60
 8005cb6:	dc14      	bgt.n	8005ce2 <LIS3MDL_MagReadXYZ+0xae>
 8005cb8:	2b40      	cmp	r3, #64	; 0x40
 8005cba:	d00c      	beq.n	8005cd6 <LIS3MDL_MagReadXYZ+0xa2>
 8005cbc:	2b40      	cmp	r3, #64	; 0x40
 8005cbe:	dc10      	bgt.n	8005ce2 <LIS3MDL_MagReadXYZ+0xae>
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d002      	beq.n	8005cca <LIS3MDL_MagReadXYZ+0x96>
 8005cc4:	2b20      	cmp	r3, #32
 8005cc6:	d003      	beq.n	8005cd0 <LIS3MDL_MagReadXYZ+0x9c>
 8005cc8:	e00b      	b.n	8005ce2 <LIS3MDL_MagReadXYZ+0xae>
  {
  case LIS3MDL_MAG_FS_4_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
 8005cca:	4b19      	ldr	r3, [pc, #100]	; (8005d30 <LIS3MDL_MagReadXYZ+0xfc>)
 8005ccc:	61bb      	str	r3, [r7, #24]
    break;
 8005cce:	e008      	b.n	8005ce2 <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_8_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 8005cd0:	4b18      	ldr	r3, [pc, #96]	; (8005d34 <LIS3MDL_MagReadXYZ+0x100>)
 8005cd2:	61bb      	str	r3, [r7, #24]
    break;
 8005cd4:	e005      	b.n	8005ce2 <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_12_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 8005cd6:	4b18      	ldr	r3, [pc, #96]	; (8005d38 <LIS3MDL_MagReadXYZ+0x104>)
 8005cd8:	61bb      	str	r3, [r7, #24]
    break;
 8005cda:	e002      	b.n	8005ce2 <LIS3MDL_MagReadXYZ+0xae>
  case LIS3MDL_MAG_FS_16_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 8005cdc:	4b17      	ldr	r3, [pc, #92]	; (8005d3c <LIS3MDL_MagReadXYZ+0x108>)
 8005cde:	61bb      	str	r3, [r7, #24]
    break;    
 8005ce0:	bf00      	nop
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	77fb      	strb	r3, [r7, #31]
 8005ce6:	e01a      	b.n	8005d1e <LIS3MDL_MagReadXYZ+0xea>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8005ce8:	7ffb      	ldrb	r3, [r7, #31]
 8005cea:	005b      	lsls	r3, r3, #1
 8005cec:	3320      	adds	r3, #32
 8005cee:	443b      	add	r3, r7
 8005cf0:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8005cf4:	ee07 3a90 	vmov	s15, r3
 8005cf8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005cfc:	edd7 7a06 	vldr	s15, [r7, #24]
 8005d00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d04:	7ffb      	ldrb	r3, [r7, #31]
 8005d06:	005b      	lsls	r3, r3, #1
 8005d08:	687a      	ldr	r2, [r7, #4]
 8005d0a:	4413      	add	r3, r2
 8005d0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d10:	ee17 2a90 	vmov	r2, s15
 8005d14:	b212      	sxth	r2, r2
 8005d16:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8005d18:	7ffb      	ldrb	r3, [r7, #31]
 8005d1a:	3301      	adds	r3, #1
 8005d1c:	77fb      	strb	r3, [r7, #31]
 8005d1e:	7ffb      	ldrb	r3, [r7, #31]
 8005d20:	2b02      	cmp	r3, #2
 8005d22:	d9e1      	bls.n	8005ce8 <LIS3MDL_MagReadXYZ+0xb4>
  }
}
 8005d24:	bf00      	nop
 8005d26:	bf00      	nop
 8005d28:	3720      	adds	r7, #32
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}
 8005d2e:	bf00      	nop
 8005d30:	3e0f5c29 	.word	0x3e0f5c29
 8005d34:	3e947ae1 	.word	0x3e947ae1
 8005d38:	3edc28f6 	.word	0x3edc28f6
 8005d3c:	3f147ae1 	.word	0x3f147ae1

08005d40 <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b082      	sub	sp, #8
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	4603      	mov	r3, r0
 8005d48:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 8005d4a:	88fb      	ldrh	r3, [r7, #6]
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f000 f879 	bl	8005e44 <LPS22HB_Init>
}
 8005d52:	bf00      	nop
 8005d54:	3708      	adds	r7, #8
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}

08005d5a <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 8005d5a:	b580      	push	{r7, lr}
 8005d5c:	b084      	sub	sp, #16
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	4603      	mov	r3, r0
 8005d62:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8005d64:	2300      	movs	r3, #0
 8005d66:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 8005d68:	f000 fedc 	bl	8006b24 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 8005d6c:	88fb      	ldrh	r3, [r7, #6]
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	210f      	movs	r1, #15
 8005d72:	4618      	mov	r0, r3
 8005d74:	f000 fefa 	bl	8006b6c <SENSOR_IO_Read>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8005d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3710      	adds	r7, #16
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}
	...

08005d88 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 8005d88:	b590      	push	{r4, r7, lr}
 8005d8a:	b087      	sub	sp, #28
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	4603      	mov	r3, r0
 8005d90:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 8005d92:	2300      	movs	r3, #0
 8005d94:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 8005d96:	2300      	movs	r3, #0
 8005d98:	74fb      	strb	r3, [r7, #19]
 8005d9a:	e013      	b.n	8005dc4 <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 8005d9c:	88fb      	ldrh	r3, [r7, #6]
 8005d9e:	b2da      	uxtb	r2, r3
 8005da0:	7cfb      	ldrb	r3, [r7, #19]
 8005da2:	3328      	adds	r3, #40	; 0x28
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	7cfc      	ldrb	r4, [r7, #19]
 8005da8:	4619      	mov	r1, r3
 8005daa:	4610      	mov	r0, r2
 8005dac:	f000 fede 	bl	8006b6c <SENSOR_IO_Read>
 8005db0:	4603      	mov	r3, r0
 8005db2:	461a      	mov	r2, r3
 8005db4:	f104 0318 	add.w	r3, r4, #24
 8005db8:	443b      	add	r3, r7
 8005dba:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 8005dbe:	7cfb      	ldrb	r3, [r7, #19]
 8005dc0:	3301      	adds	r3, #1
 8005dc2:	74fb      	strb	r3, [r7, #19]
 8005dc4:	7cfb      	ldrb	r3, [r7, #19]
 8005dc6:	2b02      	cmp	r3, #2
 8005dc8:	d9e8      	bls.n	8005d9c <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 8005dca:	2300      	movs	r3, #0
 8005dcc:	74fb      	strb	r3, [r7, #19]
 8005dce:	e00f      	b.n	8005df0 <LPS22HB_P_ReadPressure+0x68>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 8005dd0:	7cfb      	ldrb	r3, [r7, #19]
 8005dd2:	3318      	adds	r3, #24
 8005dd4:	443b      	add	r3, r7
 8005dd6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8005dda:	461a      	mov	r2, r3
 8005ddc:	7cfb      	ldrb	r3, [r7, #19]
 8005dde:	00db      	lsls	r3, r3, #3
 8005de0:	fa02 f303 	lsl.w	r3, r2, r3
 8005de4:	697a      	ldr	r2, [r7, #20]
 8005de6:	4313      	orrs	r3, r2
 8005de8:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 8005dea:	7cfb      	ldrb	r3, [r7, #19]
 8005dec:	3301      	adds	r3, #1
 8005dee:	74fb      	strb	r3, [r7, #19]
 8005df0:	7cfb      	ldrb	r3, [r7, #19]
 8005df2:	2b02      	cmp	r3, #2
 8005df4:	d9ec      	bls.n	8005dd0 <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d003      	beq.n	8005e08 <LPS22HB_P_ReadPressure+0x80>
    tmp |= 0xFF000000;
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e06:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2264      	movs	r2, #100	; 0x64
 8005e10:	fb02 f303 	mul.w	r3, r2, r3
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	da01      	bge.n	8005e1c <LPS22HB_P_ReadPressure+0x94>
 8005e18:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8005e1c:	131b      	asrs	r3, r3, #12
 8005e1e:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	ee07 3a90 	vmov	s15, r3
 8005e26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e2a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8005e40 <LPS22HB_P_ReadPressure+0xb8>
 8005e2e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005e32:	eef0 7a66 	vmov.f32	s15, s13
}
 8005e36:	eeb0 0a67 	vmov.f32	s0, s15
 8005e3a:	371c      	adds	r7, #28
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd90      	pop	{r4, r7, pc}
 8005e40:	42c80000 	.word	0x42c80000

08005e44 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b084      	sub	sp, #16
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 8005e4e:	88fb      	ldrh	r3, [r7, #6]
 8005e50:	b2db      	uxtb	r3, r3
 8005e52:	211a      	movs	r1, #26
 8005e54:	4618      	mov	r0, r3
 8005e56:	f000 fe89 	bl	8006b6c <SENSOR_IO_Read>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 8005e5e:	7bfb      	ldrb	r3, [r7, #15]
 8005e60:	f023 0301 	bic.w	r3, r3, #1
 8005e64:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 8005e66:	7bfb      	ldrb	r3, [r7, #15]
 8005e68:	f043 0301 	orr.w	r3, r3, #1
 8005e6c:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 8005e6e:	88fb      	ldrh	r3, [r7, #6]
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	7bfa      	ldrb	r2, [r7, #15]
 8005e74:	211a      	movs	r1, #26
 8005e76:	4618      	mov	r0, r3
 8005e78:	f000 fe5e 	bl	8006b38 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 8005e7c:	88fb      	ldrh	r3, [r7, #6]
 8005e7e:	b2db      	uxtb	r3, r3
 8005e80:	2110      	movs	r1, #16
 8005e82:	4618      	mov	r0, r3
 8005e84:	f000 fe72 	bl	8006b6c <SENSOR_IO_Read>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 8005e8c:	7bfb      	ldrb	r3, [r7, #15]
 8005e8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e92:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 8005e94:	7bfb      	ldrb	r3, [r7, #15]
 8005e96:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8005e9a:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 8005e9c:	7bfb      	ldrb	r3, [r7, #15]
 8005e9e:	f023 0302 	bic.w	r3, r3, #2
 8005ea2:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 8005ea4:	7bfb      	ldrb	r3, [r7, #15]
 8005ea6:	f043 0302 	orr.w	r3, r3, #2
 8005eaa:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 8005eac:	88fb      	ldrh	r3, [r7, #6]
 8005eae:	b2db      	uxtb	r3, r3
 8005eb0:	7bfa      	ldrb	r2, [r7, #15]
 8005eb2:	2110      	movs	r1, #16
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f000 fe3f 	bl	8006b38 <SENSOR_IO_Write>
}  
 8005eba:	bf00      	nop
 8005ebc:	3710      	adds	r7, #16
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}

08005ec2 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8005ec2:	b580      	push	{r7, lr}
 8005ec4:	b084      	sub	sp, #16
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	4603      	mov	r3, r0
 8005eca:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8005ed0:	2110      	movs	r1, #16
 8005ed2:	20d4      	movs	r0, #212	; 0xd4
 8005ed4:	f000 fe4a 	bl	8006b6c <SENSOR_IO_Read>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8005edc:	88fb      	ldrh	r3, [r7, #6]
 8005ede:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8005ee0:	7bbb      	ldrb	r3, [r7, #14]
 8005ee2:	f003 0303 	and.w	r3, r3, #3
 8005ee6:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8005ee8:	7bba      	ldrb	r2, [r7, #14]
 8005eea:	7bfb      	ldrb	r3, [r7, #15]
 8005eec:	4313      	orrs	r3, r2
 8005eee:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8005ef0:	7bbb      	ldrb	r3, [r7, #14]
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	2110      	movs	r1, #16
 8005ef6:	20d4      	movs	r0, #212	; 0xd4
 8005ef8:	f000 fe1e 	bl	8006b38 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8005efc:	2112      	movs	r1, #18
 8005efe:	20d4      	movs	r0, #212	; 0xd4
 8005f00:	f000 fe34 	bl	8006b6c <SENSOR_IO_Read>
 8005f04:	4603      	mov	r3, r0
 8005f06:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8005f08:	88fb      	ldrh	r3, [r7, #6]
 8005f0a:	0a1b      	lsrs	r3, r3, #8
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8005f10:	7bbb      	ldrb	r3, [r7, #14]
 8005f12:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8005f16:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8005f18:	7bba      	ldrb	r2, [r7, #14]
 8005f1a:	7bfb      	ldrb	r3, [r7, #15]
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8005f20:	7bbb      	ldrb	r3, [r7, #14]
 8005f22:	461a      	mov	r2, r3
 8005f24:	2112      	movs	r1, #18
 8005f26:	20d4      	movs	r0, #212	; 0xd4
 8005f28:	f000 fe06 	bl	8006b38 <SENSOR_IO_Write>
}
 8005f2c:	bf00      	nop
 8005f2e:	3710      	adds	r7, #16
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}

08005f34 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b082      	sub	sp, #8
 8005f38:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8005f3e:	2110      	movs	r1, #16
 8005f40:	20d4      	movs	r0, #212	; 0xd4
 8005f42:	f000 fe13 	bl	8006b6c <SENSOR_IO_Read>
 8005f46:	4603      	mov	r3, r0
 8005f48:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8005f4a:	79fb      	ldrb	r3, [r7, #7]
 8005f4c:	f003 030f 	and.w	r3, r3, #15
 8005f50:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8005f52:	79fb      	ldrb	r3, [r7, #7]
 8005f54:	461a      	mov	r2, r3
 8005f56:	2110      	movs	r1, #16
 8005f58:	20d4      	movs	r0, #212	; 0xd4
 8005f5a:	f000 fded 	bl	8006b38 <SENSOR_IO_Write>
}
 8005f5e:	bf00      	nop
 8005f60:	3708      	adds	r7, #8
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}

08005f66 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8005f66:	b580      	push	{r7, lr}
 8005f68:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8005f6a:	f000 fddb 	bl	8006b24 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8005f6e:	210f      	movs	r1, #15
 8005f70:	20d4      	movs	r0, #212	; 0xd4
 8005f72:	f000 fdfb 	bl	8006b6c <SENSOR_IO_Read>
 8005f76:	4603      	mov	r3, r0
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	bd80      	pop	{r7, pc}

08005f7c <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b084      	sub	sp, #16
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	4603      	mov	r3, r0
 8005f84:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8005f86:	2300      	movs	r3, #0
 8005f88:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8005f8a:	2115      	movs	r1, #21
 8005f8c:	20d4      	movs	r0, #212	; 0xd4
 8005f8e:	f000 fded 	bl	8006b6c <SENSOR_IO_Read>
 8005f92:	4603      	mov	r3, r0
 8005f94:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8005f96:	7bfb      	ldrb	r3, [r7, #15]
 8005f98:	f023 0310 	bic.w	r3, r3, #16
 8005f9c:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8005f9e:	88fb      	ldrh	r3, [r7, #6]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d003      	beq.n	8005fac <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8005fa4:	7bfb      	ldrb	r3, [r7, #15]
 8005fa6:	f043 0310 	orr.w	r3, r3, #16
 8005faa:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8005fac:	7bfb      	ldrb	r3, [r7, #15]
 8005fae:	461a      	mov	r2, r3
 8005fb0:	2115      	movs	r1, #21
 8005fb2:	20d4      	movs	r0, #212	; 0xd4
 8005fb4:	f000 fdc0 	bl	8006b38 <SENSOR_IO_Write>
}
 8005fb8:	bf00      	nop
 8005fba:	3710      	adds	r7, #16
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}

08005fc0 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b088      	sub	sp, #32
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8005fd0:	f04f 0300 	mov.w	r3, #0
 8005fd4:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8005fd6:	2110      	movs	r1, #16
 8005fd8:	20d4      	movs	r0, #212	; 0xd4
 8005fda:	f000 fdc7 	bl	8006b6c <SENSOR_IO_Read>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8005fe2:	f107 0208 	add.w	r2, r7, #8
 8005fe6:	2306      	movs	r3, #6
 8005fe8:	2128      	movs	r1, #40	; 0x28
 8005fea:	20d4      	movs	r0, #212	; 0xd4
 8005fec:	f000 fddc 	bl	8006ba8 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	77fb      	strb	r3, [r7, #31]
 8005ff4:	e01c      	b.n	8006030 <LSM6DSL_AccReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8005ff6:	7ffb      	ldrb	r3, [r7, #31]
 8005ff8:	005b      	lsls	r3, r3, #1
 8005ffa:	3301      	adds	r3, #1
 8005ffc:	3320      	adds	r3, #32
 8005ffe:	443b      	add	r3, r7
 8006000:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8006004:	b29b      	uxth	r3, r3
 8006006:	021b      	lsls	r3, r3, #8
 8006008:	b29a      	uxth	r2, r3
 800600a:	7ffb      	ldrb	r3, [r7, #31]
 800600c:	005b      	lsls	r3, r3, #1
 800600e:	3320      	adds	r3, #32
 8006010:	443b      	add	r3, r7
 8006012:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8006016:	b29b      	uxth	r3, r3
 8006018:	4413      	add	r3, r2
 800601a:	b29a      	uxth	r2, r3
 800601c:	7ffb      	ldrb	r3, [r7, #31]
 800601e:	b212      	sxth	r2, r2
 8006020:	005b      	lsls	r3, r3, #1
 8006022:	3320      	adds	r3, #32
 8006024:	443b      	add	r3, r7
 8006026:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 800602a:	7ffb      	ldrb	r3, [r7, #31]
 800602c:	3301      	adds	r3, #1
 800602e:	77fb      	strb	r3, [r7, #31]
 8006030:	7ffb      	ldrb	r3, [r7, #31]
 8006032:	2b02      	cmp	r3, #2
 8006034:	d9df      	bls.n	8005ff6 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8006036:	7dfb      	ldrb	r3, [r7, #23]
 8006038:	f003 030c 	and.w	r3, r3, #12
 800603c:	2b0c      	cmp	r3, #12
 800603e:	d829      	bhi.n	8006094 <LSM6DSL_AccReadXYZ+0xd4>
 8006040:	a201      	add	r2, pc, #4	; (adr r2, 8006048 <LSM6DSL_AccReadXYZ+0x88>)
 8006042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006046:	bf00      	nop
 8006048:	0800607d 	.word	0x0800607d
 800604c:	08006095 	.word	0x08006095
 8006050:	08006095 	.word	0x08006095
 8006054:	08006095 	.word	0x08006095
 8006058:	0800608f 	.word	0x0800608f
 800605c:	08006095 	.word	0x08006095
 8006060:	08006095 	.word	0x08006095
 8006064:	08006095 	.word	0x08006095
 8006068:	08006083 	.word	0x08006083
 800606c:	08006095 	.word	0x08006095
 8006070:	08006095 	.word	0x08006095
 8006074:	08006095 	.word	0x08006095
 8006078:	08006089 	.word	0x08006089
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 800607c:	4b18      	ldr	r3, [pc, #96]	; (80060e0 <LSM6DSL_AccReadXYZ+0x120>)
 800607e:	61bb      	str	r3, [r7, #24]
    break;
 8006080:	e008      	b.n	8006094 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8006082:	4b18      	ldr	r3, [pc, #96]	; (80060e4 <LSM6DSL_AccReadXYZ+0x124>)
 8006084:	61bb      	str	r3, [r7, #24]
    break;
 8006086:	e005      	b.n	8006094 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8006088:	4b17      	ldr	r3, [pc, #92]	; (80060e8 <LSM6DSL_AccReadXYZ+0x128>)
 800608a:	61bb      	str	r3, [r7, #24]
    break;
 800608c:	e002      	b.n	8006094 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 800608e:	4b17      	ldr	r3, [pc, #92]	; (80060ec <LSM6DSL_AccReadXYZ+0x12c>)
 8006090:	61bb      	str	r3, [r7, #24]
    break;    
 8006092:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8006094:	2300      	movs	r3, #0
 8006096:	77fb      	strb	r3, [r7, #31]
 8006098:	e01a      	b.n	80060d0 <LSM6DSL_AccReadXYZ+0x110>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 800609a:	7ffb      	ldrb	r3, [r7, #31]
 800609c:	005b      	lsls	r3, r3, #1
 800609e:	3320      	adds	r3, #32
 80060a0:	443b      	add	r3, r7
 80060a2:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80060a6:	ee07 3a90 	vmov	s15, r3
 80060aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80060ae:	edd7 7a06 	vldr	s15, [r7, #24]
 80060b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060b6:	7ffb      	ldrb	r3, [r7, #31]
 80060b8:	005b      	lsls	r3, r3, #1
 80060ba:	687a      	ldr	r2, [r7, #4]
 80060bc:	4413      	add	r3, r2
 80060be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80060c2:	ee17 2a90 	vmov	r2, s15
 80060c6:	b212      	sxth	r2, r2
 80060c8:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 80060ca:	7ffb      	ldrb	r3, [r7, #31]
 80060cc:	3301      	adds	r3, #1
 80060ce:	77fb      	strb	r3, [r7, #31]
 80060d0:	7ffb      	ldrb	r3, [r7, #31]
 80060d2:	2b02      	cmp	r3, #2
 80060d4:	d9e1      	bls.n	800609a <LSM6DSL_AccReadXYZ+0xda>
  }
}
 80060d6:	bf00      	nop
 80060d8:	bf00      	nop
 80060da:	3720      	adds	r7, #32
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}
 80060e0:	3d79db23 	.word	0x3d79db23
 80060e4:	3df9db23 	.word	0x3df9db23
 80060e8:	3e79db23 	.word	0x3e79db23
 80060ec:	3ef9db23 	.word	0x3ef9db23

080060f0 <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b084      	sub	sp, #16
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	4603      	mov	r3, r0
 80060f8:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80060fa:	2300      	movs	r3, #0
 80060fc:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 80060fe:	2111      	movs	r1, #17
 8006100:	20d4      	movs	r0, #212	; 0xd4
 8006102:	f000 fd33 	bl	8006b6c <SENSOR_IO_Read>
 8006106:	4603      	mov	r3, r0
 8006108:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 800610a:	88fb      	ldrh	r3, [r7, #6]
 800610c:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 800610e:	7bbb      	ldrb	r3, [r7, #14]
 8006110:	f003 0303 	and.w	r3, r3, #3
 8006114:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8006116:	7bba      	ldrb	r2, [r7, #14]
 8006118:	7bfb      	ldrb	r3, [r7, #15]
 800611a:	4313      	orrs	r3, r2
 800611c:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 800611e:	7bbb      	ldrb	r3, [r7, #14]
 8006120:	461a      	mov	r2, r3
 8006122:	2111      	movs	r1, #17
 8006124:	20d4      	movs	r0, #212	; 0xd4
 8006126:	f000 fd07 	bl	8006b38 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 800612a:	2112      	movs	r1, #18
 800612c:	20d4      	movs	r0, #212	; 0xd4
 800612e:	f000 fd1d 	bl	8006b6c <SENSOR_IO_Read>
 8006132:	4603      	mov	r3, r0
 8006134:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8006136:	88fb      	ldrh	r3, [r7, #6]
 8006138:	0a1b      	lsrs	r3, r3, #8
 800613a:	b29b      	uxth	r3, r3
 800613c:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 800613e:	7bbb      	ldrb	r3, [r7, #14]
 8006140:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8006144:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8006146:	7bba      	ldrb	r2, [r7, #14]
 8006148:	7bfb      	ldrb	r3, [r7, #15]
 800614a:	4313      	orrs	r3, r2
 800614c:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 800614e:	7bbb      	ldrb	r3, [r7, #14]
 8006150:	461a      	mov	r2, r3
 8006152:	2112      	movs	r1, #18
 8006154:	20d4      	movs	r0, #212	; 0xd4
 8006156:	f000 fcef 	bl	8006b38 <SENSOR_IO_Write>
}
 800615a:	bf00      	nop
 800615c:	3710      	adds	r7, #16
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}

08006162 <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 8006162:	b580      	push	{r7, lr}
 8006164:	b082      	sub	sp, #8
 8006166:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8006168:	2300      	movs	r3, #0
 800616a:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 800616c:	2111      	movs	r1, #17
 800616e:	20d4      	movs	r0, #212	; 0xd4
 8006170:	f000 fcfc 	bl	8006b6c <SENSOR_IO_Read>
 8006174:	4603      	mov	r3, r0
 8006176:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8006178:	79fb      	ldrb	r3, [r7, #7]
 800617a:	f003 030f 	and.w	r3, r3, #15
 800617e:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 8006180:	79fb      	ldrb	r3, [r7, #7]
 8006182:	461a      	mov	r2, r3
 8006184:	2111      	movs	r1, #17
 8006186:	20d4      	movs	r0, #212	; 0xd4
 8006188:	f000 fcd6 	bl	8006b38 <SENSOR_IO_Write>
}
 800618c:	bf00      	nop
 800618e:	3708      	adds	r7, #8
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}

08006194 <LSM6DSL_GyroReadID>:
/**
  * @brief  Read ID address of LSM6DSL
  * @retval ID 
  */
uint8_t LSM6DSL_GyroReadID(void)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 8006198:	f000 fcc4 	bl	8006b24 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 800619c:	210f      	movs	r1, #15
 800619e:	20d4      	movs	r0, #212	; 0xd4
 80061a0:	f000 fce4 	bl	8006b6c <SENSOR_IO_Read>
 80061a4:	4603      	mov	r3, r0
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	bd80      	pop	{r7, pc}

080061aa <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 80061aa:	b580      	push	{r7, lr}
 80061ac:	b084      	sub	sp, #16
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	4603      	mov	r3, r0
 80061b2:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80061b4:	2300      	movs	r3, #0
 80061b6:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 80061b8:	2116      	movs	r1, #22
 80061ba:	20d4      	movs	r0, #212	; 0xd4
 80061bc:	f000 fcd6 	bl	8006b6c <SENSOR_IO_Read>
 80061c0:	4603      	mov	r3, r0
 80061c2:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 80061c4:	7bfb      	ldrb	r3, [r7, #15]
 80061c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061ca:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80061cc:	88fb      	ldrh	r3, [r7, #6]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d003      	beq.n	80061da <LSM6DSL_GyroLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 80061d2:	7bfb      	ldrb	r3, [r7, #15]
 80061d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80061d8:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 80061da:	7bfb      	ldrb	r3, [r7, #15]
 80061dc:	461a      	mov	r2, r3
 80061de:	2116      	movs	r1, #22
 80061e0:	20d4      	movs	r0, #212	; 0xd4
 80061e2:	f000 fca9 	bl	8006b38 <SENSOR_IO_Write>
}
 80061e6:	bf00      	nop
 80061e8:	3710      	adds	r7, #16
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}
	...

080061f0 <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b088      	sub	sp, #32
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlg= 0;
 80061f8:	2300      	movs	r3, #0
 80061fa:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 80061fc:	2300      	movs	r3, #0
 80061fe:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8006200:	f04f 0300 	mov.w	r3, #0
 8006204:	61bb      	str	r3, [r7, #24]
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8006206:	2111      	movs	r1, #17
 8006208:	20d4      	movs	r0, #212	; 0xd4
 800620a:	f000 fcaf 	bl	8006b6c <SENSOR_IO_Read>
 800620e:	4603      	mov	r3, r0
 8006210:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 8006212:	f107 0208 	add.w	r2, r7, #8
 8006216:	2306      	movs	r3, #6
 8006218:	2122      	movs	r1, #34	; 0x22
 800621a:	20d4      	movs	r0, #212	; 0xd4
 800621c:	f000 fcc4 	bl	8006ba8 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8006220:	2300      	movs	r3, #0
 8006222:	77fb      	strb	r3, [r7, #31]
 8006224:	e01c      	b.n	8006260 <LSM6DSL_GyroReadXYZAngRate+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8006226:	7ffb      	ldrb	r3, [r7, #31]
 8006228:	005b      	lsls	r3, r3, #1
 800622a:	3301      	adds	r3, #1
 800622c:	3320      	adds	r3, #32
 800622e:	443b      	add	r3, r7
 8006230:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8006234:	b29b      	uxth	r3, r3
 8006236:	021b      	lsls	r3, r3, #8
 8006238:	b29a      	uxth	r2, r3
 800623a:	7ffb      	ldrb	r3, [r7, #31]
 800623c:	005b      	lsls	r3, r3, #1
 800623e:	3320      	adds	r3, #32
 8006240:	443b      	add	r3, r7
 8006242:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8006246:	b29b      	uxth	r3, r3
 8006248:	4413      	add	r3, r2
 800624a:	b29a      	uxth	r2, r3
 800624c:	7ffb      	ldrb	r3, [r7, #31]
 800624e:	b212      	sxth	r2, r2
 8006250:	005b      	lsls	r3, r3, #1
 8006252:	3320      	adds	r3, #32
 8006254:	443b      	add	r3, r7
 8006256:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 800625a:	7ffb      	ldrb	r3, [r7, #31]
 800625c:	3301      	adds	r3, #1
 800625e:	77fb      	strb	r3, [r7, #31]
 8006260:	7ffb      	ldrb	r3, [r7, #31]
 8006262:	2b02      	cmp	r3, #2
 8006264:	d9df      	bls.n	8006226 <LSM6DSL_GyroReadXYZAngRate+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 8006266:	7dfb      	ldrb	r3, [r7, #23]
 8006268:	f003 030c 	and.w	r3, r3, #12
 800626c:	2b0c      	cmp	r3, #12
 800626e:	d829      	bhi.n	80062c4 <LSM6DSL_GyroReadXYZAngRate+0xd4>
 8006270:	a201      	add	r2, pc, #4	; (adr r2, 8006278 <LSM6DSL_GyroReadXYZAngRate+0x88>)
 8006272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006276:	bf00      	nop
 8006278:	080062ad 	.word	0x080062ad
 800627c:	080062c5 	.word	0x080062c5
 8006280:	080062c5 	.word	0x080062c5
 8006284:	080062c5 	.word	0x080062c5
 8006288:	080062b3 	.word	0x080062b3
 800628c:	080062c5 	.word	0x080062c5
 8006290:	080062c5 	.word	0x080062c5
 8006294:	080062c5 	.word	0x080062c5
 8006298:	080062b9 	.word	0x080062b9
 800629c:	080062c5 	.word	0x080062c5
 80062a0:	080062c5 	.word	0x080062c5
 80062a4:	080062c5 	.word	0x080062c5
 80062a8:	080062bf 	.word	0x080062bf
  {
  case LSM6DSL_GYRO_FS_245:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_245DPS;
 80062ac:	4b16      	ldr	r3, [pc, #88]	; (8006308 <LSM6DSL_GyroReadXYZAngRate+0x118>)
 80062ae:	61bb      	str	r3, [r7, #24]
    break;
 80062b0:	e008      	b.n	80062c4 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_500:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 80062b2:	4b16      	ldr	r3, [pc, #88]	; (800630c <LSM6DSL_GyroReadXYZAngRate+0x11c>)
 80062b4:	61bb      	str	r3, [r7, #24]
    break;
 80062b6:	e005      	b.n	80062c4 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_1000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 80062b8:	4b15      	ldr	r3, [pc, #84]	; (8006310 <LSM6DSL_GyroReadXYZAngRate+0x120>)
 80062ba:	61bb      	str	r3, [r7, #24]
    break;
 80062bc:	e002      	b.n	80062c4 <LSM6DSL_GyroReadXYZAngRate+0xd4>
  case LSM6DSL_GYRO_FS_2000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 80062be:	4b15      	ldr	r3, [pc, #84]	; (8006314 <LSM6DSL_GyroReadXYZAngRate+0x124>)
 80062c0:	61bb      	str	r3, [r7, #24]
    break;    
 80062c2:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80062c4:	2300      	movs	r3, #0
 80062c6:	77fb      	strb	r3, [r7, #31]
 80062c8:	e016      	b.n	80062f8 <LSM6DSL_GyroReadXYZAngRate+0x108>
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 80062ca:	7ffb      	ldrb	r3, [r7, #31]
 80062cc:	005b      	lsls	r3, r3, #1
 80062ce:	3320      	adds	r3, #32
 80062d0:	443b      	add	r3, r7
 80062d2:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80062d6:	ee07 3a90 	vmov	s15, r3
 80062da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80062de:	7ffb      	ldrb	r3, [r7, #31]
 80062e0:	009b      	lsls	r3, r3, #2
 80062e2:	687a      	ldr	r2, [r7, #4]
 80062e4:	4413      	add	r3, r2
 80062e6:	edd7 7a06 	vldr	s15, [r7, #24]
 80062ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062ee:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 80062f2:	7ffb      	ldrb	r3, [r7, #31]
 80062f4:	3301      	adds	r3, #1
 80062f6:	77fb      	strb	r3, [r7, #31]
 80062f8:	7ffb      	ldrb	r3, [r7, #31]
 80062fa:	2b02      	cmp	r3, #2
 80062fc:	d9e5      	bls.n	80062ca <LSM6DSL_GyroReadXYZAngRate+0xda>
  }
}
 80062fe:	bf00      	nop
 8006300:	bf00      	nop
 8006302:	3720      	adds	r7, #32
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}
 8006308:	410c0000 	.word	0x410c0000
 800630c:	418c0000 	.word	0x418c0000
 8006310:	420c0000 	.word	0x420c0000
 8006314:	428c0000 	.word	0x428c0000

08006318 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006318:	b5b0      	push	{r4, r5, r7, lr}
 800631a:	b09c      	sub	sp, #112	; 0x70
 800631c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800631e:	f7fa f949 	bl	80005b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006322:	f000 f863 	bl	80063ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006326:	f000 f93f 	bl	80065a8 <MX_GPIO_Init>
  MX_I2C2_Init();
 800632a:	f000 f8b1 	bl	8006490 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 800632e:	f000 f8ef 	bl	8006510 <MX_USART1_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of changeMode */
  osThreadDef(changeMode, StartChangeMode, osPriorityNormal, 0, 128);
 8006332:	4b26      	ldr	r3, [pc, #152]	; (80063cc <main+0xb4>)
 8006334:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8006338:	461d      	mov	r5, r3
 800633a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800633c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800633e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006342:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  changeModeHandle = osThreadCreate(osThread(changeMode), NULL);
 8006346:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800634a:	2100      	movs	r1, #0
 800634c:	4618      	mov	r0, r3
 800634e:	f7fe f9b6 	bl	80046be <osThreadCreate>
 8006352:	4603      	mov	r3, r0
 8006354:	4a1e      	ldr	r2, [pc, #120]	; (80063d0 <main+0xb8>)
 8006356:	6013      	str	r3, [r2, #0]

  /* definition and creation of transmitData */
  osThreadDef(transmitData, StartTransmitData, osPriorityNormal, 0, 128);
 8006358:	4b1e      	ldr	r3, [pc, #120]	; (80063d4 <main+0xbc>)
 800635a:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800635e:	461d      	mov	r5, r3
 8006360:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006362:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006364:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006368:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  transmitDataHandle = osThreadCreate(osThread(transmitData), NULL);
 800636c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006370:	2100      	movs	r1, #0
 8006372:	4618      	mov	r0, r3
 8006374:	f7fe f9a3 	bl	80046be <osThreadCreate>
 8006378:	4603      	mov	r3, r0
 800637a:	4a17      	ldr	r2, [pc, #92]	; (80063d8 <main+0xc0>)
 800637c:	6013      	str	r3, [r2, #0]

  /* definition and creation of readSensorsData */
  osThreadDef(readSensorsData, StartReadSensorsData, osPriorityNormal, 0, 128);
 800637e:	4b17      	ldr	r3, [pc, #92]	; (80063dc <main+0xc4>)
 8006380:	f107 041c 	add.w	r4, r7, #28
 8006384:	461d      	mov	r5, r3
 8006386:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006388:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800638a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800638e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readSensorsDataHandle = osThreadCreate(osThread(readSensorsData), NULL);
 8006392:	f107 031c 	add.w	r3, r7, #28
 8006396:	2100      	movs	r1, #0
 8006398:	4618      	mov	r0, r3
 800639a:	f7fe f990 	bl	80046be <osThreadCreate>
 800639e:	4603      	mov	r3, r0
 80063a0:	4a0f      	ldr	r2, [pc, #60]	; (80063e0 <main+0xc8>)
 80063a2:	6013      	str	r3, [r2, #0]

  /* definition and creation of AutoTransition */
  osThreadDef(AutoTransition, StartAutoTransition, osPriorityIdle, 0, 128);
 80063a4:	4b0f      	ldr	r3, [pc, #60]	; (80063e4 <main+0xcc>)
 80063a6:	463c      	mov	r4, r7
 80063a8:	461d      	mov	r5, r3
 80063aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80063ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063ae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80063b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  AutoTransitionHandle = osThreadCreate(osThread(AutoTransition), NULL);
 80063b6:	463b      	mov	r3, r7
 80063b8:	2100      	movs	r1, #0
 80063ba:	4618      	mov	r0, r3
 80063bc:	f7fe f97f 	bl	80046be <osThreadCreate>
 80063c0:	4603      	mov	r3, r0
 80063c2:	4a09      	ldr	r2, [pc, #36]	; (80063e8 <main+0xd0>)
 80063c4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80063c6:	f7fe f973 	bl	80046b0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80063ca:	e7fe      	b.n	80063ca <main+0xb2>
 80063cc:	08007bfc 	.word	0x08007bfc
 80063d0:	20001180 	.word	0x20001180
 80063d4:	08007c18 	.word	0x08007c18
 80063d8:	20001184 	.word	0x20001184
 80063dc:	08007c34 	.word	0x08007c34
 80063e0:	20001188 	.word	0x20001188
 80063e4:	08007c50 	.word	0x08007c50
 80063e8:	2000118c 	.word	0x2000118c

080063ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b096      	sub	sp, #88	; 0x58
 80063f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80063f2:	f107 0314 	add.w	r3, r7, #20
 80063f6:	2244      	movs	r2, #68	; 0x44
 80063f8:	2100      	movs	r1, #0
 80063fa:	4618      	mov	r0, r3
 80063fc:	f000 ff68 	bl	80072d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006400:	463b      	mov	r3, r7
 8006402:	2200      	movs	r2, #0
 8006404:	601a      	str	r2, [r3, #0]
 8006406:	605a      	str	r2, [r3, #4]
 8006408:	609a      	str	r2, [r3, #8]
 800640a:	60da      	str	r2, [r3, #12]
 800640c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800640e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006412:	f7fb fb01 	bl	8001a18 <HAL_PWREx_ControlVoltageScaling>
 8006416:	4603      	mov	r3, r0
 8006418:	2b00      	cmp	r3, #0
 800641a:	d001      	beq.n	8006420 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800641c:	f000 fa8c 	bl	8006938 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8006420:	2310      	movs	r3, #16
 8006422:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8006424:	2301      	movs	r3, #1
 8006426:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8006428:	2300      	movs	r3, #0
 800642a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800642c:	2360      	movs	r3, #96	; 0x60
 800642e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006430:	2302      	movs	r3, #2
 8006432:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8006434:	2301      	movs	r3, #1
 8006436:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8006438:	2301      	movs	r3, #1
 800643a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800643c:	2328      	movs	r3, #40	; 0x28
 800643e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006440:	2302      	movs	r3, #2
 8006442:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8006444:	2302      	movs	r3, #2
 8006446:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8006448:	2302      	movs	r3, #2
 800644a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800644c:	f107 0314 	add.w	r3, r7, #20
 8006450:	4618      	mov	r0, r3
 8006452:	f7fb fb85 	bl	8001b60 <HAL_RCC_OscConfig>
 8006456:	4603      	mov	r3, r0
 8006458:	2b00      	cmp	r3, #0
 800645a:	d001      	beq.n	8006460 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800645c:	f000 fa6c 	bl	8006938 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006460:	230f      	movs	r3, #15
 8006462:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006464:	2303      	movs	r3, #3
 8006466:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006468:	2300      	movs	r3, #0
 800646a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800646c:	2300      	movs	r3, #0
 800646e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006470:	2300      	movs	r3, #0
 8006472:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8006474:	463b      	mov	r3, r7
 8006476:	2103      	movs	r1, #3
 8006478:	4618      	mov	r0, r3
 800647a:	f7fb ff8b 	bl	8002394 <HAL_RCC_ClockConfig>
 800647e:	4603      	mov	r3, r0
 8006480:	2b00      	cmp	r3, #0
 8006482:	d001      	beq.n	8006488 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8006484:	f000 fa58 	bl	8006938 <Error_Handler>
  }
}
 8006488:	bf00      	nop
 800648a:	3758      	adds	r7, #88	; 0x58
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}

08006490 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8006494:	4b1b      	ldr	r3, [pc, #108]	; (8006504 <MX_I2C2_Init+0x74>)
 8006496:	4a1c      	ldr	r2, [pc, #112]	; (8006508 <MX_I2C2_Init+0x78>)
 8006498:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 800649a:	4b1a      	ldr	r3, [pc, #104]	; (8006504 <MX_I2C2_Init+0x74>)
 800649c:	4a1b      	ldr	r2, [pc, #108]	; (800650c <MX_I2C2_Init+0x7c>)
 800649e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80064a0:	4b18      	ldr	r3, [pc, #96]	; (8006504 <MX_I2C2_Init+0x74>)
 80064a2:	2200      	movs	r2, #0
 80064a4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80064a6:	4b17      	ldr	r3, [pc, #92]	; (8006504 <MX_I2C2_Init+0x74>)
 80064a8:	2201      	movs	r2, #1
 80064aa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80064ac:	4b15      	ldr	r3, [pc, #84]	; (8006504 <MX_I2C2_Init+0x74>)
 80064ae:	2200      	movs	r2, #0
 80064b0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80064b2:	4b14      	ldr	r3, [pc, #80]	; (8006504 <MX_I2C2_Init+0x74>)
 80064b4:	2200      	movs	r2, #0
 80064b6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80064b8:	4b12      	ldr	r3, [pc, #72]	; (8006504 <MX_I2C2_Init+0x74>)
 80064ba:	2200      	movs	r2, #0
 80064bc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80064be:	4b11      	ldr	r3, [pc, #68]	; (8006504 <MX_I2C2_Init+0x74>)
 80064c0:	2200      	movs	r2, #0
 80064c2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80064c4:	4b0f      	ldr	r3, [pc, #60]	; (8006504 <MX_I2C2_Init+0x74>)
 80064c6:	2200      	movs	r2, #0
 80064c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80064ca:	480e      	ldr	r0, [pc, #56]	; (8006504 <MX_I2C2_Init+0x74>)
 80064cc:	f7fa fc5a 	bl	8000d84 <HAL_I2C_Init>
 80064d0:	4603      	mov	r3, r0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d001      	beq.n	80064da <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80064d6:	f000 fa2f 	bl	8006938 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80064da:	2100      	movs	r1, #0
 80064dc:	4809      	ldr	r0, [pc, #36]	; (8006504 <MX_I2C2_Init+0x74>)
 80064de:	f7fb f9e3 	bl	80018a8 <HAL_I2CEx_ConfigAnalogFilter>
 80064e2:	4603      	mov	r3, r0
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d001      	beq.n	80064ec <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80064e8:	f000 fa26 	bl	8006938 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80064ec:	2100      	movs	r1, #0
 80064ee:	4805      	ldr	r0, [pc, #20]	; (8006504 <MX_I2C2_Init+0x74>)
 80064f0:	f7fb fa25 	bl	800193e <HAL_I2CEx_ConfigDigitalFilter>
 80064f4:	4603      	mov	r3, r0
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d001      	beq.n	80064fe <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80064fa:	f000 fa1d 	bl	8006938 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80064fe:	bf00      	nop
 8006500:	bd80      	pop	{r7, pc}
 8006502:	bf00      	nop
 8006504:	2000109c 	.word	0x2000109c
 8006508:	40005800 	.word	0x40005800
 800650c:	10909cec 	.word	0x10909cec

08006510 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006514:	4b22      	ldr	r3, [pc, #136]	; (80065a0 <MX_USART1_UART_Init+0x90>)
 8006516:	4a23      	ldr	r2, [pc, #140]	; (80065a4 <MX_USART1_UART_Init+0x94>)
 8006518:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800651a:	4b21      	ldr	r3, [pc, #132]	; (80065a0 <MX_USART1_UART_Init+0x90>)
 800651c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006520:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006522:	4b1f      	ldr	r3, [pc, #124]	; (80065a0 <MX_USART1_UART_Init+0x90>)
 8006524:	2200      	movs	r2, #0
 8006526:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006528:	4b1d      	ldr	r3, [pc, #116]	; (80065a0 <MX_USART1_UART_Init+0x90>)
 800652a:	2200      	movs	r2, #0
 800652c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800652e:	4b1c      	ldr	r3, [pc, #112]	; (80065a0 <MX_USART1_UART_Init+0x90>)
 8006530:	2200      	movs	r2, #0
 8006532:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006534:	4b1a      	ldr	r3, [pc, #104]	; (80065a0 <MX_USART1_UART_Init+0x90>)
 8006536:	220c      	movs	r2, #12
 8006538:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800653a:	4b19      	ldr	r3, [pc, #100]	; (80065a0 <MX_USART1_UART_Init+0x90>)
 800653c:	2200      	movs	r2, #0
 800653e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006540:	4b17      	ldr	r3, [pc, #92]	; (80065a0 <MX_USART1_UART_Init+0x90>)
 8006542:	2200      	movs	r2, #0
 8006544:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006546:	4b16      	ldr	r3, [pc, #88]	; (80065a0 <MX_USART1_UART_Init+0x90>)
 8006548:	2200      	movs	r2, #0
 800654a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800654c:	4b14      	ldr	r3, [pc, #80]	; (80065a0 <MX_USART1_UART_Init+0x90>)
 800654e:	2200      	movs	r2, #0
 8006550:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006552:	4b13      	ldr	r3, [pc, #76]	; (80065a0 <MX_USART1_UART_Init+0x90>)
 8006554:	2200      	movs	r2, #0
 8006556:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006558:	4811      	ldr	r0, [pc, #68]	; (80065a0 <MX_USART1_UART_Init+0x90>)
 800655a:	f7fd f9f5 	bl	8003948 <HAL_UART_Init>
 800655e:	4603      	mov	r3, r0
 8006560:	2b00      	cmp	r3, #0
 8006562:	d001      	beq.n	8006568 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8006564:	f000 f9e8 	bl	8006938 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006568:	2100      	movs	r1, #0
 800656a:	480d      	ldr	r0, [pc, #52]	; (80065a0 <MX_USART1_UART_Init+0x90>)
 800656c:	f7fd ffbe 	bl	80044ec <HAL_UARTEx_SetTxFifoThreshold>
 8006570:	4603      	mov	r3, r0
 8006572:	2b00      	cmp	r3, #0
 8006574:	d001      	beq.n	800657a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8006576:	f000 f9df 	bl	8006938 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800657a:	2100      	movs	r1, #0
 800657c:	4808      	ldr	r0, [pc, #32]	; (80065a0 <MX_USART1_UART_Init+0x90>)
 800657e:	f7fd fff3 	bl	8004568 <HAL_UARTEx_SetRxFifoThreshold>
 8006582:	4603      	mov	r3, r0
 8006584:	2b00      	cmp	r3, #0
 8006586:	d001      	beq.n	800658c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8006588:	f000 f9d6 	bl	8006938 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800658c:	4804      	ldr	r0, [pc, #16]	; (80065a0 <MX_USART1_UART_Init+0x90>)
 800658e:	f7fd ff74 	bl	800447a <HAL_UARTEx_DisableFifoMode>
 8006592:	4603      	mov	r3, r0
 8006594:	2b00      	cmp	r3, #0
 8006596:	d001      	beq.n	800659c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8006598:	f000 f9ce 	bl	8006938 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800659c:	bf00      	nop
 800659e:	bd80      	pop	{r7, pc}
 80065a0:	200010f0 	.word	0x200010f0
 80065a4:	40013800 	.word	0x40013800

080065a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b08a      	sub	sp, #40	; 0x28
 80065ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80065ae:	f107 0314 	add.w	r3, r7, #20
 80065b2:	2200      	movs	r2, #0
 80065b4:	601a      	str	r2, [r3, #0]
 80065b6:	605a      	str	r2, [r3, #4]
 80065b8:	609a      	str	r2, [r3, #8]
 80065ba:	60da      	str	r2, [r3, #12]
 80065bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80065be:	4b39      	ldr	r3, [pc, #228]	; (80066a4 <MX_GPIO_Init+0xfc>)
 80065c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065c2:	4a38      	ldr	r2, [pc, #224]	; (80066a4 <MX_GPIO_Init+0xfc>)
 80065c4:	f043 0310 	orr.w	r3, r3, #16
 80065c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80065ca:	4b36      	ldr	r3, [pc, #216]	; (80066a4 <MX_GPIO_Init+0xfc>)
 80065cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065ce:	f003 0310 	and.w	r3, r3, #16
 80065d2:	613b      	str	r3, [r7, #16]
 80065d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80065d6:	4b33      	ldr	r3, [pc, #204]	; (80066a4 <MX_GPIO_Init+0xfc>)
 80065d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065da:	4a32      	ldr	r2, [pc, #200]	; (80066a4 <MX_GPIO_Init+0xfc>)
 80065dc:	f043 0304 	orr.w	r3, r3, #4
 80065e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80065e2:	4b30      	ldr	r3, [pc, #192]	; (80066a4 <MX_GPIO_Init+0xfc>)
 80065e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065e6:	f003 0304 	and.w	r3, r3, #4
 80065ea:	60fb      	str	r3, [r7, #12]
 80065ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80065ee:	4b2d      	ldr	r3, [pc, #180]	; (80066a4 <MX_GPIO_Init+0xfc>)
 80065f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065f2:	4a2c      	ldr	r2, [pc, #176]	; (80066a4 <MX_GPIO_Init+0xfc>)
 80065f4:	f043 0302 	orr.w	r3, r3, #2
 80065f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80065fa:	4b2a      	ldr	r3, [pc, #168]	; (80066a4 <MX_GPIO_Init+0xfc>)
 80065fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065fe:	f003 0302 	and.w	r3, r3, #2
 8006602:	60bb      	str	r3, [r7, #8]
 8006604:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006606:	4b27      	ldr	r3, [pc, #156]	; (80066a4 <MX_GPIO_Init+0xfc>)
 8006608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800660a:	4a26      	ldr	r2, [pc, #152]	; (80066a4 <MX_GPIO_Init+0xfc>)
 800660c:	f043 0301 	orr.w	r3, r3, #1
 8006610:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006612:	4b24      	ldr	r3, [pc, #144]	; (80066a4 <MX_GPIO_Init+0xfc>)
 8006614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006616:	f003 0301 	and.w	r3, r3, #1
 800661a:	607b      	str	r3, [r7, #4]
 800661c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 800661e:	2200      	movs	r2, #0
 8006620:	2108      	movs	r1, #8
 8006622:	4821      	ldr	r0, [pc, #132]	; (80066a8 <MX_GPIO_Init+0x100>)
 8006624:	f7fa fb64 	bl	8000cf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8006628:	2200      	movs	r2, #0
 800662a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800662e:	481f      	ldr	r0, [pc, #124]	; (80066ac <MX_GPIO_Init+0x104>)
 8006630:	f7fa fb5e 	bl	8000cf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RED_LED_Pin */
  GPIO_InitStruct.Pin = RED_LED_Pin;
 8006634:	2308      	movs	r3, #8
 8006636:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006638:	2301      	movs	r3, #1
 800663a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800663c:	2300      	movs	r3, #0
 800663e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006640:	2300      	movs	r3, #0
 8006642:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RED_LED_GPIO_Port, &GPIO_InitStruct);
 8006644:	f107 0314 	add.w	r3, r7, #20
 8006648:	4619      	mov	r1, r3
 800664a:	4817      	ldr	r0, [pc, #92]	; (80066a8 <MX_GPIO_Init+0x100>)
 800664c:	f7fa f8cc 	bl	80007e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 8006650:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006654:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006656:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800665a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800665c:	2300      	movs	r3, #0
 800665e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8006660:	f107 0314 	add.w	r3, r7, #20
 8006664:	4619      	mov	r1, r3
 8006666:	4812      	ldr	r0, [pc, #72]	; (80066b0 <MX_GPIO_Init+0x108>)
 8006668:	f7fa f8be 	bl	80007e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : GREEN_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin;
 800666c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006670:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006672:	2301      	movs	r3, #1
 8006674:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006676:	2300      	movs	r3, #0
 8006678:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800667a:	2300      	movs	r3, #0
 800667c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 800667e:	f107 0314 	add.w	r3, r7, #20
 8006682:	4619      	mov	r1, r3
 8006684:	4809      	ldr	r0, [pc, #36]	; (80066ac <MX_GPIO_Init+0x104>)
 8006686:	f7fa f8af 	bl	80007e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800668a:	2200      	movs	r2, #0
 800668c:	2105      	movs	r1, #5
 800668e:	2028      	movs	r0, #40	; 0x28
 8006690:	f7fa f880 	bl	8000794 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006694:	2028      	movs	r0, #40	; 0x28
 8006696:	f7fa f899 	bl	80007cc <HAL_NVIC_EnableIRQ>

}
 800669a:	bf00      	nop
 800669c:	3728      	adds	r7, #40	; 0x28
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}
 80066a2:	bf00      	nop
 80066a4:	40021000 	.word	0x40021000
 80066a8:	48001000 	.word	0x48001000
 80066ac:	48000400 	.word	0x48000400
 80066b0:	48000800 	.word	0x48000800

080066b4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b082      	sub	sp, #8
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	4603      	mov	r3, r0
 80066bc:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_TogglePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin);
 80066be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80066c2:	4805      	ldr	r0, [pc, #20]	; (80066d8 <HAL_GPIO_EXTI_Callback+0x24>)
 80066c4:	f7fa fb2c 	bl	8000d20 <HAL_GPIO_TogglePin>
	buttonPressed = 1;
 80066c8:	4b04      	ldr	r3, [pc, #16]	; (80066dc <HAL_GPIO_EXTI_Callback+0x28>)
 80066ca:	2201      	movs	r2, #1
 80066cc:	701a      	strb	r2, [r3, #0]
}
 80066ce:	bf00      	nop
 80066d0:	3708      	adds	r7, #8
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}
 80066d6:	bf00      	nop
 80066d8:	48000400 	.word	0x48000400
 80066dc:	20001190 	.word	0x20001190

080066e0 <StartChangeMode>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartChangeMode */
void StartChangeMode(void const * argument)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b082      	sub	sp, #8
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 80066e8:	2064      	movs	r0, #100	; 0x64
 80066ea:	f7fe f834 	bl	8004756 <osDelay>
    counter++;
 80066ee:	4b12      	ldr	r3, [pc, #72]	; (8006738 <StartChangeMode+0x58>)
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	3301      	adds	r3, #1
 80066f4:	b2da      	uxtb	r2, r3
 80066f6:	4b10      	ldr	r3, [pc, #64]	; (8006738 <StartChangeMode+0x58>)
 80066f8:	701a      	strb	r2, [r3, #0]
    ITM_Port32(31) = 1;
 80066fa:	4b10      	ldr	r3, [pc, #64]	; (800673c <StartChangeMode+0x5c>)
 80066fc:	2201      	movs	r2, #1
 80066fe:	601a      	str	r2, [r3, #0]
    if(buttonPressed) {
 8006700:	4b0f      	ldr	r3, [pc, #60]	; (8006740 <StartChangeMode+0x60>)
 8006702:	781b      	ldrb	r3, [r3, #0]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d0ef      	beq.n	80066e8 <StartChangeMode+0x8>
        ITM_Port32(31) = 3;
 8006708:	4b0c      	ldr	r3, [pc, #48]	; (800673c <StartChangeMode+0x5c>)
 800670a:	2203      	movs	r2, #3
 800670c:	601a      	str	r2, [r3, #0]
    	buttonPressed = 0;
 800670e:	4b0c      	ldr	r3, [pc, #48]	; (8006740 <StartChangeMode+0x60>)
 8006710:	2200      	movs	r2, #0
 8006712:	701a      	strb	r2, [r3, #0]
    	mode = (mode + 1) % 4;
 8006714:	4b0b      	ldr	r3, [pc, #44]	; (8006744 <StartChangeMode+0x64>)
 8006716:	781b      	ldrb	r3, [r3, #0]
 8006718:	3301      	adds	r3, #1
 800671a:	425a      	negs	r2, r3
 800671c:	f003 0303 	and.w	r3, r3, #3
 8006720:	f002 0203 	and.w	r2, r2, #3
 8006724:	bf58      	it	pl
 8006726:	4253      	negpl	r3, r2
 8006728:	b2da      	uxtb	r2, r3
 800672a:	4b06      	ldr	r3, [pc, #24]	; (8006744 <StartChangeMode+0x64>)
 800672c:	701a      	strb	r2, [r3, #0]
    	counter = 0;
 800672e:	4b02      	ldr	r3, [pc, #8]	; (8006738 <StartChangeMode+0x58>)
 8006730:	2200      	movs	r2, #0
 8006732:	701a      	strb	r2, [r3, #0]
    osDelay(100);
 8006734:	e7d8      	b.n	80066e8 <StartChangeMode+0x8>
 8006736:	bf00      	nop
 8006738:	20001192 	.word	0x20001192
 800673c:	e000007c 	.word	0xe000007c
 8006740:	20001190 	.word	0x20001190
 8006744:	20001191 	.word	0x20001191

08006748 <StartTransmitData>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTransmitData */
void StartTransmitData(void const * argument)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b086      	sub	sp, #24
 800674c:	af02      	add	r7, sp, #8
 800674e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTransmitData */
// UART status
	HAL_StatusTypeDef UART_status;
	HAL_UART_Init(&huart1);
 8006750:	483b      	ldr	r0, [pc, #236]	; (8006840 <StartTransmitData+0xf8>)
 8006752:	f7fd f8f9 	bl	8003948 <HAL_UART_Init>
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 8006756:	2064      	movs	r0, #100	; 0x64
 8006758:	f7fd fffd 	bl	8004756 <osDelay>
    ITM_Port32(31) = 2;
 800675c:	4b39      	ldr	r3, [pc, #228]	; (8006844 <StartTransmitData+0xfc>)
 800675e:	2202      	movs	r2, #2
 8006760:	601a      	str	r2, [r3, #0]
    switch(mode) {
 8006762:	4b39      	ldr	r3, [pc, #228]	; (8006848 <StartTransmitData+0x100>)
 8006764:	781b      	ldrb	r3, [r3, #0]
 8006766:	2b03      	cmp	r3, #3
 8006768:	d855      	bhi.n	8006816 <StartTransmitData+0xce>
 800676a:	a201      	add	r2, pc, #4	; (adr r2, 8006770 <StartTransmitData+0x28>)
 800676c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006770:	08006781 	.word	0x08006781
 8006774:	080067a5 	.word	0x080067a5
 8006778:	080067db 	.word	0x080067db
 800677c:	080067ff 	.word	0x080067ff
    	case 0:
    		// accelerometer
    		sprintf(str, "\n Acceleration X, Y, Z: %.2d, %.2d, %.2d\n", (int) accelerometer[0], (int) accelerometer[1], (int) accelerometer[2]);
 8006780:	4b32      	ldr	r3, [pc, #200]	; (800684c <StartTransmitData+0x104>)
 8006782:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006786:	461a      	mov	r2, r3
 8006788:	4b30      	ldr	r3, [pc, #192]	; (800684c <StartTransmitData+0x104>)
 800678a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800678e:	4619      	mov	r1, r3
 8006790:	4b2e      	ldr	r3, [pc, #184]	; (800684c <StartTransmitData+0x104>)
 8006792:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006796:	9300      	str	r3, [sp, #0]
 8006798:	460b      	mov	r3, r1
 800679a:	492d      	ldr	r1, [pc, #180]	; (8006850 <StartTransmitData+0x108>)
 800679c:	482d      	ldr	r0, [pc, #180]	; (8006854 <StartTransmitData+0x10c>)
 800679e:	f000 fd9f 	bl	80072e0 <siprintf>
    		break;
 80067a2:	e038      	b.n	8006816 <StartTransmitData+0xce>
    	case 1:
    		// gyroscope
    		sprintf(str, "\n Gyro X, Y, Z: %.2d, %.2d, %.2d\n", (int) gyroscope[0], (int) gyroscope[1], (int) gyroscope[2]);
 80067a4:	4b2c      	ldr	r3, [pc, #176]	; (8006858 <StartTransmitData+0x110>)
 80067a6:	edd3 7a00 	vldr	s15, [r3]
 80067aa:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80067ae:	4b2a      	ldr	r3, [pc, #168]	; (8006858 <StartTransmitData+0x110>)
 80067b0:	edd3 7a01 	vldr	s15, [r3, #4]
 80067b4:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 80067b8:	4b27      	ldr	r3, [pc, #156]	; (8006858 <StartTransmitData+0x110>)
 80067ba:	edd3 7a02 	vldr	s15, [r3, #8]
 80067be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80067c2:	ee17 3a90 	vmov	r3, s15
 80067c6:	9300      	str	r3, [sp, #0]
 80067c8:	ee16 3a90 	vmov	r3, s13
 80067cc:	ee17 2a10 	vmov	r2, s14
 80067d0:	4922      	ldr	r1, [pc, #136]	; (800685c <StartTransmitData+0x114>)
 80067d2:	4820      	ldr	r0, [pc, #128]	; (8006854 <StartTransmitData+0x10c>)
 80067d4:	f000 fd84 	bl	80072e0 <siprintf>
    		break;
 80067d8:	e01d      	b.n	8006816 <StartTransmitData+0xce>
    	case 2:
    		// magnetometer
    		sprintf(str, "\n Magnetic X, Y, Z: %.2d, %.2d, %.2d\n", (int) magnetometer[0], (int) magnetometer[1], (int) magnetometer[2]);
 80067da:	4b21      	ldr	r3, [pc, #132]	; (8006860 <StartTransmitData+0x118>)
 80067dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80067e0:	461a      	mov	r2, r3
 80067e2:	4b1f      	ldr	r3, [pc, #124]	; (8006860 <StartTransmitData+0x118>)
 80067e4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80067e8:	4619      	mov	r1, r3
 80067ea:	4b1d      	ldr	r3, [pc, #116]	; (8006860 <StartTransmitData+0x118>)
 80067ec:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80067f0:	9300      	str	r3, [sp, #0]
 80067f2:	460b      	mov	r3, r1
 80067f4:	491b      	ldr	r1, [pc, #108]	; (8006864 <StartTransmitData+0x11c>)
 80067f6:	4817      	ldr	r0, [pc, #92]	; (8006854 <StartTransmitData+0x10c>)
 80067f8:	f000 fd72 	bl	80072e0 <siprintf>
    		break;
 80067fc:	e00b      	b.n	8006816 <StartTransmitData+0xce>
    	case 3:
    		// humidity sensor
    		sprintf(str, "\n Pressure: %.2d\n", (int) psensor);
 80067fe:	4b1a      	ldr	r3, [pc, #104]	; (8006868 <StartTransmitData+0x120>)
 8006800:	edd3 7a00 	vldr	s15, [r3]
 8006804:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006808:	ee17 2a90 	vmov	r2, s15
 800680c:	4917      	ldr	r1, [pc, #92]	; (800686c <StartTransmitData+0x124>)
 800680e:	4811      	ldr	r0, [pc, #68]	; (8006854 <StartTransmitData+0x10c>)
 8006810:	f000 fd66 	bl	80072e0 <siprintf>
    		break;
 8006814:	bf00      	nop
    	}

    UART_status = HAL_UART_Transmit(&huart1, str, (uint16_t) strlen(str), 100);
 8006816:	480f      	ldr	r0, [pc, #60]	; (8006854 <StartTransmitData+0x10c>)
 8006818:	f7f9 fcf2 	bl	8000200 <strlen>
 800681c:	4603      	mov	r3, r0
 800681e:	b29a      	uxth	r2, r3
 8006820:	2364      	movs	r3, #100	; 0x64
 8006822:	490c      	ldr	r1, [pc, #48]	; (8006854 <StartTransmitData+0x10c>)
 8006824:	4806      	ldr	r0, [pc, #24]	; (8006840 <StartTransmitData+0xf8>)
 8006826:	f7fd f8df 	bl	80039e8 <HAL_UART_Transmit>
 800682a:	4603      	mov	r3, r0
 800682c:	73fb      	strb	r3, [r7, #15]
    if (UART_status != HAL_OK)
 800682e:	7bfb      	ldrb	r3, [r7, #15]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d090      	beq.n	8006756 <StartTransmitData+0xe>
    	HAL_GPIO_TogglePin(RED_LED_GPIO_Port, RED_LED_Pin);
 8006834:	2108      	movs	r1, #8
 8006836:	480e      	ldr	r0, [pc, #56]	; (8006870 <StartTransmitData+0x128>)
 8006838:	f7fa fa72 	bl	8000d20 <HAL_GPIO_TogglePin>
    osDelay(100);
 800683c:	e78b      	b.n	8006756 <StartTransmitData+0xe>
 800683e:	bf00      	nop
 8006840:	200010f0 	.word	0x200010f0
 8006844:	e000007c 	.word	0xe000007c
 8006848:	20001191 	.word	0x20001191
 800684c:	20001194 	.word	0x20001194
 8006850:	08007c6c 	.word	0x08007c6c
 8006854:	200011b4 	.word	0x200011b4
 8006858:	2000119c 	.word	0x2000119c
 800685c:	08007c98 	.word	0x08007c98
 8006860:	200011a8 	.word	0x200011a8
 8006864:	08007cbc 	.word	0x08007cbc
 8006868:	200011b0 	.word	0x200011b0
 800686c:	08007ce4 	.word	0x08007ce4
 8006870:	48001000 	.word	0x48001000

08006874 <StartReadSensorsData>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadSensorsData */
void StartReadSensorsData(void const * argument)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b082      	sub	sp, #8
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadSensorsData */
	BSP_ACCELERO_Init();
 800687c:	f000 f9b2 	bl	8006be4 <BSP_ACCELERO_Init>
	BSP_GYRO_Init();
 8006880:	f000 fa06 	bl	8006c90 <BSP_GYRO_Init>
	BSP_MAGNETO_Init();
 8006884:	f000 fa5e 	bl	8006d44 <BSP_MAGNETO_Init>
	BSP_PSENSOR_Init();
 8006888:	f000 faa0 	bl	8006dcc <BSP_PSENSOR_Init>
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 800688c:	2064      	movs	r0, #100	; 0x64
 800688e:	f7fd ff62 	bl	8004756 <osDelay>
    ITM_Port32(31) = 3;
 8006892:	4b0a      	ldr	r3, [pc, #40]	; (80068bc <StartReadSensorsData+0x48>)
 8006894:	2203      	movs	r2, #3
 8006896:	601a      	str	r2, [r3, #0]
    BSP_ACCELERO_AccGetXYZ(accelerometer);
 8006898:	4809      	ldr	r0, [pc, #36]	; (80068c0 <StartReadSensorsData+0x4c>)
 800689a:	f000 f9e1 	bl	8006c60 <BSP_ACCELERO_AccGetXYZ>
    BSP_GYRO_GetXYZ(gyroscope);
 800689e:	4809      	ldr	r0, [pc, #36]	; (80068c4 <StartReadSensorsData+0x50>)
 80068a0:	f000 fa38 	bl	8006d14 <BSP_GYRO_GetXYZ>
    BSP_MAGNETO_GetXYZ(magnetometer);
 80068a4:	4808      	ldr	r0, [pc, #32]	; (80068c8 <StartReadSensorsData+0x54>)
 80068a6:	f000 fa79 	bl	8006d9c <BSP_MAGNETO_GetXYZ>
    psensor = BSP_PSENSOR_ReadPressure();
 80068aa:	f000 faaf 	bl	8006e0c <BSP_PSENSOR_ReadPressure>
 80068ae:	eef0 7a40 	vmov.f32	s15, s0
 80068b2:	4b06      	ldr	r3, [pc, #24]	; (80068cc <StartReadSensorsData+0x58>)
 80068b4:	edc3 7a00 	vstr	s15, [r3]
    osDelay(100);
 80068b8:	e7e8      	b.n	800688c <StartReadSensorsData+0x18>
 80068ba:	bf00      	nop
 80068bc:	e000007c 	.word	0xe000007c
 80068c0:	20001194 	.word	0x20001194
 80068c4:	2000119c 	.word	0x2000119c
 80068c8:	200011a8 	.word	0x200011a8
 80068cc:	200011b0 	.word	0x200011b0

080068d0 <StartAutoTransition>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAutoTransition */
void StartAutoTransition(void const * argument)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b082      	sub	sp, #8
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAutoTransition */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 80068d8:	2064      	movs	r0, #100	; 0x64
 80068da:	f7fd ff3c 	bl	8004756 <osDelay>
    if(counter == 30) {
 80068de:	4b0a      	ldr	r3, [pc, #40]	; (8006908 <StartAutoTransition+0x38>)
 80068e0:	781b      	ldrb	r3, [r3, #0]
 80068e2:	2b1e      	cmp	r3, #30
 80068e4:	d1f8      	bne.n	80068d8 <StartAutoTransition+0x8>
    	ITM_Port32(31) = 5;
 80068e6:	4b09      	ldr	r3, [pc, #36]	; (800690c <StartAutoTransition+0x3c>)
 80068e8:	2205      	movs	r2, #5
 80068ea:	601a      	str	r2, [r3, #0]
    	mode = (mode + 1) % 4;
 80068ec:	4b08      	ldr	r3, [pc, #32]	; (8006910 <StartAutoTransition+0x40>)
 80068ee:	781b      	ldrb	r3, [r3, #0]
 80068f0:	3301      	adds	r3, #1
 80068f2:	425a      	negs	r2, r3
 80068f4:	f003 0303 	and.w	r3, r3, #3
 80068f8:	f002 0203 	and.w	r2, r2, #3
 80068fc:	bf58      	it	pl
 80068fe:	4253      	negpl	r3, r2
 8006900:	b2da      	uxtb	r2, r3
 8006902:	4b03      	ldr	r3, [pc, #12]	; (8006910 <StartAutoTransition+0x40>)
 8006904:	701a      	strb	r2, [r3, #0]
    osDelay(100);
 8006906:	e7e7      	b.n	80068d8 <StartAutoTransition+0x8>
 8006908:	20001192 	.word	0x20001192
 800690c:	e000007c 	.word	0xe000007c
 8006910:	20001191 	.word	0x20001191

08006914 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b082      	sub	sp, #8
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a04      	ldr	r2, [pc, #16]	; (8006934 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d101      	bne.n	800692a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8006926:	f7f9 fe5d 	bl	80005e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800692a:	bf00      	nop
 800692c:	3708      	adds	r7, #8
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}
 8006932:	bf00      	nop
 8006934:	40001000 	.word	0x40001000

08006938 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006938:	b480      	push	{r7}
 800693a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800693c:	b672      	cpsid	i
}
 800693e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006940:	e7fe      	b.n	8006940 <Error_Handler+0x8>
	...

08006944 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b08a      	sub	sp, #40	; 0x28
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800694c:	4b27      	ldr	r3, [pc, #156]	; (80069ec <I2Cx_MspInit+0xa8>)
 800694e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006950:	4a26      	ldr	r2, [pc, #152]	; (80069ec <I2Cx_MspInit+0xa8>)
 8006952:	f043 0302 	orr.w	r3, r3, #2
 8006956:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006958:	4b24      	ldr	r3, [pc, #144]	; (80069ec <I2Cx_MspInit+0xa8>)
 800695a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800695c:	f003 0302 	and.w	r3, r3, #2
 8006960:	613b      	str	r3, [r7, #16]
 8006962:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8006964:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006968:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800696a:	2312      	movs	r3, #18
 800696c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800696e:	2301      	movs	r3, #1
 8006970:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006972:	2303      	movs	r3, #3
 8006974:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8006976:	2304      	movs	r3, #4
 8006978:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800697a:	f107 0314 	add.w	r3, r7, #20
 800697e:	4619      	mov	r1, r3
 8006980:	481b      	ldr	r0, [pc, #108]	; (80069f0 <I2Cx_MspInit+0xac>)
 8006982:	f7f9 ff31 	bl	80007e8 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8006986:	f107 0314 	add.w	r3, r7, #20
 800698a:	4619      	mov	r1, r3
 800698c:	4818      	ldr	r0, [pc, #96]	; (80069f0 <I2Cx_MspInit+0xac>)
 800698e:	f7f9 ff2b 	bl	80007e8 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8006992:	4b16      	ldr	r3, [pc, #88]	; (80069ec <I2Cx_MspInit+0xa8>)
 8006994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006996:	4a15      	ldr	r2, [pc, #84]	; (80069ec <I2Cx_MspInit+0xa8>)
 8006998:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800699c:	6593      	str	r3, [r2, #88]	; 0x58
 800699e:	4b13      	ldr	r3, [pc, #76]	; (80069ec <I2Cx_MspInit+0xa8>)
 80069a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069a6:	60fb      	str	r3, [r7, #12]
 80069a8:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 80069aa:	4b10      	ldr	r3, [pc, #64]	; (80069ec <I2Cx_MspInit+0xa8>)
 80069ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ae:	4a0f      	ldr	r2, [pc, #60]	; (80069ec <I2Cx_MspInit+0xa8>)
 80069b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80069b4:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 80069b6:	4b0d      	ldr	r3, [pc, #52]	; (80069ec <I2Cx_MspInit+0xa8>)
 80069b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ba:	4a0c      	ldr	r2, [pc, #48]	; (80069ec <I2Cx_MspInit+0xa8>)
 80069bc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80069c0:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80069c2:	2200      	movs	r2, #0
 80069c4:	210f      	movs	r1, #15
 80069c6:	2021      	movs	r0, #33	; 0x21
 80069c8:	f7f9 fee4 	bl	8000794 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80069cc:	2021      	movs	r0, #33	; 0x21
 80069ce:	f7f9 fefd 	bl	80007cc <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80069d2:	2200      	movs	r2, #0
 80069d4:	210f      	movs	r1, #15
 80069d6:	2022      	movs	r0, #34	; 0x22
 80069d8:	f7f9 fedc 	bl	8000794 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 80069dc:	2022      	movs	r0, #34	; 0x22
 80069de:	f7f9 fef5 	bl	80007cc <HAL_NVIC_EnableIRQ>
}
 80069e2:	bf00      	nop
 80069e4:	3728      	adds	r7, #40	; 0x28
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}
 80069ea:	bf00      	nop
 80069ec:	40021000 	.word	0x40021000
 80069f0:	48000400 	.word	0x48000400

080069f4 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b082      	sub	sp, #8
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	4a12      	ldr	r2, [pc, #72]	; (8006a48 <I2Cx_Init+0x54>)
 8006a00:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	4a11      	ldr	r2, [pc, #68]	; (8006a4c <I2Cx_Init+0x58>)
 8006a06:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2201      	movs	r2, #1
 8006a12:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2200      	movs	r2, #0
 8006a18:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2200      	movs	r2, #0
 8006a24:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f7ff ff89 	bl	8006944 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f7fa f9a6 	bl	8000d84 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8006a38:	2100      	movs	r1, #0
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f7fa ff34 	bl	80018a8 <HAL_I2CEx_ConfigAnalogFilter>
}
 8006a40:	bf00      	nop
 8006a42:	3708      	adds	r7, #8
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}
 8006a48:	40005800 	.word	0x40005800
 8006a4c:	00702681 	.word	0x00702681

08006a50 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b08a      	sub	sp, #40	; 0x28
 8006a54:	af04      	add	r7, sp, #16
 8006a56:	60f8      	str	r0, [r7, #12]
 8006a58:	4608      	mov	r0, r1
 8006a5a:	4611      	mov	r1, r2
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	4603      	mov	r3, r0
 8006a60:	72fb      	strb	r3, [r7, #11]
 8006a62:	460b      	mov	r3, r1
 8006a64:	813b      	strh	r3, [r7, #8]
 8006a66:	4613      	mov	r3, r2
 8006a68:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8006a6e:	7afb      	ldrb	r3, [r7, #11]
 8006a70:	b299      	uxth	r1, r3
 8006a72:	88f8      	ldrh	r0, [r7, #6]
 8006a74:	893a      	ldrh	r2, [r7, #8]
 8006a76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006a7a:	9302      	str	r3, [sp, #8]
 8006a7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a7e:	9301      	str	r3, [sp, #4]
 8006a80:	6a3b      	ldr	r3, [r7, #32]
 8006a82:	9300      	str	r3, [sp, #0]
 8006a84:	4603      	mov	r3, r0
 8006a86:	68f8      	ldr	r0, [r7, #12]
 8006a88:	f7fa fb4e 	bl	8001128 <HAL_I2C_Mem_Read>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8006a90:	7dfb      	ldrb	r3, [r7, #23]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d004      	beq.n	8006aa0 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8006a96:	7afb      	ldrb	r3, [r7, #11]
 8006a98:	4619      	mov	r1, r3
 8006a9a:	68f8      	ldr	r0, [r7, #12]
 8006a9c:	f000 f832 	bl	8006b04 <I2Cx_Error>
  }
  return status;
 8006aa0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3718      	adds	r7, #24
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}

08006aaa <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8006aaa:	b580      	push	{r7, lr}
 8006aac:	b08a      	sub	sp, #40	; 0x28
 8006aae:	af04      	add	r7, sp, #16
 8006ab0:	60f8      	str	r0, [r7, #12]
 8006ab2:	4608      	mov	r0, r1
 8006ab4:	4611      	mov	r1, r2
 8006ab6:	461a      	mov	r2, r3
 8006ab8:	4603      	mov	r3, r0
 8006aba:	72fb      	strb	r3, [r7, #11]
 8006abc:	460b      	mov	r3, r1
 8006abe:	813b      	strh	r3, [r7, #8]
 8006ac0:	4613      	mov	r3, r2
 8006ac2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8006ac8:	7afb      	ldrb	r3, [r7, #11]
 8006aca:	b299      	uxth	r1, r3
 8006acc:	88f8      	ldrh	r0, [r7, #6]
 8006ace:	893a      	ldrh	r2, [r7, #8]
 8006ad0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006ad4:	9302      	str	r3, [sp, #8]
 8006ad6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ad8:	9301      	str	r3, [sp, #4]
 8006ada:	6a3b      	ldr	r3, [r7, #32]
 8006adc:	9300      	str	r3, [sp, #0]
 8006ade:	4603      	mov	r3, r0
 8006ae0:	68f8      	ldr	r0, [r7, #12]
 8006ae2:	f7fa fa0d 	bl	8000f00 <HAL_I2C_Mem_Write>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8006aea:	7dfb      	ldrb	r3, [r7, #23]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d004      	beq.n	8006afa <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8006af0:	7afb      	ldrb	r3, [r7, #11]
 8006af2:	4619      	mov	r1, r3
 8006af4:	68f8      	ldr	r0, [r7, #12]
 8006af6:	f000 f805 	bl	8006b04 <I2Cx_Error>
  }
  return status;
 8006afa:	7dfb      	ldrb	r3, [r7, #23]
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3718      	adds	r7, #24
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}

08006b04 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b082      	sub	sp, #8
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
 8006b0c:	460b      	mov	r3, r1
 8006b0e:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f7fa f9c6 	bl	8000ea2 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f7ff ff6c 	bl	80069f4 <I2Cx_Init>
}
 8006b1c:	bf00      	nop
 8006b1e:	3708      	adds	r7, #8
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}

08006b24 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8006b28:	4802      	ldr	r0, [pc, #8]	; (8006b34 <SENSOR_IO_Init+0x10>)
 8006b2a:	f7ff ff63 	bl	80069f4 <I2Cx_Init>
}
 8006b2e:	bf00      	nop
 8006b30:	bd80      	pop	{r7, pc}
 8006b32:	bf00      	nop
 8006b34:	20001218 	.word	0x20001218

08006b38 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b084      	sub	sp, #16
 8006b3c:	af02      	add	r7, sp, #8
 8006b3e:	4603      	mov	r3, r0
 8006b40:	71fb      	strb	r3, [r7, #7]
 8006b42:	460b      	mov	r3, r1
 8006b44:	71bb      	strb	r3, [r7, #6]
 8006b46:	4613      	mov	r3, r2
 8006b48:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8006b4a:	79bb      	ldrb	r3, [r7, #6]
 8006b4c:	b29a      	uxth	r2, r3
 8006b4e:	79f9      	ldrb	r1, [r7, #7]
 8006b50:	2301      	movs	r3, #1
 8006b52:	9301      	str	r3, [sp, #4]
 8006b54:	1d7b      	adds	r3, r7, #5
 8006b56:	9300      	str	r3, [sp, #0]
 8006b58:	2301      	movs	r3, #1
 8006b5a:	4803      	ldr	r0, [pc, #12]	; (8006b68 <SENSOR_IO_Write+0x30>)
 8006b5c:	f7ff ffa5 	bl	8006aaa <I2Cx_WriteMultiple>
}
 8006b60:	bf00      	nop
 8006b62:	3708      	adds	r7, #8
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}
 8006b68:	20001218 	.word	0x20001218

08006b6c <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b086      	sub	sp, #24
 8006b70:	af02      	add	r7, sp, #8
 8006b72:	4603      	mov	r3, r0
 8006b74:	460a      	mov	r2, r1
 8006b76:	71fb      	strb	r3, [r7, #7]
 8006b78:	4613      	mov	r3, r2
 8006b7a:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8006b80:	79bb      	ldrb	r3, [r7, #6]
 8006b82:	b29a      	uxth	r2, r3
 8006b84:	79f9      	ldrb	r1, [r7, #7]
 8006b86:	2301      	movs	r3, #1
 8006b88:	9301      	str	r3, [sp, #4]
 8006b8a:	f107 030f 	add.w	r3, r7, #15
 8006b8e:	9300      	str	r3, [sp, #0]
 8006b90:	2301      	movs	r3, #1
 8006b92:	4804      	ldr	r0, [pc, #16]	; (8006ba4 <SENSOR_IO_Read+0x38>)
 8006b94:	f7ff ff5c 	bl	8006a50 <I2Cx_ReadMultiple>

  return read_value;
 8006b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3710      	adds	r7, #16
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}
 8006ba2:	bf00      	nop
 8006ba4:	20001218 	.word	0x20001218

08006ba8 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b084      	sub	sp, #16
 8006bac:	af02      	add	r7, sp, #8
 8006bae:	603a      	str	r2, [r7, #0]
 8006bb0:	461a      	mov	r2, r3
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	71fb      	strb	r3, [r7, #7]
 8006bb6:	460b      	mov	r3, r1
 8006bb8:	71bb      	strb	r3, [r7, #6]
 8006bba:	4613      	mov	r3, r2
 8006bbc:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8006bbe:	79bb      	ldrb	r3, [r7, #6]
 8006bc0:	b29a      	uxth	r2, r3
 8006bc2:	79f9      	ldrb	r1, [r7, #7]
 8006bc4:	88bb      	ldrh	r3, [r7, #4]
 8006bc6:	9301      	str	r3, [sp, #4]
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	9300      	str	r3, [sp, #0]
 8006bcc:	2301      	movs	r3, #1
 8006bce:	4804      	ldr	r0, [pc, #16]	; (8006be0 <SENSOR_IO_ReadMultiple+0x38>)
 8006bd0:	f7ff ff3e 	bl	8006a50 <I2Cx_ReadMultiple>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	b29b      	uxth	r3, r3
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3708      	adds	r7, #8
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}
 8006be0:	20001218 	.word	0x20001218

08006be4 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b084      	sub	sp, #16
 8006be8:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8006bea:	2300      	movs	r3, #0
 8006bec:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8006bf2:	4b19      	ldr	r3, [pc, #100]	; (8006c58 <BSP_ACCELERO_Init+0x74>)
 8006bf4:	689b      	ldr	r3, [r3, #8]
 8006bf6:	4798      	blx	r3
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	2b6a      	cmp	r3, #106	; 0x6a
 8006bfc:	d002      	beq.n	8006c04 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	73fb      	strb	r3, [r7, #15]
 8006c02:	e024      	b.n	8006c4e <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8006c04:	4b15      	ldr	r3, [pc, #84]	; (8006c5c <BSP_ACCELERO_Init+0x78>)
 8006c06:	4a14      	ldr	r2, [pc, #80]	; (8006c58 <BSP_ACCELERO_Init+0x74>)
 8006c08:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 8006c0a:	2330      	movs	r3, #48	; 0x30
 8006c0c:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 8006c12:	2300      	movs	r3, #0
 8006c14:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8006c16:	2340      	movs	r3, #64	; 0x40
 8006c18:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 8006c22:	797a      	ldrb	r2, [r7, #5]
 8006c24:	7abb      	ldrb	r3, [r7, #10]
 8006c26:	4313      	orrs	r3, r2
 8006c28:	b2db      	uxtb	r3, r3
 8006c2a:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8006c2c:	7a3b      	ldrb	r3, [r7, #8]
 8006c2e:	f043 0304 	orr.w	r3, r3, #4
 8006c32:	b2db      	uxtb	r3, r3
 8006c34:	021b      	lsls	r3, r3, #8
 8006c36:	b21a      	sxth	r2, r3
 8006c38:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	b21b      	sxth	r3, r3
 8006c40:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8006c42:	4b06      	ldr	r3, [pc, #24]	; (8006c5c <BSP_ACCELERO_Init+0x78>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	89ba      	ldrh	r2, [r7, #12]
 8006c4a:	4610      	mov	r0, r2
 8006c4c:	4798      	blx	r3
  }  

  return ret;
 8006c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3710      	adds	r7, #16
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}
 8006c58:	2000004c 	.word	0x2000004c
 8006c5c:	2000126c 	.word	0x2000126c

08006c60 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b082      	sub	sp, #8
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8006c68:	4b08      	ldr	r3, [pc, #32]	; (8006c8c <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d009      	beq.n	8006c84 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8006c70:	4b06      	ldr	r3, [pc, #24]	; (8006c8c <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d004      	beq.n	8006c84 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8006c7a:	4b04      	ldr	r3, [pc, #16]	; (8006c8c <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	4798      	blx	r3
    }
  }
}
 8006c84:	bf00      	nop
 8006c86:	3708      	adds	r7, #8
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}
 8006c8c:	2000126c 	.word	0x2000126c

08006c90 <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b084      	sub	sp, #16
 8006c94:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 8006c96:	2301      	movs	r3, #1
 8006c98:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8006c9e:	4b1b      	ldr	r3, [pc, #108]	; (8006d0c <BSP_GYRO_Init+0x7c>)
 8006ca0:	689b      	ldr	r3, [r3, #8]
 8006ca2:	4798      	blx	r3
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	2b6a      	cmp	r3, #106	; 0x6a
 8006ca8:	d002      	beq.n	8006cb0 <BSP_GYRO_Init+0x20>
  {
    ret = GYRO_ERROR;
 8006caa:	2301      	movs	r3, #1
 8006cac:	73fb      	strb	r3, [r7, #15]
 8006cae:	e028      	b.n	8006d02 <BSP_GYRO_Init+0x72>
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 8006cb0:	4b17      	ldr	r3, [pc, #92]	; (8006d10 <BSP_GYRO_Init+0x80>)
 8006cb2:	4a16      	ldr	r2, [pc, #88]	; (8006d0c <BSP_GYRO_Init+0x7c>)
 8006cb4:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    LSM6DSL_InitStructure.Power_Mode = 0;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	713b      	strb	r3, [r7, #4]
    LSM6DSL_InitStructure.Output_DataRate = LSM6DSL_ODR_52Hz;
 8006cba:	2330      	movs	r3, #48	; 0x30
 8006cbc:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.Band_Width = 0;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8006cc6:	2340      	movs	r3, #64	; 0x40
 8006cc8:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.Endianness = 0;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	727b      	strb	r3, [r7, #9]
    LSM6DSL_InitStructure.Full_Scale = LSM6DSL_GYRO_FS_2000; 
 8006cce:	230c      	movs	r3, #12
 8006cd0:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, full scale  */
    ctrl = (LSM6DSL_InitStructure.Full_Scale | LSM6DSL_InitStructure.Output_DataRate);
 8006cd2:	7aba      	ldrb	r2, [r7, #10]
 8006cd4:	797b      	ldrb	r3, [r7, #5]
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	b2db      	uxtb	r3, r3
 8006cda:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8006cdc:	7a3b      	ldrb	r3, [r7, #8]
 8006cde:	f043 0304 	orr.w	r3, r3, #4
 8006ce2:	b2db      	uxtb	r3, r3
 8006ce4:	021b      	lsls	r3, r3, #8
 8006ce6:	b21a      	sxth	r2, r3
 8006ce8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006cec:	4313      	orrs	r3, r2
 8006cee:	b21b      	sxth	r3, r3
 8006cf0:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 8006cf2:	4b07      	ldr	r3, [pc, #28]	; (8006d10 <BSP_GYRO_Init+0x80>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	89ba      	ldrh	r2, [r7, #12]
 8006cfa:	4610      	mov	r0, r2
 8006cfc:	4798      	blx	r3
    
    ret = GYRO_OK;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 8006d02:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3710      	adds	r7, #16
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}
 8006d0c:	20000080 	.word	0x20000080
 8006d10:	20001270 	.word	0x20001270

08006d14 <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration from the Gyroscope.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b082      	sub	sp, #8
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv != NULL)
 8006d1c:	4b08      	ldr	r3, [pc, #32]	; (8006d40 <BSP_GYRO_GetXYZ+0x2c>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d009      	beq.n	8006d38 <BSP_GYRO_GetXYZ+0x24>
  {
    if(GyroscopeDrv->GetXYZ!= NULL)
 8006d24:	4b06      	ldr	r3, [pc, #24]	; (8006d40 <BSP_GYRO_GetXYZ+0x2c>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d004      	beq.n	8006d38 <BSP_GYRO_GetXYZ+0x24>
    {
      GyroscopeDrv->GetXYZ(pfData);
 8006d2e:	4b04      	ldr	r3, [pc, #16]	; (8006d40 <BSP_GYRO_GetXYZ+0x2c>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	4798      	blx	r3
    }
  }
}
 8006d38:	bf00      	nop
 8006d3a:	3708      	adds	r7, #8
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}
 8006d40:	20001270 	.word	0x20001270

08006d44 <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b082      	sub	sp, #8
 8006d48:	af00      	add	r7, sp, #0
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	71fb      	strb	r3, [r7, #7]
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 8006d4e:	4b11      	ldr	r3, [pc, #68]	; (8006d94 <BSP_MAGNETO_Init+0x50>)
 8006d50:	689b      	ldr	r3, [r3, #8]
 8006d52:	4798      	blx	r3
 8006d54:	4603      	mov	r3, r0
 8006d56:	2b3d      	cmp	r3, #61	; 0x3d
 8006d58:	d002      	beq.n	8006d60 <BSP_MAGNETO_Init+0x1c>
  {
    ret = MAGNETO_ERROR;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	71fb      	strb	r3, [r7, #7]
 8006d5e:	e013      	b.n	8006d88 <BSP_MAGNETO_Init+0x44>
  }
  else
  {
    /* Initialize the MAGNETO magnetometer driver structure */
    MagnetoDrv = &Lis3mdlMagDrv;
 8006d60:	4b0d      	ldr	r3, [pc, #52]	; (8006d98 <BSP_MAGNETO_Init+0x54>)
 8006d62:	4a0c      	ldr	r2, [pc, #48]	; (8006d94 <BSP_MAGNETO_Init+0x50>)
 8006d64:	601a      	str	r2, [r3, #0]
    
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the MAGNETO magnetometer structure */
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 8006d66:	2358      	movs	r3, #88	; 0x58
 8006d68:	703b      	strb	r3, [r7, #0]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	707b      	strb	r3, [r7, #1]
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	70bb      	strb	r3, [r7, #2]
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 8006d72:	2308      	movs	r3, #8
 8006d74:	70fb      	strb	r3, [r7, #3]
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 8006d76:	2340      	movs	r3, #64	; 0x40
 8006d78:	713b      	strb	r3, [r7, #4]
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 8006d7a:	4b07      	ldr	r3, [pc, #28]	; (8006d98 <BSP_MAGNETO_Init+0x54>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	463a      	mov	r2, r7
 8006d82:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006d86:	4798      	blx	r3
  } 

  return ret;  
 8006d88:	79fb      	ldrb	r3, [r7, #7]
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3708      	adds	r7, #8
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}
 8006d92:	bf00      	nop
 8006d94:	2000000c 	.word	0x2000000c
 8006d98:	20001274 	.word	0x20001274

08006d9c <BSP_MAGNETO_GetXYZ>:
  * @brief  Get XYZ magnetometer values.
  * @param  pDataXYZ Pointer on 3 magnetometer values table with
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis 
  */
void BSP_MAGNETO_GetXYZ(int16_t *pDataXYZ)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b082      	sub	sp, #8
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  if(MagnetoDrv != NULL)
 8006da4:	4b08      	ldr	r3, [pc, #32]	; (8006dc8 <BSP_MAGNETO_GetXYZ+0x2c>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d009      	beq.n	8006dc0 <BSP_MAGNETO_GetXYZ+0x24>
  {
    if(MagnetoDrv->GetXYZ != NULL)
 8006dac:	4b06      	ldr	r3, [pc, #24]	; (8006dc8 <BSP_MAGNETO_GetXYZ+0x2c>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d004      	beq.n	8006dc0 <BSP_MAGNETO_GetXYZ+0x24>
    {   
      MagnetoDrv->GetXYZ(pDataXYZ);
 8006db6:	4b04      	ldr	r3, [pc, #16]	; (8006dc8 <BSP_MAGNETO_GetXYZ+0x2c>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	4798      	blx	r3
    }
  }
}
 8006dc0:	bf00      	nop
 8006dc2:	3708      	adds	r7, #8
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}
 8006dc8:	20001274 	.word	0x20001274

08006dcc <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b082      	sub	sp, #8
 8006dd0:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 8006dd2:	4b0c      	ldr	r3, [pc, #48]	; (8006e04 <BSP_PSENSOR_Init+0x38>)
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	20ba      	movs	r0, #186	; 0xba
 8006dd8:	4798      	blx	r3
 8006dda:	4603      	mov	r3, r0
 8006ddc:	2bb1      	cmp	r3, #177	; 0xb1
 8006dde:	d002      	beq.n	8006de6 <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 8006de0:	2301      	movs	r3, #1
 8006de2:	607b      	str	r3, [r7, #4]
 8006de4:	e009      	b.n	8006dfa <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 8006de6:	4b08      	ldr	r3, [pc, #32]	; (8006e08 <BSP_PSENSOR_Init+0x3c>)
 8006de8:	4a06      	ldr	r2, [pc, #24]	; (8006e04 <BSP_PSENSOR_Init+0x38>)
 8006dea:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 8006dec:	4b06      	ldr	r3, [pc, #24]	; (8006e08 <BSP_PSENSOR_Init+0x3c>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	20ba      	movs	r0, #186	; 0xba
 8006df4:	4798      	blx	r3
    ret = PSENSOR_OK;
 8006df6:	2300      	movs	r3, #0
 8006df8:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8006dfa:	687b      	ldr	r3, [r7, #4]
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3708      	adds	r7, #8
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}
 8006e04:	20000040 	.word	0x20000040
 8006e08:	20001278 	.word	0x20001278

08006e0c <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 8006e10:	4b04      	ldr	r3, [pc, #16]	; (8006e24 <BSP_PSENSOR_ReadPressure+0x18>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	689b      	ldr	r3, [r3, #8]
 8006e16:	20ba      	movs	r0, #186	; 0xba
 8006e18:	4798      	blx	r3
 8006e1a:	eef0 7a40 	vmov.f32	s15, s0
}
 8006e1e:	eeb0 0a67 	vmov.f32	s0, s15
 8006e22:	bd80      	pop	{r7, pc}
 8006e24:	20001278 	.word	0x20001278

08006e28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b082      	sub	sp, #8
 8006e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006e2e:	4b11      	ldr	r3, [pc, #68]	; (8006e74 <HAL_MspInit+0x4c>)
 8006e30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e32:	4a10      	ldr	r2, [pc, #64]	; (8006e74 <HAL_MspInit+0x4c>)
 8006e34:	f043 0301 	orr.w	r3, r3, #1
 8006e38:	6613      	str	r3, [r2, #96]	; 0x60
 8006e3a:	4b0e      	ldr	r3, [pc, #56]	; (8006e74 <HAL_MspInit+0x4c>)
 8006e3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e3e:	f003 0301 	and.w	r3, r3, #1
 8006e42:	607b      	str	r3, [r7, #4]
 8006e44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006e46:	4b0b      	ldr	r3, [pc, #44]	; (8006e74 <HAL_MspInit+0x4c>)
 8006e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e4a:	4a0a      	ldr	r2, [pc, #40]	; (8006e74 <HAL_MspInit+0x4c>)
 8006e4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e50:	6593      	str	r3, [r2, #88]	; 0x58
 8006e52:	4b08      	ldr	r3, [pc, #32]	; (8006e74 <HAL_MspInit+0x4c>)
 8006e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e5a:	603b      	str	r3, [r7, #0]
 8006e5c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8006e5e:	2200      	movs	r2, #0
 8006e60:	210f      	movs	r1, #15
 8006e62:	f06f 0001 	mvn.w	r0, #1
 8006e66:	f7f9 fc95 	bl	8000794 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006e6a:	bf00      	nop
 8006e6c:	3708      	adds	r7, #8
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}
 8006e72:	bf00      	nop
 8006e74:	40021000 	.word	0x40021000

08006e78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b0ae      	sub	sp, #184	; 0xb8
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e80:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006e84:	2200      	movs	r2, #0
 8006e86:	601a      	str	r2, [r3, #0]
 8006e88:	605a      	str	r2, [r3, #4]
 8006e8a:	609a      	str	r2, [r3, #8]
 8006e8c:	60da      	str	r2, [r3, #12]
 8006e8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006e90:	f107 0310 	add.w	r3, r7, #16
 8006e94:	2294      	movs	r2, #148	; 0x94
 8006e96:	2100      	movs	r1, #0
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f000 fa19 	bl	80072d0 <memset>
  if(hi2c->Instance==I2C2)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a21      	ldr	r2, [pc, #132]	; (8006f28 <HAL_I2C_MspInit+0xb0>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d13b      	bne.n	8006f20 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8006ea8:	2380      	movs	r3, #128	; 0x80
 8006eaa:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8006eac:	2300      	movs	r3, #0
 8006eae:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006eb0:	f107 0310 	add.w	r3, r7, #16
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f7fb fd5d 	bl	8002974 <HAL_RCCEx_PeriphCLKConfig>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d001      	beq.n	8006ec4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8006ec0:	f7ff fd3a 	bl	8006938 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006ec4:	4b19      	ldr	r3, [pc, #100]	; (8006f2c <HAL_I2C_MspInit+0xb4>)
 8006ec6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ec8:	4a18      	ldr	r2, [pc, #96]	; (8006f2c <HAL_I2C_MspInit+0xb4>)
 8006eca:	f043 0302 	orr.w	r3, r3, #2
 8006ece:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006ed0:	4b16      	ldr	r3, [pc, #88]	; (8006f2c <HAL_I2C_MspInit+0xb4>)
 8006ed2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ed4:	f003 0302 	and.w	r3, r3, #2
 8006ed8:	60fb      	str	r3, [r7, #12]
 8006eda:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8006edc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006ee0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006ee4:	2312      	movs	r3, #18
 8006ee6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006eea:	2300      	movs	r3, #0
 8006eec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ef0:	2303      	movs	r3, #3
 8006ef2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006ef6:	2304      	movs	r3, #4
 8006ef8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006efc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006f00:	4619      	mov	r1, r3
 8006f02:	480b      	ldr	r0, [pc, #44]	; (8006f30 <HAL_I2C_MspInit+0xb8>)
 8006f04:	f7f9 fc70 	bl	80007e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8006f08:	4b08      	ldr	r3, [pc, #32]	; (8006f2c <HAL_I2C_MspInit+0xb4>)
 8006f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f0c:	4a07      	ldr	r2, [pc, #28]	; (8006f2c <HAL_I2C_MspInit+0xb4>)
 8006f0e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006f12:	6593      	str	r3, [r2, #88]	; 0x58
 8006f14:	4b05      	ldr	r3, [pc, #20]	; (8006f2c <HAL_I2C_MspInit+0xb4>)
 8006f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f1c:	60bb      	str	r3, [r7, #8]
 8006f1e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8006f20:	bf00      	nop
 8006f22:	37b8      	adds	r7, #184	; 0xb8
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}
 8006f28:	40005800 	.word	0x40005800
 8006f2c:	40021000 	.word	0x40021000
 8006f30:	48000400 	.word	0x48000400

08006f34 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b082      	sub	sp, #8
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a0b      	ldr	r2, [pc, #44]	; (8006f70 <HAL_I2C_MspDeInit+0x3c>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d10f      	bne.n	8006f66 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8006f46:	4b0b      	ldr	r3, [pc, #44]	; (8006f74 <HAL_I2C_MspDeInit+0x40>)
 8006f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f4a:	4a0a      	ldr	r2, [pc, #40]	; (8006f74 <HAL_I2C_MspDeInit+0x40>)
 8006f4c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8006f50:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8006f52:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006f56:	4808      	ldr	r0, [pc, #32]	; (8006f78 <HAL_I2C_MspDeInit+0x44>)
 8006f58:	f7f9 fdd8 	bl	8000b0c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8006f5c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006f60:	4805      	ldr	r0, [pc, #20]	; (8006f78 <HAL_I2C_MspDeInit+0x44>)
 8006f62:	f7f9 fdd3 	bl	8000b0c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8006f66:	bf00      	nop
 8006f68:	3708      	adds	r7, #8
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
 8006f6e:	bf00      	nop
 8006f70:	40005800 	.word	0x40005800
 8006f74:	40021000 	.word	0x40021000
 8006f78:	48000400 	.word	0x48000400

08006f7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b0ae      	sub	sp, #184	; 0xb8
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f84:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006f88:	2200      	movs	r2, #0
 8006f8a:	601a      	str	r2, [r3, #0]
 8006f8c:	605a      	str	r2, [r3, #4]
 8006f8e:	609a      	str	r2, [r3, #8]
 8006f90:	60da      	str	r2, [r3, #12]
 8006f92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006f94:	f107 0310 	add.w	r3, r7, #16
 8006f98:	2294      	movs	r2, #148	; 0x94
 8006f9a:	2100      	movs	r1, #0
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f000 f997 	bl	80072d0 <memset>
  if(huart->Instance==USART1)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a21      	ldr	r2, [pc, #132]	; (800702c <HAL_UART_MspInit+0xb0>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d13a      	bne.n	8007022 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8006fac:	2301      	movs	r3, #1
 8006fae:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006fb4:	f107 0310 	add.w	r3, r7, #16
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f7fb fcdb 	bl	8002974 <HAL_RCCEx_PeriphCLKConfig>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d001      	beq.n	8006fc8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8006fc4:	f7ff fcb8 	bl	8006938 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006fc8:	4b19      	ldr	r3, [pc, #100]	; (8007030 <HAL_UART_MspInit+0xb4>)
 8006fca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fcc:	4a18      	ldr	r2, [pc, #96]	; (8007030 <HAL_UART_MspInit+0xb4>)
 8006fce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006fd2:	6613      	str	r3, [r2, #96]	; 0x60
 8006fd4:	4b16      	ldr	r3, [pc, #88]	; (8007030 <HAL_UART_MspInit+0xb4>)
 8006fd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fdc:	60fb      	str	r3, [r7, #12]
 8006fde:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006fe0:	4b13      	ldr	r3, [pc, #76]	; (8007030 <HAL_UART_MspInit+0xb4>)
 8006fe2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fe4:	4a12      	ldr	r2, [pc, #72]	; (8007030 <HAL_UART_MspInit+0xb4>)
 8006fe6:	f043 0302 	orr.w	r3, r3, #2
 8006fea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006fec:	4b10      	ldr	r3, [pc, #64]	; (8007030 <HAL_UART_MspInit+0xb4>)
 8006fee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ff0:	f003 0302 	and.w	r3, r3, #2
 8006ff4:	60bb      	str	r3, [r7, #8]
 8006ff6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006ff8:	23c0      	movs	r3, #192	; 0xc0
 8006ffa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ffe:	2302      	movs	r3, #2
 8007000:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007004:	2300      	movs	r3, #0
 8007006:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800700a:	2303      	movs	r3, #3
 800700c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8007010:	2307      	movs	r3, #7
 8007012:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007016:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800701a:	4619      	mov	r1, r3
 800701c:	4805      	ldr	r0, [pc, #20]	; (8007034 <HAL_UART_MspInit+0xb8>)
 800701e:	f7f9 fbe3 	bl	80007e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8007022:	bf00      	nop
 8007024:	37b8      	adds	r7, #184	; 0xb8
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}
 800702a:	bf00      	nop
 800702c:	40013800 	.word	0x40013800
 8007030:	40021000 	.word	0x40021000
 8007034:	48000400 	.word	0x48000400

08007038 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b08e      	sub	sp, #56	; 0x38
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8007040:	2300      	movs	r3, #0
 8007042:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8007046:	4b34      	ldr	r3, [pc, #208]	; (8007118 <HAL_InitTick+0xe0>)
 8007048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800704a:	4a33      	ldr	r2, [pc, #204]	; (8007118 <HAL_InitTick+0xe0>)
 800704c:	f043 0310 	orr.w	r3, r3, #16
 8007050:	6593      	str	r3, [r2, #88]	; 0x58
 8007052:	4b31      	ldr	r3, [pc, #196]	; (8007118 <HAL_InitTick+0xe0>)
 8007054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007056:	f003 0310 	and.w	r3, r3, #16
 800705a:	60fb      	str	r3, [r7, #12]
 800705c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800705e:	f107 0210 	add.w	r2, r7, #16
 8007062:	f107 0314 	add.w	r3, r7, #20
 8007066:	4611      	mov	r1, r2
 8007068:	4618      	mov	r0, r3
 800706a:	f7fb fb91 	bl	8002790 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800706e:	6a3b      	ldr	r3, [r7, #32]
 8007070:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8007072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007074:	2b00      	cmp	r3, #0
 8007076:	d103      	bne.n	8007080 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8007078:	f7fb fb5e 	bl	8002738 <HAL_RCC_GetPCLK1Freq>
 800707c:	6378      	str	r0, [r7, #52]	; 0x34
 800707e:	e004      	b.n	800708a <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8007080:	f7fb fb5a 	bl	8002738 <HAL_RCC_GetPCLK1Freq>
 8007084:	4603      	mov	r3, r0
 8007086:	005b      	lsls	r3, r3, #1
 8007088:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800708a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800708c:	4a23      	ldr	r2, [pc, #140]	; (800711c <HAL_InitTick+0xe4>)
 800708e:	fba2 2303 	umull	r2, r3, r2, r3
 8007092:	0c9b      	lsrs	r3, r3, #18
 8007094:	3b01      	subs	r3, #1
 8007096:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8007098:	4b21      	ldr	r3, [pc, #132]	; (8007120 <HAL_InitTick+0xe8>)
 800709a:	4a22      	ldr	r2, [pc, #136]	; (8007124 <HAL_InitTick+0xec>)
 800709c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800709e:	4b20      	ldr	r3, [pc, #128]	; (8007120 <HAL_InitTick+0xe8>)
 80070a0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80070a4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80070a6:	4a1e      	ldr	r2, [pc, #120]	; (8007120 <HAL_InitTick+0xe8>)
 80070a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070aa:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80070ac:	4b1c      	ldr	r3, [pc, #112]	; (8007120 <HAL_InitTick+0xe8>)
 80070ae:	2200      	movs	r2, #0
 80070b0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80070b2:	4b1b      	ldr	r3, [pc, #108]	; (8007120 <HAL_InitTick+0xe8>)
 80070b4:	2200      	movs	r2, #0
 80070b6:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80070b8:	4b19      	ldr	r3, [pc, #100]	; (8007120 <HAL_InitTick+0xe8>)
 80070ba:	2200      	movs	r2, #0
 80070bc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80070be:	4818      	ldr	r0, [pc, #96]	; (8007120 <HAL_InitTick+0xe8>)
 80070c0:	f7fc f970 	bl	80033a4 <HAL_TIM_Base_Init>
 80070c4:	4603      	mov	r3, r0
 80070c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80070ca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d11b      	bne.n	800710a <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80070d2:	4813      	ldr	r0, [pc, #76]	; (8007120 <HAL_InitTick+0xe8>)
 80070d4:	f7fc f9c8 	bl	8003468 <HAL_TIM_Base_Start_IT>
 80070d8:	4603      	mov	r3, r0
 80070da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80070de:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d111      	bne.n	800710a <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80070e6:	2036      	movs	r0, #54	; 0x36
 80070e8:	f7f9 fb70 	bl	80007cc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2b0f      	cmp	r3, #15
 80070f0:	d808      	bhi.n	8007104 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80070f2:	2200      	movs	r2, #0
 80070f4:	6879      	ldr	r1, [r7, #4]
 80070f6:	2036      	movs	r0, #54	; 0x36
 80070f8:	f7f9 fb4c 	bl	8000794 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80070fc:	4a0a      	ldr	r2, [pc, #40]	; (8007128 <HAL_InitTick+0xf0>)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6013      	str	r3, [r2, #0]
 8007102:	e002      	b.n	800710a <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8007104:	2301      	movs	r3, #1
 8007106:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800710a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800710e:	4618      	mov	r0, r3
 8007110:	3738      	adds	r7, #56	; 0x38
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}
 8007116:	bf00      	nop
 8007118:	40021000 	.word	0x40021000
 800711c:	431bde83 	.word	0x431bde83
 8007120:	2000127c 	.word	0x2000127c
 8007124:	40001000 	.word	0x40001000
 8007128:	20000000 	.word	0x20000000

0800712c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800712c:	b480      	push	{r7}
 800712e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007130:	e7fe      	b.n	8007130 <NMI_Handler+0x4>

08007132 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007132:	b480      	push	{r7}
 8007134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007136:	e7fe      	b.n	8007136 <HardFault_Handler+0x4>

08007138 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007138:	b480      	push	{r7}
 800713a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800713c:	e7fe      	b.n	800713c <MemManage_Handler+0x4>

0800713e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800713e:	b480      	push	{r7}
 8007140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007142:	e7fe      	b.n	8007142 <BusFault_Handler+0x4>

08007144 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007144:	b480      	push	{r7}
 8007146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007148:	e7fe      	b.n	8007148 <UsageFault_Handler+0x4>

0800714a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800714a:	b480      	push	{r7}
 800714c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800714e:	bf00      	nop
 8007150:	46bd      	mov	sp, r7
 8007152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007156:	4770      	bx	lr

08007158 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLUE_BUTTON_Pin);
 800715c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8007160:	f7f9 fdf8 	bl	8000d54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8007164:	bf00      	nop
 8007166:	bd80      	pop	{r7, pc}

08007168 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800716c:	4802      	ldr	r0, [pc, #8]	; (8007178 <TIM6_DAC_IRQHandler+0x10>)
 800716e:	f7fc f9eb 	bl	8003548 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8007172:	bf00      	nop
 8007174:	bd80      	pop	{r7, pc}
 8007176:	bf00      	nop
 8007178:	2000127c 	.word	0x2000127c

0800717c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b086      	sub	sp, #24
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007184:	4a14      	ldr	r2, [pc, #80]	; (80071d8 <_sbrk+0x5c>)
 8007186:	4b15      	ldr	r3, [pc, #84]	; (80071dc <_sbrk+0x60>)
 8007188:	1ad3      	subs	r3, r2, r3
 800718a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007190:	4b13      	ldr	r3, [pc, #76]	; (80071e0 <_sbrk+0x64>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d102      	bne.n	800719e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007198:	4b11      	ldr	r3, [pc, #68]	; (80071e0 <_sbrk+0x64>)
 800719a:	4a12      	ldr	r2, [pc, #72]	; (80071e4 <_sbrk+0x68>)
 800719c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800719e:	4b10      	ldr	r3, [pc, #64]	; (80071e0 <_sbrk+0x64>)
 80071a0:	681a      	ldr	r2, [r3, #0]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	4413      	add	r3, r2
 80071a6:	693a      	ldr	r2, [r7, #16]
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d207      	bcs.n	80071bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80071ac:	f000 f858 	bl	8007260 <__errno>
 80071b0:	4603      	mov	r3, r0
 80071b2:	220c      	movs	r2, #12
 80071b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80071b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80071ba:	e009      	b.n	80071d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80071bc:	4b08      	ldr	r3, [pc, #32]	; (80071e0 <_sbrk+0x64>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80071c2:	4b07      	ldr	r3, [pc, #28]	; (80071e0 <_sbrk+0x64>)
 80071c4:	681a      	ldr	r2, [r3, #0]
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	4413      	add	r3, r2
 80071ca:	4a05      	ldr	r2, [pc, #20]	; (80071e0 <_sbrk+0x64>)
 80071cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80071ce:	68fb      	ldr	r3, [r7, #12]
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3718      	adds	r7, #24
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}
 80071d8:	200a0000 	.word	0x200a0000
 80071dc:	00000400 	.word	0x00000400
 80071e0:	200012c8 	.word	0x200012c8
 80071e4:	200012e0 	.word	0x200012e0

080071e8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80071e8:	b480      	push	{r7}
 80071ea:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80071ec:	4b06      	ldr	r3, [pc, #24]	; (8007208 <SystemInit+0x20>)
 80071ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071f2:	4a05      	ldr	r2, [pc, #20]	; (8007208 <SystemInit+0x20>)
 80071f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80071f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80071fc:	bf00      	nop
 80071fe:	46bd      	mov	sp, r7
 8007200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007204:	4770      	bx	lr
 8007206:	bf00      	nop
 8007208:	e000ed00 	.word	0xe000ed00

0800720c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800720c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007244 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8007210:	f7ff ffea 	bl	80071e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007214:	480c      	ldr	r0, [pc, #48]	; (8007248 <LoopForever+0x6>)
  ldr r1, =_edata
 8007216:	490d      	ldr	r1, [pc, #52]	; (800724c <LoopForever+0xa>)
  ldr r2, =_sidata
 8007218:	4a0d      	ldr	r2, [pc, #52]	; (8007250 <LoopForever+0xe>)
  movs r3, #0
 800721a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800721c:	e002      	b.n	8007224 <LoopCopyDataInit>

0800721e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800721e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007220:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007222:	3304      	adds	r3, #4

08007224 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007224:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007226:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007228:	d3f9      	bcc.n	800721e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800722a:	4a0a      	ldr	r2, [pc, #40]	; (8007254 <LoopForever+0x12>)
  ldr r4, =_ebss
 800722c:	4c0a      	ldr	r4, [pc, #40]	; (8007258 <LoopForever+0x16>)
  movs r3, #0
 800722e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007230:	e001      	b.n	8007236 <LoopFillZerobss>

08007232 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007232:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007234:	3204      	adds	r2, #4

08007236 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007236:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007238:	d3fb      	bcc.n	8007232 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800723a:	f000 f817 	bl	800726c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800723e:	f7ff f86b 	bl	8006318 <main>

08007242 <LoopForever>:

LoopForever:
    b LoopForever
 8007242:	e7fe      	b.n	8007242 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8007244:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8007248:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800724c:	2000011c 	.word	0x2000011c
  ldr r2, =_sidata
 8007250:	08007dac 	.word	0x08007dac
  ldr r2, =_sbss
 8007254:	2000011c 	.word	0x2000011c
  ldr r4, =_ebss
 8007258:	200012dc 	.word	0x200012dc

0800725c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800725c:	e7fe      	b.n	800725c <ADC1_IRQHandler>
	...

08007260 <__errno>:
 8007260:	4b01      	ldr	r3, [pc, #4]	; (8007268 <__errno+0x8>)
 8007262:	6818      	ldr	r0, [r3, #0]
 8007264:	4770      	bx	lr
 8007266:	bf00      	nop
 8007268:	200000b8 	.word	0x200000b8

0800726c <__libc_init_array>:
 800726c:	b570      	push	{r4, r5, r6, lr}
 800726e:	4d0d      	ldr	r5, [pc, #52]	; (80072a4 <__libc_init_array+0x38>)
 8007270:	4c0d      	ldr	r4, [pc, #52]	; (80072a8 <__libc_init_array+0x3c>)
 8007272:	1b64      	subs	r4, r4, r5
 8007274:	10a4      	asrs	r4, r4, #2
 8007276:	2600      	movs	r6, #0
 8007278:	42a6      	cmp	r6, r4
 800727a:	d109      	bne.n	8007290 <__libc_init_array+0x24>
 800727c:	4d0b      	ldr	r5, [pc, #44]	; (80072ac <__libc_init_array+0x40>)
 800727e:	4c0c      	ldr	r4, [pc, #48]	; (80072b0 <__libc_init_array+0x44>)
 8007280:	f000 fc8e 	bl	8007ba0 <_init>
 8007284:	1b64      	subs	r4, r4, r5
 8007286:	10a4      	asrs	r4, r4, #2
 8007288:	2600      	movs	r6, #0
 800728a:	42a6      	cmp	r6, r4
 800728c:	d105      	bne.n	800729a <__libc_init_array+0x2e>
 800728e:	bd70      	pop	{r4, r5, r6, pc}
 8007290:	f855 3b04 	ldr.w	r3, [r5], #4
 8007294:	4798      	blx	r3
 8007296:	3601      	adds	r6, #1
 8007298:	e7ee      	b.n	8007278 <__libc_init_array+0xc>
 800729a:	f855 3b04 	ldr.w	r3, [r5], #4
 800729e:	4798      	blx	r3
 80072a0:	3601      	adds	r6, #1
 80072a2:	e7f2      	b.n	800728a <__libc_init_array+0x1e>
 80072a4:	08007da4 	.word	0x08007da4
 80072a8:	08007da4 	.word	0x08007da4
 80072ac:	08007da4 	.word	0x08007da4
 80072b0:	08007da8 	.word	0x08007da8

080072b4 <memcpy>:
 80072b4:	440a      	add	r2, r1
 80072b6:	4291      	cmp	r1, r2
 80072b8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80072bc:	d100      	bne.n	80072c0 <memcpy+0xc>
 80072be:	4770      	bx	lr
 80072c0:	b510      	push	{r4, lr}
 80072c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80072c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80072ca:	4291      	cmp	r1, r2
 80072cc:	d1f9      	bne.n	80072c2 <memcpy+0xe>
 80072ce:	bd10      	pop	{r4, pc}

080072d0 <memset>:
 80072d0:	4402      	add	r2, r0
 80072d2:	4603      	mov	r3, r0
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d100      	bne.n	80072da <memset+0xa>
 80072d8:	4770      	bx	lr
 80072da:	f803 1b01 	strb.w	r1, [r3], #1
 80072de:	e7f9      	b.n	80072d4 <memset+0x4>

080072e0 <siprintf>:
 80072e0:	b40e      	push	{r1, r2, r3}
 80072e2:	b500      	push	{lr}
 80072e4:	b09c      	sub	sp, #112	; 0x70
 80072e6:	ab1d      	add	r3, sp, #116	; 0x74
 80072e8:	9002      	str	r0, [sp, #8]
 80072ea:	9006      	str	r0, [sp, #24]
 80072ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80072f0:	4809      	ldr	r0, [pc, #36]	; (8007318 <siprintf+0x38>)
 80072f2:	9107      	str	r1, [sp, #28]
 80072f4:	9104      	str	r1, [sp, #16]
 80072f6:	4909      	ldr	r1, [pc, #36]	; (800731c <siprintf+0x3c>)
 80072f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80072fc:	9105      	str	r1, [sp, #20]
 80072fe:	6800      	ldr	r0, [r0, #0]
 8007300:	9301      	str	r3, [sp, #4]
 8007302:	a902      	add	r1, sp, #8
 8007304:	f000 f868 	bl	80073d8 <_svfiprintf_r>
 8007308:	9b02      	ldr	r3, [sp, #8]
 800730a:	2200      	movs	r2, #0
 800730c:	701a      	strb	r2, [r3, #0]
 800730e:	b01c      	add	sp, #112	; 0x70
 8007310:	f85d eb04 	ldr.w	lr, [sp], #4
 8007314:	b003      	add	sp, #12
 8007316:	4770      	bx	lr
 8007318:	200000b8 	.word	0x200000b8
 800731c:	ffff0208 	.word	0xffff0208

08007320 <__ssputs_r>:
 8007320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007324:	688e      	ldr	r6, [r1, #8]
 8007326:	429e      	cmp	r6, r3
 8007328:	4682      	mov	sl, r0
 800732a:	460c      	mov	r4, r1
 800732c:	4690      	mov	r8, r2
 800732e:	461f      	mov	r7, r3
 8007330:	d838      	bhi.n	80073a4 <__ssputs_r+0x84>
 8007332:	898a      	ldrh	r2, [r1, #12]
 8007334:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007338:	d032      	beq.n	80073a0 <__ssputs_r+0x80>
 800733a:	6825      	ldr	r5, [r4, #0]
 800733c:	6909      	ldr	r1, [r1, #16]
 800733e:	eba5 0901 	sub.w	r9, r5, r1
 8007342:	6965      	ldr	r5, [r4, #20]
 8007344:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007348:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800734c:	3301      	adds	r3, #1
 800734e:	444b      	add	r3, r9
 8007350:	106d      	asrs	r5, r5, #1
 8007352:	429d      	cmp	r5, r3
 8007354:	bf38      	it	cc
 8007356:	461d      	movcc	r5, r3
 8007358:	0553      	lsls	r3, r2, #21
 800735a:	d531      	bpl.n	80073c0 <__ssputs_r+0xa0>
 800735c:	4629      	mov	r1, r5
 800735e:	f000 fb55 	bl	8007a0c <_malloc_r>
 8007362:	4606      	mov	r6, r0
 8007364:	b950      	cbnz	r0, 800737c <__ssputs_r+0x5c>
 8007366:	230c      	movs	r3, #12
 8007368:	f8ca 3000 	str.w	r3, [sl]
 800736c:	89a3      	ldrh	r3, [r4, #12]
 800736e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007372:	81a3      	strh	r3, [r4, #12]
 8007374:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800737c:	6921      	ldr	r1, [r4, #16]
 800737e:	464a      	mov	r2, r9
 8007380:	f7ff ff98 	bl	80072b4 <memcpy>
 8007384:	89a3      	ldrh	r3, [r4, #12]
 8007386:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800738a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800738e:	81a3      	strh	r3, [r4, #12]
 8007390:	6126      	str	r6, [r4, #16]
 8007392:	6165      	str	r5, [r4, #20]
 8007394:	444e      	add	r6, r9
 8007396:	eba5 0509 	sub.w	r5, r5, r9
 800739a:	6026      	str	r6, [r4, #0]
 800739c:	60a5      	str	r5, [r4, #8]
 800739e:	463e      	mov	r6, r7
 80073a0:	42be      	cmp	r6, r7
 80073a2:	d900      	bls.n	80073a6 <__ssputs_r+0x86>
 80073a4:	463e      	mov	r6, r7
 80073a6:	6820      	ldr	r0, [r4, #0]
 80073a8:	4632      	mov	r2, r6
 80073aa:	4641      	mov	r1, r8
 80073ac:	f000 faa8 	bl	8007900 <memmove>
 80073b0:	68a3      	ldr	r3, [r4, #8]
 80073b2:	1b9b      	subs	r3, r3, r6
 80073b4:	60a3      	str	r3, [r4, #8]
 80073b6:	6823      	ldr	r3, [r4, #0]
 80073b8:	4433      	add	r3, r6
 80073ba:	6023      	str	r3, [r4, #0]
 80073bc:	2000      	movs	r0, #0
 80073be:	e7db      	b.n	8007378 <__ssputs_r+0x58>
 80073c0:	462a      	mov	r2, r5
 80073c2:	f000 fb97 	bl	8007af4 <_realloc_r>
 80073c6:	4606      	mov	r6, r0
 80073c8:	2800      	cmp	r0, #0
 80073ca:	d1e1      	bne.n	8007390 <__ssputs_r+0x70>
 80073cc:	6921      	ldr	r1, [r4, #16]
 80073ce:	4650      	mov	r0, sl
 80073d0:	f000 fab0 	bl	8007934 <_free_r>
 80073d4:	e7c7      	b.n	8007366 <__ssputs_r+0x46>
	...

080073d8 <_svfiprintf_r>:
 80073d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073dc:	4698      	mov	r8, r3
 80073de:	898b      	ldrh	r3, [r1, #12]
 80073e0:	061b      	lsls	r3, r3, #24
 80073e2:	b09d      	sub	sp, #116	; 0x74
 80073e4:	4607      	mov	r7, r0
 80073e6:	460d      	mov	r5, r1
 80073e8:	4614      	mov	r4, r2
 80073ea:	d50e      	bpl.n	800740a <_svfiprintf_r+0x32>
 80073ec:	690b      	ldr	r3, [r1, #16]
 80073ee:	b963      	cbnz	r3, 800740a <_svfiprintf_r+0x32>
 80073f0:	2140      	movs	r1, #64	; 0x40
 80073f2:	f000 fb0b 	bl	8007a0c <_malloc_r>
 80073f6:	6028      	str	r0, [r5, #0]
 80073f8:	6128      	str	r0, [r5, #16]
 80073fa:	b920      	cbnz	r0, 8007406 <_svfiprintf_r+0x2e>
 80073fc:	230c      	movs	r3, #12
 80073fe:	603b      	str	r3, [r7, #0]
 8007400:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007404:	e0d1      	b.n	80075aa <_svfiprintf_r+0x1d2>
 8007406:	2340      	movs	r3, #64	; 0x40
 8007408:	616b      	str	r3, [r5, #20]
 800740a:	2300      	movs	r3, #0
 800740c:	9309      	str	r3, [sp, #36]	; 0x24
 800740e:	2320      	movs	r3, #32
 8007410:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007414:	f8cd 800c 	str.w	r8, [sp, #12]
 8007418:	2330      	movs	r3, #48	; 0x30
 800741a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80075c4 <_svfiprintf_r+0x1ec>
 800741e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007422:	f04f 0901 	mov.w	r9, #1
 8007426:	4623      	mov	r3, r4
 8007428:	469a      	mov	sl, r3
 800742a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800742e:	b10a      	cbz	r2, 8007434 <_svfiprintf_r+0x5c>
 8007430:	2a25      	cmp	r2, #37	; 0x25
 8007432:	d1f9      	bne.n	8007428 <_svfiprintf_r+0x50>
 8007434:	ebba 0b04 	subs.w	fp, sl, r4
 8007438:	d00b      	beq.n	8007452 <_svfiprintf_r+0x7a>
 800743a:	465b      	mov	r3, fp
 800743c:	4622      	mov	r2, r4
 800743e:	4629      	mov	r1, r5
 8007440:	4638      	mov	r0, r7
 8007442:	f7ff ff6d 	bl	8007320 <__ssputs_r>
 8007446:	3001      	adds	r0, #1
 8007448:	f000 80aa 	beq.w	80075a0 <_svfiprintf_r+0x1c8>
 800744c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800744e:	445a      	add	r2, fp
 8007450:	9209      	str	r2, [sp, #36]	; 0x24
 8007452:	f89a 3000 	ldrb.w	r3, [sl]
 8007456:	2b00      	cmp	r3, #0
 8007458:	f000 80a2 	beq.w	80075a0 <_svfiprintf_r+0x1c8>
 800745c:	2300      	movs	r3, #0
 800745e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007462:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007466:	f10a 0a01 	add.w	sl, sl, #1
 800746a:	9304      	str	r3, [sp, #16]
 800746c:	9307      	str	r3, [sp, #28]
 800746e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007472:	931a      	str	r3, [sp, #104]	; 0x68
 8007474:	4654      	mov	r4, sl
 8007476:	2205      	movs	r2, #5
 8007478:	f814 1b01 	ldrb.w	r1, [r4], #1
 800747c:	4851      	ldr	r0, [pc, #324]	; (80075c4 <_svfiprintf_r+0x1ec>)
 800747e:	f7f8 fec7 	bl	8000210 <memchr>
 8007482:	9a04      	ldr	r2, [sp, #16]
 8007484:	b9d8      	cbnz	r0, 80074be <_svfiprintf_r+0xe6>
 8007486:	06d0      	lsls	r0, r2, #27
 8007488:	bf44      	itt	mi
 800748a:	2320      	movmi	r3, #32
 800748c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007490:	0711      	lsls	r1, r2, #28
 8007492:	bf44      	itt	mi
 8007494:	232b      	movmi	r3, #43	; 0x2b
 8007496:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800749a:	f89a 3000 	ldrb.w	r3, [sl]
 800749e:	2b2a      	cmp	r3, #42	; 0x2a
 80074a0:	d015      	beq.n	80074ce <_svfiprintf_r+0xf6>
 80074a2:	9a07      	ldr	r2, [sp, #28]
 80074a4:	4654      	mov	r4, sl
 80074a6:	2000      	movs	r0, #0
 80074a8:	f04f 0c0a 	mov.w	ip, #10
 80074ac:	4621      	mov	r1, r4
 80074ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80074b2:	3b30      	subs	r3, #48	; 0x30
 80074b4:	2b09      	cmp	r3, #9
 80074b6:	d94e      	bls.n	8007556 <_svfiprintf_r+0x17e>
 80074b8:	b1b0      	cbz	r0, 80074e8 <_svfiprintf_r+0x110>
 80074ba:	9207      	str	r2, [sp, #28]
 80074bc:	e014      	b.n	80074e8 <_svfiprintf_r+0x110>
 80074be:	eba0 0308 	sub.w	r3, r0, r8
 80074c2:	fa09 f303 	lsl.w	r3, r9, r3
 80074c6:	4313      	orrs	r3, r2
 80074c8:	9304      	str	r3, [sp, #16]
 80074ca:	46a2      	mov	sl, r4
 80074cc:	e7d2      	b.n	8007474 <_svfiprintf_r+0x9c>
 80074ce:	9b03      	ldr	r3, [sp, #12]
 80074d0:	1d19      	adds	r1, r3, #4
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	9103      	str	r1, [sp, #12]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	bfbb      	ittet	lt
 80074da:	425b      	neglt	r3, r3
 80074dc:	f042 0202 	orrlt.w	r2, r2, #2
 80074e0:	9307      	strge	r3, [sp, #28]
 80074e2:	9307      	strlt	r3, [sp, #28]
 80074e4:	bfb8      	it	lt
 80074e6:	9204      	strlt	r2, [sp, #16]
 80074e8:	7823      	ldrb	r3, [r4, #0]
 80074ea:	2b2e      	cmp	r3, #46	; 0x2e
 80074ec:	d10c      	bne.n	8007508 <_svfiprintf_r+0x130>
 80074ee:	7863      	ldrb	r3, [r4, #1]
 80074f0:	2b2a      	cmp	r3, #42	; 0x2a
 80074f2:	d135      	bne.n	8007560 <_svfiprintf_r+0x188>
 80074f4:	9b03      	ldr	r3, [sp, #12]
 80074f6:	1d1a      	adds	r2, r3, #4
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	9203      	str	r2, [sp, #12]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	bfb8      	it	lt
 8007500:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007504:	3402      	adds	r4, #2
 8007506:	9305      	str	r3, [sp, #20]
 8007508:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80075d4 <_svfiprintf_r+0x1fc>
 800750c:	7821      	ldrb	r1, [r4, #0]
 800750e:	2203      	movs	r2, #3
 8007510:	4650      	mov	r0, sl
 8007512:	f7f8 fe7d 	bl	8000210 <memchr>
 8007516:	b140      	cbz	r0, 800752a <_svfiprintf_r+0x152>
 8007518:	2340      	movs	r3, #64	; 0x40
 800751a:	eba0 000a 	sub.w	r0, r0, sl
 800751e:	fa03 f000 	lsl.w	r0, r3, r0
 8007522:	9b04      	ldr	r3, [sp, #16]
 8007524:	4303      	orrs	r3, r0
 8007526:	3401      	adds	r4, #1
 8007528:	9304      	str	r3, [sp, #16]
 800752a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800752e:	4826      	ldr	r0, [pc, #152]	; (80075c8 <_svfiprintf_r+0x1f0>)
 8007530:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007534:	2206      	movs	r2, #6
 8007536:	f7f8 fe6b 	bl	8000210 <memchr>
 800753a:	2800      	cmp	r0, #0
 800753c:	d038      	beq.n	80075b0 <_svfiprintf_r+0x1d8>
 800753e:	4b23      	ldr	r3, [pc, #140]	; (80075cc <_svfiprintf_r+0x1f4>)
 8007540:	bb1b      	cbnz	r3, 800758a <_svfiprintf_r+0x1b2>
 8007542:	9b03      	ldr	r3, [sp, #12]
 8007544:	3307      	adds	r3, #7
 8007546:	f023 0307 	bic.w	r3, r3, #7
 800754a:	3308      	adds	r3, #8
 800754c:	9303      	str	r3, [sp, #12]
 800754e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007550:	4433      	add	r3, r6
 8007552:	9309      	str	r3, [sp, #36]	; 0x24
 8007554:	e767      	b.n	8007426 <_svfiprintf_r+0x4e>
 8007556:	fb0c 3202 	mla	r2, ip, r2, r3
 800755a:	460c      	mov	r4, r1
 800755c:	2001      	movs	r0, #1
 800755e:	e7a5      	b.n	80074ac <_svfiprintf_r+0xd4>
 8007560:	2300      	movs	r3, #0
 8007562:	3401      	adds	r4, #1
 8007564:	9305      	str	r3, [sp, #20]
 8007566:	4619      	mov	r1, r3
 8007568:	f04f 0c0a 	mov.w	ip, #10
 800756c:	4620      	mov	r0, r4
 800756e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007572:	3a30      	subs	r2, #48	; 0x30
 8007574:	2a09      	cmp	r2, #9
 8007576:	d903      	bls.n	8007580 <_svfiprintf_r+0x1a8>
 8007578:	2b00      	cmp	r3, #0
 800757a:	d0c5      	beq.n	8007508 <_svfiprintf_r+0x130>
 800757c:	9105      	str	r1, [sp, #20]
 800757e:	e7c3      	b.n	8007508 <_svfiprintf_r+0x130>
 8007580:	fb0c 2101 	mla	r1, ip, r1, r2
 8007584:	4604      	mov	r4, r0
 8007586:	2301      	movs	r3, #1
 8007588:	e7f0      	b.n	800756c <_svfiprintf_r+0x194>
 800758a:	ab03      	add	r3, sp, #12
 800758c:	9300      	str	r3, [sp, #0]
 800758e:	462a      	mov	r2, r5
 8007590:	4b0f      	ldr	r3, [pc, #60]	; (80075d0 <_svfiprintf_r+0x1f8>)
 8007592:	a904      	add	r1, sp, #16
 8007594:	4638      	mov	r0, r7
 8007596:	f3af 8000 	nop.w
 800759a:	1c42      	adds	r2, r0, #1
 800759c:	4606      	mov	r6, r0
 800759e:	d1d6      	bne.n	800754e <_svfiprintf_r+0x176>
 80075a0:	89ab      	ldrh	r3, [r5, #12]
 80075a2:	065b      	lsls	r3, r3, #25
 80075a4:	f53f af2c 	bmi.w	8007400 <_svfiprintf_r+0x28>
 80075a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80075aa:	b01d      	add	sp, #116	; 0x74
 80075ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075b0:	ab03      	add	r3, sp, #12
 80075b2:	9300      	str	r3, [sp, #0]
 80075b4:	462a      	mov	r2, r5
 80075b6:	4b06      	ldr	r3, [pc, #24]	; (80075d0 <_svfiprintf_r+0x1f8>)
 80075b8:	a904      	add	r1, sp, #16
 80075ba:	4638      	mov	r0, r7
 80075bc:	f000 f87a 	bl	80076b4 <_printf_i>
 80075c0:	e7eb      	b.n	800759a <_svfiprintf_r+0x1c2>
 80075c2:	bf00      	nop
 80075c4:	08007d68 	.word	0x08007d68
 80075c8:	08007d72 	.word	0x08007d72
 80075cc:	00000000 	.word	0x00000000
 80075d0:	08007321 	.word	0x08007321
 80075d4:	08007d6e 	.word	0x08007d6e

080075d8 <_printf_common>:
 80075d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075dc:	4616      	mov	r6, r2
 80075de:	4699      	mov	r9, r3
 80075e0:	688a      	ldr	r2, [r1, #8]
 80075e2:	690b      	ldr	r3, [r1, #16]
 80075e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80075e8:	4293      	cmp	r3, r2
 80075ea:	bfb8      	it	lt
 80075ec:	4613      	movlt	r3, r2
 80075ee:	6033      	str	r3, [r6, #0]
 80075f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80075f4:	4607      	mov	r7, r0
 80075f6:	460c      	mov	r4, r1
 80075f8:	b10a      	cbz	r2, 80075fe <_printf_common+0x26>
 80075fa:	3301      	adds	r3, #1
 80075fc:	6033      	str	r3, [r6, #0]
 80075fe:	6823      	ldr	r3, [r4, #0]
 8007600:	0699      	lsls	r1, r3, #26
 8007602:	bf42      	ittt	mi
 8007604:	6833      	ldrmi	r3, [r6, #0]
 8007606:	3302      	addmi	r3, #2
 8007608:	6033      	strmi	r3, [r6, #0]
 800760a:	6825      	ldr	r5, [r4, #0]
 800760c:	f015 0506 	ands.w	r5, r5, #6
 8007610:	d106      	bne.n	8007620 <_printf_common+0x48>
 8007612:	f104 0a19 	add.w	sl, r4, #25
 8007616:	68e3      	ldr	r3, [r4, #12]
 8007618:	6832      	ldr	r2, [r6, #0]
 800761a:	1a9b      	subs	r3, r3, r2
 800761c:	42ab      	cmp	r3, r5
 800761e:	dc26      	bgt.n	800766e <_printf_common+0x96>
 8007620:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007624:	1e13      	subs	r3, r2, #0
 8007626:	6822      	ldr	r2, [r4, #0]
 8007628:	bf18      	it	ne
 800762a:	2301      	movne	r3, #1
 800762c:	0692      	lsls	r2, r2, #26
 800762e:	d42b      	bmi.n	8007688 <_printf_common+0xb0>
 8007630:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007634:	4649      	mov	r1, r9
 8007636:	4638      	mov	r0, r7
 8007638:	47c0      	blx	r8
 800763a:	3001      	adds	r0, #1
 800763c:	d01e      	beq.n	800767c <_printf_common+0xa4>
 800763e:	6823      	ldr	r3, [r4, #0]
 8007640:	68e5      	ldr	r5, [r4, #12]
 8007642:	6832      	ldr	r2, [r6, #0]
 8007644:	f003 0306 	and.w	r3, r3, #6
 8007648:	2b04      	cmp	r3, #4
 800764a:	bf08      	it	eq
 800764c:	1aad      	subeq	r5, r5, r2
 800764e:	68a3      	ldr	r3, [r4, #8]
 8007650:	6922      	ldr	r2, [r4, #16]
 8007652:	bf0c      	ite	eq
 8007654:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007658:	2500      	movne	r5, #0
 800765a:	4293      	cmp	r3, r2
 800765c:	bfc4      	itt	gt
 800765e:	1a9b      	subgt	r3, r3, r2
 8007660:	18ed      	addgt	r5, r5, r3
 8007662:	2600      	movs	r6, #0
 8007664:	341a      	adds	r4, #26
 8007666:	42b5      	cmp	r5, r6
 8007668:	d11a      	bne.n	80076a0 <_printf_common+0xc8>
 800766a:	2000      	movs	r0, #0
 800766c:	e008      	b.n	8007680 <_printf_common+0xa8>
 800766e:	2301      	movs	r3, #1
 8007670:	4652      	mov	r2, sl
 8007672:	4649      	mov	r1, r9
 8007674:	4638      	mov	r0, r7
 8007676:	47c0      	blx	r8
 8007678:	3001      	adds	r0, #1
 800767a:	d103      	bne.n	8007684 <_printf_common+0xac>
 800767c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007680:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007684:	3501      	adds	r5, #1
 8007686:	e7c6      	b.n	8007616 <_printf_common+0x3e>
 8007688:	18e1      	adds	r1, r4, r3
 800768a:	1c5a      	adds	r2, r3, #1
 800768c:	2030      	movs	r0, #48	; 0x30
 800768e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007692:	4422      	add	r2, r4
 8007694:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007698:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800769c:	3302      	adds	r3, #2
 800769e:	e7c7      	b.n	8007630 <_printf_common+0x58>
 80076a0:	2301      	movs	r3, #1
 80076a2:	4622      	mov	r2, r4
 80076a4:	4649      	mov	r1, r9
 80076a6:	4638      	mov	r0, r7
 80076a8:	47c0      	blx	r8
 80076aa:	3001      	adds	r0, #1
 80076ac:	d0e6      	beq.n	800767c <_printf_common+0xa4>
 80076ae:	3601      	adds	r6, #1
 80076b0:	e7d9      	b.n	8007666 <_printf_common+0x8e>
	...

080076b4 <_printf_i>:
 80076b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80076b8:	7e0f      	ldrb	r7, [r1, #24]
 80076ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80076bc:	2f78      	cmp	r7, #120	; 0x78
 80076be:	4691      	mov	r9, r2
 80076c0:	4680      	mov	r8, r0
 80076c2:	460c      	mov	r4, r1
 80076c4:	469a      	mov	sl, r3
 80076c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80076ca:	d807      	bhi.n	80076dc <_printf_i+0x28>
 80076cc:	2f62      	cmp	r7, #98	; 0x62
 80076ce:	d80a      	bhi.n	80076e6 <_printf_i+0x32>
 80076d0:	2f00      	cmp	r7, #0
 80076d2:	f000 80d8 	beq.w	8007886 <_printf_i+0x1d2>
 80076d6:	2f58      	cmp	r7, #88	; 0x58
 80076d8:	f000 80a3 	beq.w	8007822 <_printf_i+0x16e>
 80076dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80076e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80076e4:	e03a      	b.n	800775c <_printf_i+0xa8>
 80076e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80076ea:	2b15      	cmp	r3, #21
 80076ec:	d8f6      	bhi.n	80076dc <_printf_i+0x28>
 80076ee:	a101      	add	r1, pc, #4	; (adr r1, 80076f4 <_printf_i+0x40>)
 80076f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80076f4:	0800774d 	.word	0x0800774d
 80076f8:	08007761 	.word	0x08007761
 80076fc:	080076dd 	.word	0x080076dd
 8007700:	080076dd 	.word	0x080076dd
 8007704:	080076dd 	.word	0x080076dd
 8007708:	080076dd 	.word	0x080076dd
 800770c:	08007761 	.word	0x08007761
 8007710:	080076dd 	.word	0x080076dd
 8007714:	080076dd 	.word	0x080076dd
 8007718:	080076dd 	.word	0x080076dd
 800771c:	080076dd 	.word	0x080076dd
 8007720:	0800786d 	.word	0x0800786d
 8007724:	08007791 	.word	0x08007791
 8007728:	0800784f 	.word	0x0800784f
 800772c:	080076dd 	.word	0x080076dd
 8007730:	080076dd 	.word	0x080076dd
 8007734:	0800788f 	.word	0x0800788f
 8007738:	080076dd 	.word	0x080076dd
 800773c:	08007791 	.word	0x08007791
 8007740:	080076dd 	.word	0x080076dd
 8007744:	080076dd 	.word	0x080076dd
 8007748:	08007857 	.word	0x08007857
 800774c:	682b      	ldr	r3, [r5, #0]
 800774e:	1d1a      	adds	r2, r3, #4
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	602a      	str	r2, [r5, #0]
 8007754:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007758:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800775c:	2301      	movs	r3, #1
 800775e:	e0a3      	b.n	80078a8 <_printf_i+0x1f4>
 8007760:	6820      	ldr	r0, [r4, #0]
 8007762:	6829      	ldr	r1, [r5, #0]
 8007764:	0606      	lsls	r6, r0, #24
 8007766:	f101 0304 	add.w	r3, r1, #4
 800776a:	d50a      	bpl.n	8007782 <_printf_i+0xce>
 800776c:	680e      	ldr	r6, [r1, #0]
 800776e:	602b      	str	r3, [r5, #0]
 8007770:	2e00      	cmp	r6, #0
 8007772:	da03      	bge.n	800777c <_printf_i+0xc8>
 8007774:	232d      	movs	r3, #45	; 0x2d
 8007776:	4276      	negs	r6, r6
 8007778:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800777c:	485e      	ldr	r0, [pc, #376]	; (80078f8 <_printf_i+0x244>)
 800777e:	230a      	movs	r3, #10
 8007780:	e019      	b.n	80077b6 <_printf_i+0x102>
 8007782:	680e      	ldr	r6, [r1, #0]
 8007784:	602b      	str	r3, [r5, #0]
 8007786:	f010 0f40 	tst.w	r0, #64	; 0x40
 800778a:	bf18      	it	ne
 800778c:	b236      	sxthne	r6, r6
 800778e:	e7ef      	b.n	8007770 <_printf_i+0xbc>
 8007790:	682b      	ldr	r3, [r5, #0]
 8007792:	6820      	ldr	r0, [r4, #0]
 8007794:	1d19      	adds	r1, r3, #4
 8007796:	6029      	str	r1, [r5, #0]
 8007798:	0601      	lsls	r1, r0, #24
 800779a:	d501      	bpl.n	80077a0 <_printf_i+0xec>
 800779c:	681e      	ldr	r6, [r3, #0]
 800779e:	e002      	b.n	80077a6 <_printf_i+0xf2>
 80077a0:	0646      	lsls	r6, r0, #25
 80077a2:	d5fb      	bpl.n	800779c <_printf_i+0xe8>
 80077a4:	881e      	ldrh	r6, [r3, #0]
 80077a6:	4854      	ldr	r0, [pc, #336]	; (80078f8 <_printf_i+0x244>)
 80077a8:	2f6f      	cmp	r7, #111	; 0x6f
 80077aa:	bf0c      	ite	eq
 80077ac:	2308      	moveq	r3, #8
 80077ae:	230a      	movne	r3, #10
 80077b0:	2100      	movs	r1, #0
 80077b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80077b6:	6865      	ldr	r5, [r4, #4]
 80077b8:	60a5      	str	r5, [r4, #8]
 80077ba:	2d00      	cmp	r5, #0
 80077bc:	bfa2      	ittt	ge
 80077be:	6821      	ldrge	r1, [r4, #0]
 80077c0:	f021 0104 	bicge.w	r1, r1, #4
 80077c4:	6021      	strge	r1, [r4, #0]
 80077c6:	b90e      	cbnz	r6, 80077cc <_printf_i+0x118>
 80077c8:	2d00      	cmp	r5, #0
 80077ca:	d04d      	beq.n	8007868 <_printf_i+0x1b4>
 80077cc:	4615      	mov	r5, r2
 80077ce:	fbb6 f1f3 	udiv	r1, r6, r3
 80077d2:	fb03 6711 	mls	r7, r3, r1, r6
 80077d6:	5dc7      	ldrb	r7, [r0, r7]
 80077d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80077dc:	4637      	mov	r7, r6
 80077de:	42bb      	cmp	r3, r7
 80077e0:	460e      	mov	r6, r1
 80077e2:	d9f4      	bls.n	80077ce <_printf_i+0x11a>
 80077e4:	2b08      	cmp	r3, #8
 80077e6:	d10b      	bne.n	8007800 <_printf_i+0x14c>
 80077e8:	6823      	ldr	r3, [r4, #0]
 80077ea:	07de      	lsls	r6, r3, #31
 80077ec:	d508      	bpl.n	8007800 <_printf_i+0x14c>
 80077ee:	6923      	ldr	r3, [r4, #16]
 80077f0:	6861      	ldr	r1, [r4, #4]
 80077f2:	4299      	cmp	r1, r3
 80077f4:	bfde      	ittt	le
 80077f6:	2330      	movle	r3, #48	; 0x30
 80077f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80077fc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007800:	1b52      	subs	r2, r2, r5
 8007802:	6122      	str	r2, [r4, #16]
 8007804:	f8cd a000 	str.w	sl, [sp]
 8007808:	464b      	mov	r3, r9
 800780a:	aa03      	add	r2, sp, #12
 800780c:	4621      	mov	r1, r4
 800780e:	4640      	mov	r0, r8
 8007810:	f7ff fee2 	bl	80075d8 <_printf_common>
 8007814:	3001      	adds	r0, #1
 8007816:	d14c      	bne.n	80078b2 <_printf_i+0x1fe>
 8007818:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800781c:	b004      	add	sp, #16
 800781e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007822:	4835      	ldr	r0, [pc, #212]	; (80078f8 <_printf_i+0x244>)
 8007824:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007828:	6829      	ldr	r1, [r5, #0]
 800782a:	6823      	ldr	r3, [r4, #0]
 800782c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007830:	6029      	str	r1, [r5, #0]
 8007832:	061d      	lsls	r5, r3, #24
 8007834:	d514      	bpl.n	8007860 <_printf_i+0x1ac>
 8007836:	07df      	lsls	r7, r3, #31
 8007838:	bf44      	itt	mi
 800783a:	f043 0320 	orrmi.w	r3, r3, #32
 800783e:	6023      	strmi	r3, [r4, #0]
 8007840:	b91e      	cbnz	r6, 800784a <_printf_i+0x196>
 8007842:	6823      	ldr	r3, [r4, #0]
 8007844:	f023 0320 	bic.w	r3, r3, #32
 8007848:	6023      	str	r3, [r4, #0]
 800784a:	2310      	movs	r3, #16
 800784c:	e7b0      	b.n	80077b0 <_printf_i+0xfc>
 800784e:	6823      	ldr	r3, [r4, #0]
 8007850:	f043 0320 	orr.w	r3, r3, #32
 8007854:	6023      	str	r3, [r4, #0]
 8007856:	2378      	movs	r3, #120	; 0x78
 8007858:	4828      	ldr	r0, [pc, #160]	; (80078fc <_printf_i+0x248>)
 800785a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800785e:	e7e3      	b.n	8007828 <_printf_i+0x174>
 8007860:	0659      	lsls	r1, r3, #25
 8007862:	bf48      	it	mi
 8007864:	b2b6      	uxthmi	r6, r6
 8007866:	e7e6      	b.n	8007836 <_printf_i+0x182>
 8007868:	4615      	mov	r5, r2
 800786a:	e7bb      	b.n	80077e4 <_printf_i+0x130>
 800786c:	682b      	ldr	r3, [r5, #0]
 800786e:	6826      	ldr	r6, [r4, #0]
 8007870:	6961      	ldr	r1, [r4, #20]
 8007872:	1d18      	adds	r0, r3, #4
 8007874:	6028      	str	r0, [r5, #0]
 8007876:	0635      	lsls	r5, r6, #24
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	d501      	bpl.n	8007880 <_printf_i+0x1cc>
 800787c:	6019      	str	r1, [r3, #0]
 800787e:	e002      	b.n	8007886 <_printf_i+0x1d2>
 8007880:	0670      	lsls	r0, r6, #25
 8007882:	d5fb      	bpl.n	800787c <_printf_i+0x1c8>
 8007884:	8019      	strh	r1, [r3, #0]
 8007886:	2300      	movs	r3, #0
 8007888:	6123      	str	r3, [r4, #16]
 800788a:	4615      	mov	r5, r2
 800788c:	e7ba      	b.n	8007804 <_printf_i+0x150>
 800788e:	682b      	ldr	r3, [r5, #0]
 8007890:	1d1a      	adds	r2, r3, #4
 8007892:	602a      	str	r2, [r5, #0]
 8007894:	681d      	ldr	r5, [r3, #0]
 8007896:	6862      	ldr	r2, [r4, #4]
 8007898:	2100      	movs	r1, #0
 800789a:	4628      	mov	r0, r5
 800789c:	f7f8 fcb8 	bl	8000210 <memchr>
 80078a0:	b108      	cbz	r0, 80078a6 <_printf_i+0x1f2>
 80078a2:	1b40      	subs	r0, r0, r5
 80078a4:	6060      	str	r0, [r4, #4]
 80078a6:	6863      	ldr	r3, [r4, #4]
 80078a8:	6123      	str	r3, [r4, #16]
 80078aa:	2300      	movs	r3, #0
 80078ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078b0:	e7a8      	b.n	8007804 <_printf_i+0x150>
 80078b2:	6923      	ldr	r3, [r4, #16]
 80078b4:	462a      	mov	r2, r5
 80078b6:	4649      	mov	r1, r9
 80078b8:	4640      	mov	r0, r8
 80078ba:	47d0      	blx	sl
 80078bc:	3001      	adds	r0, #1
 80078be:	d0ab      	beq.n	8007818 <_printf_i+0x164>
 80078c0:	6823      	ldr	r3, [r4, #0]
 80078c2:	079b      	lsls	r3, r3, #30
 80078c4:	d413      	bmi.n	80078ee <_printf_i+0x23a>
 80078c6:	68e0      	ldr	r0, [r4, #12]
 80078c8:	9b03      	ldr	r3, [sp, #12]
 80078ca:	4298      	cmp	r0, r3
 80078cc:	bfb8      	it	lt
 80078ce:	4618      	movlt	r0, r3
 80078d0:	e7a4      	b.n	800781c <_printf_i+0x168>
 80078d2:	2301      	movs	r3, #1
 80078d4:	4632      	mov	r2, r6
 80078d6:	4649      	mov	r1, r9
 80078d8:	4640      	mov	r0, r8
 80078da:	47d0      	blx	sl
 80078dc:	3001      	adds	r0, #1
 80078de:	d09b      	beq.n	8007818 <_printf_i+0x164>
 80078e0:	3501      	adds	r5, #1
 80078e2:	68e3      	ldr	r3, [r4, #12]
 80078e4:	9903      	ldr	r1, [sp, #12]
 80078e6:	1a5b      	subs	r3, r3, r1
 80078e8:	42ab      	cmp	r3, r5
 80078ea:	dcf2      	bgt.n	80078d2 <_printf_i+0x21e>
 80078ec:	e7eb      	b.n	80078c6 <_printf_i+0x212>
 80078ee:	2500      	movs	r5, #0
 80078f0:	f104 0619 	add.w	r6, r4, #25
 80078f4:	e7f5      	b.n	80078e2 <_printf_i+0x22e>
 80078f6:	bf00      	nop
 80078f8:	08007d79 	.word	0x08007d79
 80078fc:	08007d8a 	.word	0x08007d8a

08007900 <memmove>:
 8007900:	4288      	cmp	r0, r1
 8007902:	b510      	push	{r4, lr}
 8007904:	eb01 0402 	add.w	r4, r1, r2
 8007908:	d902      	bls.n	8007910 <memmove+0x10>
 800790a:	4284      	cmp	r4, r0
 800790c:	4623      	mov	r3, r4
 800790e:	d807      	bhi.n	8007920 <memmove+0x20>
 8007910:	1e43      	subs	r3, r0, #1
 8007912:	42a1      	cmp	r1, r4
 8007914:	d008      	beq.n	8007928 <memmove+0x28>
 8007916:	f811 2b01 	ldrb.w	r2, [r1], #1
 800791a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800791e:	e7f8      	b.n	8007912 <memmove+0x12>
 8007920:	4402      	add	r2, r0
 8007922:	4601      	mov	r1, r0
 8007924:	428a      	cmp	r2, r1
 8007926:	d100      	bne.n	800792a <memmove+0x2a>
 8007928:	bd10      	pop	{r4, pc}
 800792a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800792e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007932:	e7f7      	b.n	8007924 <memmove+0x24>

08007934 <_free_r>:
 8007934:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007936:	2900      	cmp	r1, #0
 8007938:	d044      	beq.n	80079c4 <_free_r+0x90>
 800793a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800793e:	9001      	str	r0, [sp, #4]
 8007940:	2b00      	cmp	r3, #0
 8007942:	f1a1 0404 	sub.w	r4, r1, #4
 8007946:	bfb8      	it	lt
 8007948:	18e4      	addlt	r4, r4, r3
 800794a:	f000 f913 	bl	8007b74 <__malloc_lock>
 800794e:	4a1e      	ldr	r2, [pc, #120]	; (80079c8 <_free_r+0x94>)
 8007950:	9801      	ldr	r0, [sp, #4]
 8007952:	6813      	ldr	r3, [r2, #0]
 8007954:	b933      	cbnz	r3, 8007964 <_free_r+0x30>
 8007956:	6063      	str	r3, [r4, #4]
 8007958:	6014      	str	r4, [r2, #0]
 800795a:	b003      	add	sp, #12
 800795c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007960:	f000 b90e 	b.w	8007b80 <__malloc_unlock>
 8007964:	42a3      	cmp	r3, r4
 8007966:	d908      	bls.n	800797a <_free_r+0x46>
 8007968:	6825      	ldr	r5, [r4, #0]
 800796a:	1961      	adds	r1, r4, r5
 800796c:	428b      	cmp	r3, r1
 800796e:	bf01      	itttt	eq
 8007970:	6819      	ldreq	r1, [r3, #0]
 8007972:	685b      	ldreq	r3, [r3, #4]
 8007974:	1949      	addeq	r1, r1, r5
 8007976:	6021      	streq	r1, [r4, #0]
 8007978:	e7ed      	b.n	8007956 <_free_r+0x22>
 800797a:	461a      	mov	r2, r3
 800797c:	685b      	ldr	r3, [r3, #4]
 800797e:	b10b      	cbz	r3, 8007984 <_free_r+0x50>
 8007980:	42a3      	cmp	r3, r4
 8007982:	d9fa      	bls.n	800797a <_free_r+0x46>
 8007984:	6811      	ldr	r1, [r2, #0]
 8007986:	1855      	adds	r5, r2, r1
 8007988:	42a5      	cmp	r5, r4
 800798a:	d10b      	bne.n	80079a4 <_free_r+0x70>
 800798c:	6824      	ldr	r4, [r4, #0]
 800798e:	4421      	add	r1, r4
 8007990:	1854      	adds	r4, r2, r1
 8007992:	42a3      	cmp	r3, r4
 8007994:	6011      	str	r1, [r2, #0]
 8007996:	d1e0      	bne.n	800795a <_free_r+0x26>
 8007998:	681c      	ldr	r4, [r3, #0]
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	6053      	str	r3, [r2, #4]
 800799e:	4421      	add	r1, r4
 80079a0:	6011      	str	r1, [r2, #0]
 80079a2:	e7da      	b.n	800795a <_free_r+0x26>
 80079a4:	d902      	bls.n	80079ac <_free_r+0x78>
 80079a6:	230c      	movs	r3, #12
 80079a8:	6003      	str	r3, [r0, #0]
 80079aa:	e7d6      	b.n	800795a <_free_r+0x26>
 80079ac:	6825      	ldr	r5, [r4, #0]
 80079ae:	1961      	adds	r1, r4, r5
 80079b0:	428b      	cmp	r3, r1
 80079b2:	bf04      	itt	eq
 80079b4:	6819      	ldreq	r1, [r3, #0]
 80079b6:	685b      	ldreq	r3, [r3, #4]
 80079b8:	6063      	str	r3, [r4, #4]
 80079ba:	bf04      	itt	eq
 80079bc:	1949      	addeq	r1, r1, r5
 80079be:	6021      	streq	r1, [r4, #0]
 80079c0:	6054      	str	r4, [r2, #4]
 80079c2:	e7ca      	b.n	800795a <_free_r+0x26>
 80079c4:	b003      	add	sp, #12
 80079c6:	bd30      	pop	{r4, r5, pc}
 80079c8:	200012cc 	.word	0x200012cc

080079cc <sbrk_aligned>:
 80079cc:	b570      	push	{r4, r5, r6, lr}
 80079ce:	4e0e      	ldr	r6, [pc, #56]	; (8007a08 <sbrk_aligned+0x3c>)
 80079d0:	460c      	mov	r4, r1
 80079d2:	6831      	ldr	r1, [r6, #0]
 80079d4:	4605      	mov	r5, r0
 80079d6:	b911      	cbnz	r1, 80079de <sbrk_aligned+0x12>
 80079d8:	f000 f8bc 	bl	8007b54 <_sbrk_r>
 80079dc:	6030      	str	r0, [r6, #0]
 80079de:	4621      	mov	r1, r4
 80079e0:	4628      	mov	r0, r5
 80079e2:	f000 f8b7 	bl	8007b54 <_sbrk_r>
 80079e6:	1c43      	adds	r3, r0, #1
 80079e8:	d00a      	beq.n	8007a00 <sbrk_aligned+0x34>
 80079ea:	1cc4      	adds	r4, r0, #3
 80079ec:	f024 0403 	bic.w	r4, r4, #3
 80079f0:	42a0      	cmp	r0, r4
 80079f2:	d007      	beq.n	8007a04 <sbrk_aligned+0x38>
 80079f4:	1a21      	subs	r1, r4, r0
 80079f6:	4628      	mov	r0, r5
 80079f8:	f000 f8ac 	bl	8007b54 <_sbrk_r>
 80079fc:	3001      	adds	r0, #1
 80079fe:	d101      	bne.n	8007a04 <sbrk_aligned+0x38>
 8007a00:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007a04:	4620      	mov	r0, r4
 8007a06:	bd70      	pop	{r4, r5, r6, pc}
 8007a08:	200012d0 	.word	0x200012d0

08007a0c <_malloc_r>:
 8007a0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a10:	1ccd      	adds	r5, r1, #3
 8007a12:	f025 0503 	bic.w	r5, r5, #3
 8007a16:	3508      	adds	r5, #8
 8007a18:	2d0c      	cmp	r5, #12
 8007a1a:	bf38      	it	cc
 8007a1c:	250c      	movcc	r5, #12
 8007a1e:	2d00      	cmp	r5, #0
 8007a20:	4607      	mov	r7, r0
 8007a22:	db01      	blt.n	8007a28 <_malloc_r+0x1c>
 8007a24:	42a9      	cmp	r1, r5
 8007a26:	d905      	bls.n	8007a34 <_malloc_r+0x28>
 8007a28:	230c      	movs	r3, #12
 8007a2a:	603b      	str	r3, [r7, #0]
 8007a2c:	2600      	movs	r6, #0
 8007a2e:	4630      	mov	r0, r6
 8007a30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a34:	4e2e      	ldr	r6, [pc, #184]	; (8007af0 <_malloc_r+0xe4>)
 8007a36:	f000 f89d 	bl	8007b74 <__malloc_lock>
 8007a3a:	6833      	ldr	r3, [r6, #0]
 8007a3c:	461c      	mov	r4, r3
 8007a3e:	bb34      	cbnz	r4, 8007a8e <_malloc_r+0x82>
 8007a40:	4629      	mov	r1, r5
 8007a42:	4638      	mov	r0, r7
 8007a44:	f7ff ffc2 	bl	80079cc <sbrk_aligned>
 8007a48:	1c43      	adds	r3, r0, #1
 8007a4a:	4604      	mov	r4, r0
 8007a4c:	d14d      	bne.n	8007aea <_malloc_r+0xde>
 8007a4e:	6834      	ldr	r4, [r6, #0]
 8007a50:	4626      	mov	r6, r4
 8007a52:	2e00      	cmp	r6, #0
 8007a54:	d140      	bne.n	8007ad8 <_malloc_r+0xcc>
 8007a56:	6823      	ldr	r3, [r4, #0]
 8007a58:	4631      	mov	r1, r6
 8007a5a:	4638      	mov	r0, r7
 8007a5c:	eb04 0803 	add.w	r8, r4, r3
 8007a60:	f000 f878 	bl	8007b54 <_sbrk_r>
 8007a64:	4580      	cmp	r8, r0
 8007a66:	d13a      	bne.n	8007ade <_malloc_r+0xd2>
 8007a68:	6821      	ldr	r1, [r4, #0]
 8007a6a:	3503      	adds	r5, #3
 8007a6c:	1a6d      	subs	r5, r5, r1
 8007a6e:	f025 0503 	bic.w	r5, r5, #3
 8007a72:	3508      	adds	r5, #8
 8007a74:	2d0c      	cmp	r5, #12
 8007a76:	bf38      	it	cc
 8007a78:	250c      	movcc	r5, #12
 8007a7a:	4629      	mov	r1, r5
 8007a7c:	4638      	mov	r0, r7
 8007a7e:	f7ff ffa5 	bl	80079cc <sbrk_aligned>
 8007a82:	3001      	adds	r0, #1
 8007a84:	d02b      	beq.n	8007ade <_malloc_r+0xd2>
 8007a86:	6823      	ldr	r3, [r4, #0]
 8007a88:	442b      	add	r3, r5
 8007a8a:	6023      	str	r3, [r4, #0]
 8007a8c:	e00e      	b.n	8007aac <_malloc_r+0xa0>
 8007a8e:	6822      	ldr	r2, [r4, #0]
 8007a90:	1b52      	subs	r2, r2, r5
 8007a92:	d41e      	bmi.n	8007ad2 <_malloc_r+0xc6>
 8007a94:	2a0b      	cmp	r2, #11
 8007a96:	d916      	bls.n	8007ac6 <_malloc_r+0xba>
 8007a98:	1961      	adds	r1, r4, r5
 8007a9a:	42a3      	cmp	r3, r4
 8007a9c:	6025      	str	r5, [r4, #0]
 8007a9e:	bf18      	it	ne
 8007aa0:	6059      	strne	r1, [r3, #4]
 8007aa2:	6863      	ldr	r3, [r4, #4]
 8007aa4:	bf08      	it	eq
 8007aa6:	6031      	streq	r1, [r6, #0]
 8007aa8:	5162      	str	r2, [r4, r5]
 8007aaa:	604b      	str	r3, [r1, #4]
 8007aac:	4638      	mov	r0, r7
 8007aae:	f104 060b 	add.w	r6, r4, #11
 8007ab2:	f000 f865 	bl	8007b80 <__malloc_unlock>
 8007ab6:	f026 0607 	bic.w	r6, r6, #7
 8007aba:	1d23      	adds	r3, r4, #4
 8007abc:	1af2      	subs	r2, r6, r3
 8007abe:	d0b6      	beq.n	8007a2e <_malloc_r+0x22>
 8007ac0:	1b9b      	subs	r3, r3, r6
 8007ac2:	50a3      	str	r3, [r4, r2]
 8007ac4:	e7b3      	b.n	8007a2e <_malloc_r+0x22>
 8007ac6:	6862      	ldr	r2, [r4, #4]
 8007ac8:	42a3      	cmp	r3, r4
 8007aca:	bf0c      	ite	eq
 8007acc:	6032      	streq	r2, [r6, #0]
 8007ace:	605a      	strne	r2, [r3, #4]
 8007ad0:	e7ec      	b.n	8007aac <_malloc_r+0xa0>
 8007ad2:	4623      	mov	r3, r4
 8007ad4:	6864      	ldr	r4, [r4, #4]
 8007ad6:	e7b2      	b.n	8007a3e <_malloc_r+0x32>
 8007ad8:	4634      	mov	r4, r6
 8007ada:	6876      	ldr	r6, [r6, #4]
 8007adc:	e7b9      	b.n	8007a52 <_malloc_r+0x46>
 8007ade:	230c      	movs	r3, #12
 8007ae0:	603b      	str	r3, [r7, #0]
 8007ae2:	4638      	mov	r0, r7
 8007ae4:	f000 f84c 	bl	8007b80 <__malloc_unlock>
 8007ae8:	e7a1      	b.n	8007a2e <_malloc_r+0x22>
 8007aea:	6025      	str	r5, [r4, #0]
 8007aec:	e7de      	b.n	8007aac <_malloc_r+0xa0>
 8007aee:	bf00      	nop
 8007af0:	200012cc 	.word	0x200012cc

08007af4 <_realloc_r>:
 8007af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007af8:	4680      	mov	r8, r0
 8007afa:	4614      	mov	r4, r2
 8007afc:	460e      	mov	r6, r1
 8007afe:	b921      	cbnz	r1, 8007b0a <_realloc_r+0x16>
 8007b00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b04:	4611      	mov	r1, r2
 8007b06:	f7ff bf81 	b.w	8007a0c <_malloc_r>
 8007b0a:	b92a      	cbnz	r2, 8007b18 <_realloc_r+0x24>
 8007b0c:	f7ff ff12 	bl	8007934 <_free_r>
 8007b10:	4625      	mov	r5, r4
 8007b12:	4628      	mov	r0, r5
 8007b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b18:	f000 f838 	bl	8007b8c <_malloc_usable_size_r>
 8007b1c:	4284      	cmp	r4, r0
 8007b1e:	4607      	mov	r7, r0
 8007b20:	d802      	bhi.n	8007b28 <_realloc_r+0x34>
 8007b22:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007b26:	d812      	bhi.n	8007b4e <_realloc_r+0x5a>
 8007b28:	4621      	mov	r1, r4
 8007b2a:	4640      	mov	r0, r8
 8007b2c:	f7ff ff6e 	bl	8007a0c <_malloc_r>
 8007b30:	4605      	mov	r5, r0
 8007b32:	2800      	cmp	r0, #0
 8007b34:	d0ed      	beq.n	8007b12 <_realloc_r+0x1e>
 8007b36:	42bc      	cmp	r4, r7
 8007b38:	4622      	mov	r2, r4
 8007b3a:	4631      	mov	r1, r6
 8007b3c:	bf28      	it	cs
 8007b3e:	463a      	movcs	r2, r7
 8007b40:	f7ff fbb8 	bl	80072b4 <memcpy>
 8007b44:	4631      	mov	r1, r6
 8007b46:	4640      	mov	r0, r8
 8007b48:	f7ff fef4 	bl	8007934 <_free_r>
 8007b4c:	e7e1      	b.n	8007b12 <_realloc_r+0x1e>
 8007b4e:	4635      	mov	r5, r6
 8007b50:	e7df      	b.n	8007b12 <_realloc_r+0x1e>
	...

08007b54 <_sbrk_r>:
 8007b54:	b538      	push	{r3, r4, r5, lr}
 8007b56:	4d06      	ldr	r5, [pc, #24]	; (8007b70 <_sbrk_r+0x1c>)
 8007b58:	2300      	movs	r3, #0
 8007b5a:	4604      	mov	r4, r0
 8007b5c:	4608      	mov	r0, r1
 8007b5e:	602b      	str	r3, [r5, #0]
 8007b60:	f7ff fb0c 	bl	800717c <_sbrk>
 8007b64:	1c43      	adds	r3, r0, #1
 8007b66:	d102      	bne.n	8007b6e <_sbrk_r+0x1a>
 8007b68:	682b      	ldr	r3, [r5, #0]
 8007b6a:	b103      	cbz	r3, 8007b6e <_sbrk_r+0x1a>
 8007b6c:	6023      	str	r3, [r4, #0]
 8007b6e:	bd38      	pop	{r3, r4, r5, pc}
 8007b70:	200012d4 	.word	0x200012d4

08007b74 <__malloc_lock>:
 8007b74:	4801      	ldr	r0, [pc, #4]	; (8007b7c <__malloc_lock+0x8>)
 8007b76:	f000 b811 	b.w	8007b9c <__retarget_lock_acquire_recursive>
 8007b7a:	bf00      	nop
 8007b7c:	200012d8 	.word	0x200012d8

08007b80 <__malloc_unlock>:
 8007b80:	4801      	ldr	r0, [pc, #4]	; (8007b88 <__malloc_unlock+0x8>)
 8007b82:	f000 b80c 	b.w	8007b9e <__retarget_lock_release_recursive>
 8007b86:	bf00      	nop
 8007b88:	200012d8 	.word	0x200012d8

08007b8c <_malloc_usable_size_r>:
 8007b8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b90:	1f18      	subs	r0, r3, #4
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	bfbc      	itt	lt
 8007b96:	580b      	ldrlt	r3, [r1, r0]
 8007b98:	18c0      	addlt	r0, r0, r3
 8007b9a:	4770      	bx	lr

08007b9c <__retarget_lock_acquire_recursive>:
 8007b9c:	4770      	bx	lr

08007b9e <__retarget_lock_release_recursive>:
 8007b9e:	4770      	bx	lr

08007ba0 <_init>:
 8007ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ba2:	bf00      	nop
 8007ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ba6:	bc08      	pop	{r3}
 8007ba8:	469e      	mov	lr, r3
 8007baa:	4770      	bx	lr

08007bac <_fini>:
 8007bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bae:	bf00      	nop
 8007bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bb2:	bc08      	pop	{r3}
 8007bb4:	469e      	mov	lr, r3
 8007bb6:	4770      	bx	lr
