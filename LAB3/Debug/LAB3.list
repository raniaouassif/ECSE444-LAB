
LAB3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045c4  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004780  08004780  00014780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047c0  080047c0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080047c0  080047c0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080047c0  080047c0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047c0  080047c0  000147c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047c4  080047c4  000147c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080047c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  2000000c  080047d4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  080047d4  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000977a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001833  00000000  00000000  000297b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000940  00000000  00000000  0002aff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000888  00000000  00000000  0002b930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029ebf  00000000  00000000  0002c1b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009967  00000000  00000000  00056077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00107c89  00000000  00000000  0005f9de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00167667  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000262c  00000000  00000000  001676b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08004768 	.word	0x08004768

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08004768 	.word	0x08004768

080001fc <__aeabi_drsub>:
 80001fc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000200:	e002      	b.n	8000208 <__adddf3>
 8000202:	bf00      	nop

08000204 <__aeabi_dsub>:
 8000204:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000208 <__adddf3>:
 8000208:	b530      	push	{r4, r5, lr}
 800020a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800020e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000212:	ea94 0f05 	teq	r4, r5
 8000216:	bf08      	it	eq
 8000218:	ea90 0f02 	teqeq	r0, r2
 800021c:	bf1f      	itttt	ne
 800021e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000222:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000226:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800022e:	f000 80e2 	beq.w	80003f6 <__adddf3+0x1ee>
 8000232:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000236:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023a:	bfb8      	it	lt
 800023c:	426d      	neglt	r5, r5
 800023e:	dd0c      	ble.n	800025a <__adddf3+0x52>
 8000240:	442c      	add	r4, r5
 8000242:	ea80 0202 	eor.w	r2, r0, r2
 8000246:	ea81 0303 	eor.w	r3, r1, r3
 800024a:	ea82 0000 	eor.w	r0, r2, r0
 800024e:	ea83 0101 	eor.w	r1, r3, r1
 8000252:	ea80 0202 	eor.w	r2, r0, r2
 8000256:	ea81 0303 	eor.w	r3, r1, r3
 800025a:	2d36      	cmp	r5, #54	; 0x36
 800025c:	bf88      	it	hi
 800025e:	bd30      	pophi	{r4, r5, pc}
 8000260:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000264:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000268:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800026c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x70>
 8000272:	4240      	negs	r0, r0
 8000274:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000278:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800027c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000280:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000284:	d002      	beq.n	800028c <__adddf3+0x84>
 8000286:	4252      	negs	r2, r2
 8000288:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800028c:	ea94 0f05 	teq	r4, r5
 8000290:	f000 80a7 	beq.w	80003e2 <__adddf3+0x1da>
 8000294:	f1a4 0401 	sub.w	r4, r4, #1
 8000298:	f1d5 0e20 	rsbs	lr, r5, #32
 800029c:	db0d      	blt.n	80002ba <__adddf3+0xb2>
 800029e:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a2:	fa22 f205 	lsr.w	r2, r2, r5
 80002a6:	1880      	adds	r0, r0, r2
 80002a8:	f141 0100 	adc.w	r1, r1, #0
 80002ac:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b0:	1880      	adds	r0, r0, r2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	4159      	adcs	r1, r3
 80002b8:	e00e      	b.n	80002d8 <__adddf3+0xd0>
 80002ba:	f1a5 0520 	sub.w	r5, r5, #32
 80002be:	f10e 0e20 	add.w	lr, lr, #32
 80002c2:	2a01      	cmp	r2, #1
 80002c4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002c8:	bf28      	it	cs
 80002ca:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	18c0      	adds	r0, r0, r3
 80002d4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002dc:	d507      	bpl.n	80002ee <__adddf3+0xe6>
 80002de:	f04f 0e00 	mov.w	lr, #0
 80002e2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002e6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ea:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ee:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002f2:	d31b      	bcc.n	800032c <__adddf3+0x124>
 80002f4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002f8:	d30c      	bcc.n	8000314 <__adddf3+0x10c>
 80002fa:	0849      	lsrs	r1, r1, #1
 80002fc:	ea5f 0030 	movs.w	r0, r0, rrx
 8000300:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000304:	f104 0401 	add.w	r4, r4, #1
 8000308:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800030c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000310:	f080 809a 	bcs.w	8000448 <__adddf3+0x240>
 8000314:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000318:	bf08      	it	eq
 800031a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800031e:	f150 0000 	adcs.w	r0, r0, #0
 8000322:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000326:	ea41 0105 	orr.w	r1, r1, r5
 800032a:	bd30      	pop	{r4, r5, pc}
 800032c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000330:	4140      	adcs	r0, r0
 8000332:	eb41 0101 	adc.w	r1, r1, r1
 8000336:	3c01      	subs	r4, #1
 8000338:	bf28      	it	cs
 800033a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800033e:	d2e9      	bcs.n	8000314 <__adddf3+0x10c>
 8000340:	f091 0f00 	teq	r1, #0
 8000344:	bf04      	itt	eq
 8000346:	4601      	moveq	r1, r0
 8000348:	2000      	moveq	r0, #0
 800034a:	fab1 f381 	clz	r3, r1
 800034e:	bf08      	it	eq
 8000350:	3320      	addeq	r3, #32
 8000352:	f1a3 030b 	sub.w	r3, r3, #11
 8000356:	f1b3 0220 	subs.w	r2, r3, #32
 800035a:	da0c      	bge.n	8000376 <__adddf3+0x16e>
 800035c:	320c      	adds	r2, #12
 800035e:	dd08      	ble.n	8000372 <__adddf3+0x16a>
 8000360:	f102 0c14 	add.w	ip, r2, #20
 8000364:	f1c2 020c 	rsb	r2, r2, #12
 8000368:	fa01 f00c 	lsl.w	r0, r1, ip
 800036c:	fa21 f102 	lsr.w	r1, r1, r2
 8000370:	e00c      	b.n	800038c <__adddf3+0x184>
 8000372:	f102 0214 	add.w	r2, r2, #20
 8000376:	bfd8      	it	le
 8000378:	f1c2 0c20 	rsble	ip, r2, #32
 800037c:	fa01 f102 	lsl.w	r1, r1, r2
 8000380:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000384:	bfdc      	itt	le
 8000386:	ea41 010c 	orrle.w	r1, r1, ip
 800038a:	4090      	lslle	r0, r2
 800038c:	1ae4      	subs	r4, r4, r3
 800038e:	bfa2      	ittt	ge
 8000390:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000394:	4329      	orrge	r1, r5
 8000396:	bd30      	popge	{r4, r5, pc}
 8000398:	ea6f 0404 	mvn.w	r4, r4
 800039c:	3c1f      	subs	r4, #31
 800039e:	da1c      	bge.n	80003da <__adddf3+0x1d2>
 80003a0:	340c      	adds	r4, #12
 80003a2:	dc0e      	bgt.n	80003c2 <__adddf3+0x1ba>
 80003a4:	f104 0414 	add.w	r4, r4, #20
 80003a8:	f1c4 0220 	rsb	r2, r4, #32
 80003ac:	fa20 f004 	lsr.w	r0, r0, r4
 80003b0:	fa01 f302 	lsl.w	r3, r1, r2
 80003b4:	ea40 0003 	orr.w	r0, r0, r3
 80003b8:	fa21 f304 	lsr.w	r3, r1, r4
 80003bc:	ea45 0103 	orr.w	r1, r5, r3
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	f1c4 040c 	rsb	r4, r4, #12
 80003c6:	f1c4 0220 	rsb	r2, r4, #32
 80003ca:	fa20 f002 	lsr.w	r0, r0, r2
 80003ce:	fa01 f304 	lsl.w	r3, r1, r4
 80003d2:	ea40 0003 	orr.w	r0, r0, r3
 80003d6:	4629      	mov	r1, r5
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	fa21 f004 	lsr.w	r0, r1, r4
 80003de:	4629      	mov	r1, r5
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	f094 0f00 	teq	r4, #0
 80003e6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ea:	bf06      	itte	eq
 80003ec:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f0:	3401      	addeq	r4, #1
 80003f2:	3d01      	subne	r5, #1
 80003f4:	e74e      	b.n	8000294 <__adddf3+0x8c>
 80003f6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fa:	bf18      	it	ne
 80003fc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000400:	d029      	beq.n	8000456 <__adddf3+0x24e>
 8000402:	ea94 0f05 	teq	r4, r5
 8000406:	bf08      	it	eq
 8000408:	ea90 0f02 	teqeq	r0, r2
 800040c:	d005      	beq.n	800041a <__adddf3+0x212>
 800040e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000412:	bf04      	itt	eq
 8000414:	4619      	moveq	r1, r3
 8000416:	4610      	moveq	r0, r2
 8000418:	bd30      	pop	{r4, r5, pc}
 800041a:	ea91 0f03 	teq	r1, r3
 800041e:	bf1e      	ittt	ne
 8000420:	2100      	movne	r1, #0
 8000422:	2000      	movne	r0, #0
 8000424:	bd30      	popne	{r4, r5, pc}
 8000426:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042a:	d105      	bne.n	8000438 <__adddf3+0x230>
 800042c:	0040      	lsls	r0, r0, #1
 800042e:	4149      	adcs	r1, r1
 8000430:	bf28      	it	cs
 8000432:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000436:	bd30      	pop	{r4, r5, pc}
 8000438:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800043c:	bf3c      	itt	cc
 800043e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000442:	bd30      	popcc	{r4, r5, pc}
 8000444:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000448:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800044c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000450:	f04f 0000 	mov.w	r0, #0
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045a:	bf1a      	itte	ne
 800045c:	4619      	movne	r1, r3
 800045e:	4610      	movne	r0, r2
 8000460:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000464:	bf1c      	itt	ne
 8000466:	460b      	movne	r3, r1
 8000468:	4602      	movne	r2, r0
 800046a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800046e:	bf06      	itte	eq
 8000470:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000474:	ea91 0f03 	teqeq	r1, r3
 8000478:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	bf00      	nop

08000480 <__aeabi_ui2d>:
 8000480:	f090 0f00 	teq	r0, #0
 8000484:	bf04      	itt	eq
 8000486:	2100      	moveq	r1, #0
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000490:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000494:	f04f 0500 	mov.w	r5, #0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e750      	b.n	8000340 <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_i2d>:
 80004a0:	f090 0f00 	teq	r0, #0
 80004a4:	bf04      	itt	eq
 80004a6:	2100      	moveq	r1, #0
 80004a8:	4770      	bxeq	lr
 80004aa:	b530      	push	{r4, r5, lr}
 80004ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004b8:	bf48      	it	mi
 80004ba:	4240      	negmi	r0, r0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e73e      	b.n	8000340 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_f2d>:
 80004c4:	0042      	lsls	r2, r0, #1
 80004c6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ca:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ce:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d2:	bf1f      	itttt	ne
 80004d4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004d8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004dc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e0:	4770      	bxne	lr
 80004e2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004e6:	bf08      	it	eq
 80004e8:	4770      	bxeq	lr
 80004ea:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ee:	bf04      	itt	eq
 80004f0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004f4:	4770      	bxeq	lr
 80004f6:	b530      	push	{r4, r5, lr}
 80004f8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000500:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000504:	e71c      	b.n	8000340 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_ul2d>:
 8000508:	ea50 0201 	orrs.w	r2, r0, r1
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	f04f 0500 	mov.w	r5, #0
 8000516:	e00a      	b.n	800052e <__aeabi_l2d+0x16>

08000518 <__aeabi_l2d>:
 8000518:	ea50 0201 	orrs.w	r2, r0, r1
 800051c:	bf08      	it	eq
 800051e:	4770      	bxeq	lr
 8000520:	b530      	push	{r4, r5, lr}
 8000522:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000526:	d502      	bpl.n	800052e <__aeabi_l2d+0x16>
 8000528:	4240      	negs	r0, r0
 800052a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800052e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000532:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000536:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053a:	f43f aed8 	beq.w	80002ee <__adddf3+0xe6>
 800053e:	f04f 0203 	mov.w	r2, #3
 8000542:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000546:	bf18      	it	ne
 8000548:	3203      	addne	r2, #3
 800054a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054e:	bf18      	it	ne
 8000550:	3203      	addne	r2, #3
 8000552:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000556:	f1c2 0320 	rsb	r3, r2, #32
 800055a:	fa00 fc03 	lsl.w	ip, r0, r3
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 fe03 	lsl.w	lr, r1, r3
 8000566:	ea40 000e 	orr.w	r0, r0, lr
 800056a:	fa21 f102 	lsr.w	r1, r1, r2
 800056e:	4414      	add	r4, r2
 8000570:	e6bd      	b.n	80002ee <__adddf3+0xe6>
 8000572:	bf00      	nop

08000574 <__aeabi_dmul>:
 8000574:	b570      	push	{r4, r5, r6, lr}
 8000576:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800057a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800057e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000582:	bf1d      	ittte	ne
 8000584:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000588:	ea94 0f0c 	teqne	r4, ip
 800058c:	ea95 0f0c 	teqne	r5, ip
 8000590:	f000 f8de 	bleq	8000750 <__aeabi_dmul+0x1dc>
 8000594:	442c      	add	r4, r5
 8000596:	ea81 0603 	eor.w	r6, r1, r3
 800059a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800059e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005a6:	bf18      	it	ne
 80005a8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005b4:	d038      	beq.n	8000628 <__aeabi_dmul+0xb4>
 80005b6:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ba:	f04f 0500 	mov.w	r5, #0
 80005be:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005c6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ca:	f04f 0600 	mov.w	r6, #0
 80005ce:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d2:	f09c 0f00 	teq	ip, #0
 80005d6:	bf18      	it	ne
 80005d8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005dc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005e4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005e8:	d204      	bcs.n	80005f4 <__aeabi_dmul+0x80>
 80005ea:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ee:	416d      	adcs	r5, r5
 80005f0:	eb46 0606 	adc.w	r6, r6, r6
 80005f4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005f8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005fc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000600:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000604:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000608:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800060c:	bf88      	it	hi
 800060e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000612:	d81e      	bhi.n	8000652 <__aeabi_dmul+0xde>
 8000614:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000618:	bf08      	it	eq
 800061a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800061e:	f150 0000 	adcs.w	r0, r0, #0
 8000622:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800062c:	ea46 0101 	orr.w	r1, r6, r1
 8000630:	ea40 0002 	orr.w	r0, r0, r2
 8000634:	ea81 0103 	eor.w	r1, r1, r3
 8000638:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800063c:	bfc2      	ittt	gt
 800063e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000642:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000646:	bd70      	popgt	{r4, r5, r6, pc}
 8000648:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800064c:	f04f 0e00 	mov.w	lr, #0
 8000650:	3c01      	subs	r4, #1
 8000652:	f300 80ab 	bgt.w	80007ac <__aeabi_dmul+0x238>
 8000656:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800065a:	bfde      	ittt	le
 800065c:	2000      	movle	r0, #0
 800065e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000662:	bd70      	pople	{r4, r5, r6, pc}
 8000664:	f1c4 0400 	rsb	r4, r4, #0
 8000668:	3c20      	subs	r4, #32
 800066a:	da35      	bge.n	80006d8 <__aeabi_dmul+0x164>
 800066c:	340c      	adds	r4, #12
 800066e:	dc1b      	bgt.n	80006a8 <__aeabi_dmul+0x134>
 8000670:	f104 0414 	add.w	r4, r4, #20
 8000674:	f1c4 0520 	rsb	r5, r4, #32
 8000678:	fa00 f305 	lsl.w	r3, r0, r5
 800067c:	fa20 f004 	lsr.w	r0, r0, r4
 8000680:	fa01 f205 	lsl.w	r2, r1, r5
 8000684:	ea40 0002 	orr.w	r0, r0, r2
 8000688:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800068c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	fa21 f604 	lsr.w	r6, r1, r4
 8000698:	eb42 0106 	adc.w	r1, r2, r6
 800069c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a0:	bf08      	it	eq
 80006a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a6:	bd70      	pop	{r4, r5, r6, pc}
 80006a8:	f1c4 040c 	rsb	r4, r4, #12
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f304 	lsl.w	r3, r0, r4
 80006b4:	fa20 f005 	lsr.w	r0, r0, r5
 80006b8:	fa01 f204 	lsl.w	r2, r1, r4
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	f141 0100 	adc.w	r1, r1, #0
 80006cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d0:	bf08      	it	eq
 80006d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d6:	bd70      	pop	{r4, r5, r6, pc}
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f205 	lsl.w	r2, r0, r5
 80006e0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e4:	fa20 f304 	lsr.w	r3, r0, r4
 80006e8:	fa01 f205 	lsl.w	r2, r1, r5
 80006ec:	ea43 0302 	orr.w	r3, r3, r2
 80006f0:	fa21 f004 	lsr.w	r0, r1, r4
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	fa21 f204 	lsr.w	r2, r1, r4
 80006fc:	ea20 0002 	bic.w	r0, r0, r2
 8000700:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000704:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000708:	bf08      	it	eq
 800070a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070e:	bd70      	pop	{r4, r5, r6, pc}
 8000710:	f094 0f00 	teq	r4, #0
 8000714:	d10f      	bne.n	8000736 <__aeabi_dmul+0x1c2>
 8000716:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800071a:	0040      	lsls	r0, r0, #1
 800071c:	eb41 0101 	adc.w	r1, r1, r1
 8000720:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000724:	bf08      	it	eq
 8000726:	3c01      	subeq	r4, #1
 8000728:	d0f7      	beq.n	800071a <__aeabi_dmul+0x1a6>
 800072a:	ea41 0106 	orr.w	r1, r1, r6
 800072e:	f095 0f00 	teq	r5, #0
 8000732:	bf18      	it	ne
 8000734:	4770      	bxne	lr
 8000736:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800073a:	0052      	lsls	r2, r2, #1
 800073c:	eb43 0303 	adc.w	r3, r3, r3
 8000740:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000744:	bf08      	it	eq
 8000746:	3d01      	subeq	r5, #1
 8000748:	d0f7      	beq.n	800073a <__aeabi_dmul+0x1c6>
 800074a:	ea43 0306 	orr.w	r3, r3, r6
 800074e:	4770      	bx	lr
 8000750:	ea94 0f0c 	teq	r4, ip
 8000754:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000758:	bf18      	it	ne
 800075a:	ea95 0f0c 	teqne	r5, ip
 800075e:	d00c      	beq.n	800077a <__aeabi_dmul+0x206>
 8000760:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000764:	bf18      	it	ne
 8000766:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076a:	d1d1      	bne.n	8000710 <__aeabi_dmul+0x19c>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f04f 0000 	mov.w	r0, #0
 8000778:	bd70      	pop	{r4, r5, r6, pc}
 800077a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800077e:	bf06      	itte	eq
 8000780:	4610      	moveq	r0, r2
 8000782:	4619      	moveq	r1, r3
 8000784:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000788:	d019      	beq.n	80007be <__aeabi_dmul+0x24a>
 800078a:	ea94 0f0c 	teq	r4, ip
 800078e:	d102      	bne.n	8000796 <__aeabi_dmul+0x222>
 8000790:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000794:	d113      	bne.n	80007be <__aeabi_dmul+0x24a>
 8000796:	ea95 0f0c 	teq	r5, ip
 800079a:	d105      	bne.n	80007a8 <__aeabi_dmul+0x234>
 800079c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a0:	bf1c      	itt	ne
 80007a2:	4610      	movne	r0, r2
 80007a4:	4619      	movne	r1, r3
 80007a6:	d10a      	bne.n	80007be <__aeabi_dmul+0x24a>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007b8:	f04f 0000 	mov.w	r0, #0
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
 80007be:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007c6:	bd70      	pop	{r4, r5, r6, pc}

080007c8 <__aeabi_ddiv>:
 80007c8:	b570      	push	{r4, r5, r6, lr}
 80007ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007d6:	bf1d      	ittte	ne
 80007d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007dc:	ea94 0f0c 	teqne	r4, ip
 80007e0:	ea95 0f0c 	teqne	r5, ip
 80007e4:	f000 f8a7 	bleq	8000936 <__aeabi_ddiv+0x16e>
 80007e8:	eba4 0405 	sub.w	r4, r4, r5
 80007ec:	ea81 0e03 	eor.w	lr, r1, r3
 80007f0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007f8:	f000 8088 	beq.w	800090c <__aeabi_ddiv+0x144>
 80007fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000800:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000804:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000808:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800080c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000810:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000814:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000818:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800081c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000820:	429d      	cmp	r5, r3
 8000822:	bf08      	it	eq
 8000824:	4296      	cmpeq	r6, r2
 8000826:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800082a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800082e:	d202      	bcs.n	8000836 <__aeabi_ddiv+0x6e>
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	1ab6      	subs	r6, r6, r2
 8000838:	eb65 0503 	sbc.w	r5, r5, r3
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000846:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800084a:	ebb6 0e02 	subs.w	lr, r6, r2
 800084e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000852:	bf22      	ittt	cs
 8000854:	1ab6      	subcs	r6, r6, r2
 8000856:	4675      	movcs	r5, lr
 8000858:	ea40 000c 	orrcs.w	r0, r0, ip
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	ebb6 0e02 	subs.w	lr, r6, r2
 8000866:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086a:	bf22      	ittt	cs
 800086c:	1ab6      	subcs	r6, r6, r2
 800086e:	4675      	movcs	r5, lr
 8000870:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	ebb6 0e02 	subs.w	lr, r6, r2
 800087e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000882:	bf22      	ittt	cs
 8000884:	1ab6      	subcs	r6, r6, r2
 8000886:	4675      	movcs	r5, lr
 8000888:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800088c:	085b      	lsrs	r3, r3, #1
 800088e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000892:	ebb6 0e02 	subs.w	lr, r6, r2
 8000896:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089a:	bf22      	ittt	cs
 800089c:	1ab6      	subcs	r6, r6, r2
 800089e:	4675      	movcs	r5, lr
 80008a0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a4:	ea55 0e06 	orrs.w	lr, r5, r6
 80008a8:	d018      	beq.n	80008dc <__aeabi_ddiv+0x114>
 80008aa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ae:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008b6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ba:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008be:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008c6:	d1c0      	bne.n	800084a <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	d10b      	bne.n	80008e6 <__aeabi_ddiv+0x11e>
 80008ce:	ea41 0100 	orr.w	r1, r1, r0
 80008d2:	f04f 0000 	mov.w	r0, #0
 80008d6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008da:	e7b6      	b.n	800084a <__aeabi_ddiv+0x82>
 80008dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e0:	bf04      	itt	eq
 80008e2:	4301      	orreq	r1, r0
 80008e4:	2000      	moveq	r0, #0
 80008e6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ea:	bf88      	it	hi
 80008ec:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f0:	f63f aeaf 	bhi.w	8000652 <__aeabi_dmul+0xde>
 80008f4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008f8:	bf04      	itt	eq
 80008fa:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000902:	f150 0000 	adcs.w	r0, r0, #0
 8000906:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090a:	bd70      	pop	{r4, r5, r6, pc}
 800090c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000910:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000914:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000918:	bfc2      	ittt	gt
 800091a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800091e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000922:	bd70      	popgt	{r4, r5, r6, pc}
 8000924:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000928:	f04f 0e00 	mov.w	lr, #0
 800092c:	3c01      	subs	r4, #1
 800092e:	e690      	b.n	8000652 <__aeabi_dmul+0xde>
 8000930:	ea45 0e06 	orr.w	lr, r5, r6
 8000934:	e68d      	b.n	8000652 <__aeabi_dmul+0xde>
 8000936:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093a:	ea94 0f0c 	teq	r4, ip
 800093e:	bf08      	it	eq
 8000940:	ea95 0f0c 	teqeq	r5, ip
 8000944:	f43f af3b 	beq.w	80007be <__aeabi_dmul+0x24a>
 8000948:	ea94 0f0c 	teq	r4, ip
 800094c:	d10a      	bne.n	8000964 <__aeabi_ddiv+0x19c>
 800094e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000952:	f47f af34 	bne.w	80007be <__aeabi_dmul+0x24a>
 8000956:	ea95 0f0c 	teq	r5, ip
 800095a:	f47f af25 	bne.w	80007a8 <__aeabi_dmul+0x234>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e72c      	b.n	80007be <__aeabi_dmul+0x24a>
 8000964:	ea95 0f0c 	teq	r5, ip
 8000968:	d106      	bne.n	8000978 <__aeabi_ddiv+0x1b0>
 800096a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800096e:	f43f aefd 	beq.w	800076c <__aeabi_dmul+0x1f8>
 8000972:	4610      	mov	r0, r2
 8000974:	4619      	mov	r1, r3
 8000976:	e722      	b.n	80007be <__aeabi_dmul+0x24a>
 8000978:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800097c:	bf18      	it	ne
 800097e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000982:	f47f aec5 	bne.w	8000710 <__aeabi_dmul+0x19c>
 8000986:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098a:	f47f af0d 	bne.w	80007a8 <__aeabi_dmul+0x234>
 800098e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000992:	f47f aeeb 	bne.w	800076c <__aeabi_dmul+0x1f8>
 8000996:	e712      	b.n	80007be <__aeabi_dmul+0x24a>

08000998 <__aeabi_d2f>:
 8000998:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800099c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009a0:	bf24      	itt	cs
 80009a2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009a6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009aa:	d90d      	bls.n	80009c8 <__aeabi_d2f+0x30>
 80009ac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009b0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009b4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009b8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009bc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009c0:	bf08      	it	eq
 80009c2:	f020 0001 	biceq.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009cc:	d121      	bne.n	8000a12 <__aeabi_d2f+0x7a>
 80009ce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009d2:	bfbc      	itt	lt
 80009d4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009d8:	4770      	bxlt	lr
 80009da:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009de:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009e2:	f1c2 0218 	rsb	r2, r2, #24
 80009e6:	f1c2 0c20 	rsb	ip, r2, #32
 80009ea:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ee:	fa20 f002 	lsr.w	r0, r0, r2
 80009f2:	bf18      	it	ne
 80009f4:	f040 0001 	orrne.w	r0, r0, #1
 80009f8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009fc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a04:	ea40 000c 	orr.w	r0, r0, ip
 8000a08:	fa23 f302 	lsr.w	r3, r3, r2
 8000a0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a10:	e7cc      	b.n	80009ac <__aeabi_d2f+0x14>
 8000a12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a16:	d107      	bne.n	8000a28 <__aeabi_d2f+0x90>
 8000a18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a1c:	bf1e      	ittt	ne
 8000a1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a26:	4770      	bxne	lr
 8000a28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop

08000a38 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a42:	2003      	movs	r0, #3
 8000a44:	f001 fc00 	bl	8002248 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a48:	2000      	movs	r0, #0
 8000a4a:	f000 f80d 	bl	8000a68 <HAL_InitTick>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d002      	beq.n	8000a5a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a54:	2301      	movs	r3, #1
 8000a56:	71fb      	strb	r3, [r7, #7]
 8000a58:	e001      	b.n	8000a5e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a5a:	f003 fd51 	bl	8004500 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	3708      	adds	r7, #8
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}

08000a68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a70:	2300      	movs	r3, #0
 8000a72:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a74:	4b17      	ldr	r3, [pc, #92]	; (8000ad4 <HAL_InitTick+0x6c>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d023      	beq.n	8000ac4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a7c:	4b16      	ldr	r3, [pc, #88]	; (8000ad8 <HAL_InitTick+0x70>)
 8000a7e:	681a      	ldr	r2, [r3, #0]
 8000a80:	4b14      	ldr	r3, [pc, #80]	; (8000ad4 <HAL_InitTick+0x6c>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	4619      	mov	r1, r3
 8000a86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a92:	4618      	mov	r0, r3
 8000a94:	f001 fc0d 	bl	80022b2 <HAL_SYSTICK_Config>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d10f      	bne.n	8000abe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	2b0f      	cmp	r3, #15
 8000aa2:	d809      	bhi.n	8000ab8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	6879      	ldr	r1, [r7, #4]
 8000aa8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000aac:	f001 fbd7 	bl	800225e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ab0:	4a0a      	ldr	r2, [pc, #40]	; (8000adc <HAL_InitTick+0x74>)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	6013      	str	r3, [r2, #0]
 8000ab6:	e007      	b.n	8000ac8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	73fb      	strb	r3, [r7, #15]
 8000abc:	e004      	b.n	8000ac8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	73fb      	strb	r3, [r7, #15]
 8000ac2:	e001      	b.n	8000ac8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3710      	adds	r7, #16
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	20000004 	.word	0x20000004
 8000ad8:	20000008 	.word	0x20000008
 8000adc:	20000000 	.word	0x20000000

08000ae0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ae4:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <HAL_IncTick+0x20>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	461a      	mov	r2, r3
 8000aea:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <HAL_IncTick+0x24>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4413      	add	r3, r2
 8000af0:	4a04      	ldr	r2, [pc, #16]	; (8000b04 <HAL_IncTick+0x24>)
 8000af2:	6013      	str	r3, [r2, #0]
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	20000004 	.word	0x20000004
 8000b04:	20000028 	.word	0x20000028

08000b08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b0c:	4b03      	ldr	r3, [pc, #12]	; (8000b1c <HAL_GetTick+0x14>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	20000028 	.word	0x20000028

08000b20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b28:	f7ff ffee 	bl	8000b08 <HAL_GetTick>
 8000b2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b38:	d005      	beq.n	8000b46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000b3a:	4b0a      	ldr	r3, [pc, #40]	; (8000b64 <HAL_Delay+0x44>)
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	461a      	mov	r2, r3
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	4413      	add	r3, r2
 8000b44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b46:	bf00      	nop
 8000b48:	f7ff ffde 	bl	8000b08 <HAL_GetTick>
 8000b4c:	4602      	mov	r2, r0
 8000b4e:	68bb      	ldr	r3, [r7, #8]
 8000b50:	1ad3      	subs	r3, r2, r3
 8000b52:	68fa      	ldr	r2, [r7, #12]
 8000b54:	429a      	cmp	r2, r3
 8000b56:	d8f7      	bhi.n	8000b48 <HAL_Delay+0x28>
  {
  }
}
 8000b58:	bf00      	nop
 8000b5a:	bf00      	nop
 8000b5c:	3710      	adds	r7, #16
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	20000004 	.word	0x20000004

08000b68 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
 8000b70:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	689b      	ldr	r3, [r3, #8]
 8000b76:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	431a      	orrs	r2, r3
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	609a      	str	r2, [r3, #8]
}
 8000b82:	bf00      	nop
 8000b84:	370c      	adds	r7, #12
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr

08000b8e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	b083      	sub	sp, #12
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	6078      	str	r0, [r7, #4]
 8000b96:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	689b      	ldr	r3, [r3, #8]
 8000b9c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	431a      	orrs	r2, r3
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
}
 8000ba8:	bf00      	nop
 8000baa:	370c      	adds	r7, #12
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr

08000bb4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	689b      	ldr	r3, [r3, #8]
 8000bc0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	370c      	adds	r7, #12
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr

08000bd0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b087      	sub	sp, #28
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	60f8      	str	r0, [r7, #12]
 8000bd8:	60b9      	str	r1, [r7, #8]
 8000bda:	607a      	str	r2, [r7, #4]
 8000bdc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	3360      	adds	r3, #96	; 0x60
 8000be2:	461a      	mov	r2, r3
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	009b      	lsls	r3, r3, #2
 8000be8:	4413      	add	r3, r2
 8000bea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	4b08      	ldr	r3, [pc, #32]	; (8000c14 <LL_ADC_SetOffset+0x44>)
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	687a      	ldr	r2, [r7, #4]
 8000bf6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000bfa:	683a      	ldr	r2, [r7, #0]
 8000bfc:	430a      	orrs	r2, r1
 8000bfe:	4313      	orrs	r3, r2
 8000c00:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000c08:	bf00      	nop
 8000c0a:	371c      	adds	r7, #28
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	03fff000 	.word	0x03fff000

08000c18 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b085      	sub	sp, #20
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
 8000c20:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	3360      	adds	r3, #96	; 0x60
 8000c26:	461a      	mov	r2, r3
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	009b      	lsls	r3, r3, #2
 8000c2c:	4413      	add	r3, r2
 8000c2e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3714      	adds	r7, #20
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr

08000c44 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b087      	sub	sp, #28
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	60f8      	str	r0, [r7, #12]
 8000c4c:	60b9      	str	r1, [r7, #8]
 8000c4e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	3360      	adds	r3, #96	; 0x60
 8000c54:	461a      	mov	r2, r3
 8000c56:	68bb      	ldr	r3, [r7, #8]
 8000c58:	009b      	lsls	r3, r3, #2
 8000c5a:	4413      	add	r3, r2
 8000c5c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	431a      	orrs	r2, r3
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000c6e:	bf00      	nop
 8000c70:	371c      	adds	r7, #28
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr

08000c7a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	b083      	sub	sp, #12
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	6078      	str	r0, [r7, #4]
 8000c82:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	695b      	ldr	r3, [r3, #20]
 8000c88:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	431a      	orrs	r2, r3
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	615a      	str	r2, [r3, #20]
}
 8000c94:	bf00      	nop
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

08000ca0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d101      	bne.n	8000cb8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	e000      	b.n	8000cba <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000cb8:	2300      	movs	r3, #0
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	370c      	adds	r7, #12
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	b087      	sub	sp, #28
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	60f8      	str	r0, [r7, #12]
 8000cce:	60b9      	str	r1, [r7, #8]
 8000cd0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	3330      	adds	r3, #48	; 0x30
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	0a1b      	lsrs	r3, r3, #8
 8000cdc:	009b      	lsls	r3, r3, #2
 8000cde:	f003 030c 	and.w	r3, r3, #12
 8000ce2:	4413      	add	r3, r2
 8000ce4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	68bb      	ldr	r3, [r7, #8]
 8000cec:	f003 031f 	and.w	r3, r3, #31
 8000cf0:	211f      	movs	r1, #31
 8000cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf6:	43db      	mvns	r3, r3
 8000cf8:	401a      	ands	r2, r3
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	0e9b      	lsrs	r3, r3, #26
 8000cfe:	f003 011f 	and.w	r1, r3, #31
 8000d02:	68bb      	ldr	r3, [r7, #8]
 8000d04:	f003 031f 	and.w	r3, r3, #31
 8000d08:	fa01 f303 	lsl.w	r3, r1, r3
 8000d0c:	431a      	orrs	r2, r3
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000d12:	bf00      	nop
 8000d14:	371c      	adds	r7, #28
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr

08000d1e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	b087      	sub	sp, #28
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	60f8      	str	r0, [r7, #12]
 8000d26:	60b9      	str	r1, [r7, #8]
 8000d28:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	3314      	adds	r3, #20
 8000d2e:	461a      	mov	r2, r3
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	0e5b      	lsrs	r3, r3, #25
 8000d34:	009b      	lsls	r3, r3, #2
 8000d36:	f003 0304 	and.w	r3, r3, #4
 8000d3a:	4413      	add	r3, r2
 8000d3c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	68bb      	ldr	r3, [r7, #8]
 8000d44:	0d1b      	lsrs	r3, r3, #20
 8000d46:	f003 031f 	and.w	r3, r3, #31
 8000d4a:	2107      	movs	r1, #7
 8000d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d50:	43db      	mvns	r3, r3
 8000d52:	401a      	ands	r2, r3
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	0d1b      	lsrs	r3, r3, #20
 8000d58:	f003 031f 	and.w	r3, r3, #31
 8000d5c:	6879      	ldr	r1, [r7, #4]
 8000d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d62:	431a      	orrs	r2, r3
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000d68:	bf00      	nop
 8000d6a:	371c      	adds	r7, #28
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr

08000d74 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b085      	sub	sp, #20
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	60f8      	str	r0, [r7, #12]
 8000d7c:	60b9      	str	r1, [r7, #8]
 8000d7e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000d86:	68bb      	ldr	r3, [r7, #8]
 8000d88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000d8c:	43db      	mvns	r3, r3
 8000d8e:	401a      	ands	r2, r3
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	f003 0318 	and.w	r3, r3, #24
 8000d96:	4908      	ldr	r1, [pc, #32]	; (8000db8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000d98:	40d9      	lsrs	r1, r3
 8000d9a:	68bb      	ldr	r3, [r7, #8]
 8000d9c:	400b      	ands	r3, r1
 8000d9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000da2:	431a      	orrs	r2, r3
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000daa:	bf00      	nop
 8000dac:	3714      	adds	r7, #20
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	0007ffff 	.word	0x0007ffff

08000dbc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	689b      	ldr	r3, [r3, #8]
 8000dc8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8000dcc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000dd0:	687a      	ldr	r2, [r7, #4]
 8000dd2:	6093      	str	r3, [r2, #8]
}
 8000dd4:	bf00      	nop
 8000dd6:	370c      	adds	r7, #12
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr

08000de0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	689b      	ldr	r3, [r3, #8]
 8000dec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000df0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000df4:	d101      	bne.n	8000dfa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000df6:	2301      	movs	r3, #1
 8000df8:	e000      	b.n	8000dfc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000dfa:	2300      	movs	r3, #0
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr

08000e08 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	689b      	ldr	r3, [r3, #8]
 8000e14:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8000e18:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000e1c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000e24:	bf00      	nop
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr

08000e30 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	689b      	ldr	r3, [r3, #8]
 8000e3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e40:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000e44:	d101      	bne.n	8000e4a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000e46:	2301      	movs	r3, #1
 8000e48:	e000      	b.n	8000e4c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000e4a:	2300      	movs	r3, #0
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	370c      	adds	r7, #12
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr

08000e58 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	689b      	ldr	r3, [r3, #8]
 8000e64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000e68:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000e6c:	f043 0201 	orr.w	r2, r3, #1
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000e74:	bf00      	nop
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr

08000e80 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	689b      	ldr	r3, [r3, #8]
 8000e8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000e90:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000e94:	f043 0202 	orr.w	r2, r3, #2
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8000e9c:	bf00      	nop
 8000e9e:	370c      	adds	r7, #12
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr

08000ea8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	689b      	ldr	r3, [r3, #8]
 8000eb4:	f003 0301 	and.w	r3, r3, #1
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d101      	bne.n	8000ec0 <LL_ADC_IsEnabled+0x18>
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	e000      	b.n	8000ec2 <LL_ADC_IsEnabled+0x1a>
 8000ec0:	2300      	movs	r3, #0
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	b083      	sub	sp, #12
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	689b      	ldr	r3, [r3, #8]
 8000eda:	f003 0302 	and.w	r3, r3, #2
 8000ede:	2b02      	cmp	r3, #2
 8000ee0:	d101      	bne.n	8000ee6 <LL_ADC_IsDisableOngoing+0x18>
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e000      	b.n	8000ee8 <LL_ADC_IsDisableOngoing+0x1a>
 8000ee6:	2300      	movs	r3, #0
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	689b      	ldr	r3, [r3, #8]
 8000f00:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000f04:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f08:	f043 0204 	orr.w	r2, r3, #4
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000f10:	bf00      	nop
 8000f12:	370c      	adds	r7, #12
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr

08000f1c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	689b      	ldr	r3, [r3, #8]
 8000f28:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000f2c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f30:	f043 0210 	orr.w	r2, r3, #16
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8000f38:	bf00      	nop
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	689b      	ldr	r3, [r3, #8]
 8000f50:	f003 0304 	and.w	r3, r3, #4
 8000f54:	2b04      	cmp	r3, #4
 8000f56:	d101      	bne.n	8000f5c <LL_ADC_REG_IsConversionOngoing+0x18>
 8000f58:	2301      	movs	r3, #1
 8000f5a:	e000      	b.n	8000f5e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000f5c:	2300      	movs	r3, #0
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	370c      	adds	r7, #12
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr

08000f6a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	b083      	sub	sp, #12
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	689b      	ldr	r3, [r3, #8]
 8000f76:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000f7a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f7e:	f043 0220 	orr.w	r2, r3, #32
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8000f86:	bf00      	nop
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr

08000f92 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000f92:	b480      	push	{r7}
 8000f94:	b083      	sub	sp, #12
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	689b      	ldr	r3, [r3, #8]
 8000f9e:	f003 0308 	and.w	r3, r3, #8
 8000fa2:	2b08      	cmp	r3, #8
 8000fa4:	d101      	bne.n	8000faa <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e000      	b.n	8000fac <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000faa:	2300      	movs	r3, #0
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b088      	sub	sp, #32
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d101      	bne.n	8000fd2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e12f      	b.n	8001232 <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	691b      	ldr	r3, [r3, #16]
 8000fd6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d109      	bne.n	8000ff4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f003 fab1 	bl	8004548 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2200      	movs	r2, #0
 8000fea:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2200      	movs	r2, #0
 8000ff0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff fef1 	bl	8000de0 <LL_ADC_IsDeepPowerDownEnabled>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d004      	beq.n	800100e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff fed7 	bl	8000dbc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff ff0c 	bl	8000e30 <LL_ADC_IsInternalRegulatorEnabled>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d115      	bne.n	800104a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4618      	mov	r0, r3
 8001024:	f7ff fef0 	bl	8000e08 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001028:	4b84      	ldr	r3, [pc, #528]	; (800123c <HAL_ADC_Init+0x284>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	099b      	lsrs	r3, r3, #6
 800102e:	4a84      	ldr	r2, [pc, #528]	; (8001240 <HAL_ADC_Init+0x288>)
 8001030:	fba2 2303 	umull	r2, r3, r2, r3
 8001034:	099b      	lsrs	r3, r3, #6
 8001036:	3301      	adds	r3, #1
 8001038:	005b      	lsls	r3, r3, #1
 800103a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800103c:	e002      	b.n	8001044 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	3b01      	subs	r3, #1
 8001042:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d1f9      	bne.n	800103e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff feee 	bl	8000e30 <LL_ADC_IsInternalRegulatorEnabled>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d10d      	bne.n	8001076 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800105e:	f043 0210 	orr.w	r2, r3, #16
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800106a:	f043 0201 	orr.w	r2, r3, #1
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff ff62 	bl	8000f44 <LL_ADC_REG_IsConversionOngoing>
 8001080:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001086:	f003 0310 	and.w	r3, r3, #16
 800108a:	2b00      	cmp	r3, #0
 800108c:	f040 80c8 	bne.w	8001220 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	2b00      	cmp	r3, #0
 8001094:	f040 80c4 	bne.w	8001220 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800109c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80010a0:	f043 0202 	orr.w	r2, r3, #2
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff fefb 	bl	8000ea8 <LL_ADC_IsEnabled>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d10b      	bne.n	80010d0 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80010b8:	4862      	ldr	r0, [pc, #392]	; (8001244 <HAL_ADC_Init+0x28c>)
 80010ba:	f7ff fef5 	bl	8000ea8 <LL_ADC_IsEnabled>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d105      	bne.n	80010d0 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	4619      	mov	r1, r3
 80010ca:	485f      	ldr	r0, [pc, #380]	; (8001248 <HAL_ADC_Init+0x290>)
 80010cc:	f7ff fd4c 	bl	8000b68 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	7e5b      	ldrb	r3, [r3, #25]
 80010d4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80010da:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80010e0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80010e6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010ee:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80010f0:	4313      	orrs	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d106      	bne.n	800110c <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001102:	3b01      	subs	r3, #1
 8001104:	045b      	lsls	r3, r3, #17
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	4313      	orrs	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001110:	2b00      	cmp	r3, #0
 8001112:	d009      	beq.n	8001128 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001118:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001120:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	4313      	orrs	r3, r2
 8001126:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	68da      	ldr	r2, [r3, #12]
 800112e:	4b47      	ldr	r3, [pc, #284]	; (800124c <HAL_ADC_Init+0x294>)
 8001130:	4013      	ands	r3, r2
 8001132:	687a      	ldr	r2, [r7, #4]
 8001134:	6812      	ldr	r2, [r2, #0]
 8001136:	69b9      	ldr	r1, [r7, #24]
 8001138:	430b      	orrs	r3, r1
 800113a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff feff 	bl	8000f44 <LL_ADC_REG_IsConversionOngoing>
 8001146:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff ff20 	bl	8000f92 <LL_ADC_INJ_IsConversionOngoing>
 8001152:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d140      	bne.n	80011dc <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d13d      	bne.n	80011dc <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	7e1b      	ldrb	r3, [r3, #24]
 8001168:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800116a:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001172:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001174:	4313      	orrs	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	68db      	ldr	r3, [r3, #12]
 800117e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001182:	f023 0306 	bic.w	r3, r3, #6
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	6812      	ldr	r2, [r2, #0]
 800118a:	69b9      	ldr	r1, [r7, #24]
 800118c:	430b      	orrs	r3, r1
 800118e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001196:	2b01      	cmp	r3, #1
 8001198:	d118      	bne.n	80011cc <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	691b      	ldr	r3, [r3, #16]
 80011a0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80011a4:	f023 0304 	bic.w	r3, r3, #4
 80011a8:	687a      	ldr	r2, [r7, #4]
 80011aa:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80011ac:	687a      	ldr	r2, [r7, #4]
 80011ae:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80011b0:	4311      	orrs	r1, r2
 80011b2:	687a      	ldr	r2, [r7, #4]
 80011b4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80011b6:	4311      	orrs	r1, r2
 80011b8:	687a      	ldr	r2, [r7, #4]
 80011ba:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80011bc:	430a      	orrs	r2, r1
 80011be:	431a      	orrs	r2, r3
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f042 0201 	orr.w	r2, r2, #1
 80011c8:	611a      	str	r2, [r3, #16]
 80011ca:	e007      	b.n	80011dc <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	691a      	ldr	r2, [r3, #16]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f022 0201 	bic.w	r2, r2, #1
 80011da:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	691b      	ldr	r3, [r3, #16]
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d10c      	bne.n	80011fe <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	f023 010f 	bic.w	r1, r3, #15
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	69db      	ldr	r3, [r3, #28]
 80011f2:	1e5a      	subs	r2, r3, #1
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	430a      	orrs	r2, r1
 80011fa:	631a      	str	r2, [r3, #48]	; 0x30
 80011fc:	e007      	b.n	800120e <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f022 020f 	bic.w	r2, r2, #15
 800120c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001212:	f023 0303 	bic.w	r3, r3, #3
 8001216:	f043 0201 	orr.w	r2, r3, #1
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	659a      	str	r2, [r3, #88]	; 0x58
 800121e:	e007      	b.n	8001230 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001224:	f043 0210 	orr.w	r2, r3, #16
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001230:	7ffb      	ldrb	r3, [r7, #31]
}
 8001232:	4618      	mov	r0, r3
 8001234:	3720      	adds	r7, #32
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	20000008 	.word	0x20000008
 8001240:	053e2d63 	.word	0x053e2d63
 8001244:	50040000 	.word	0x50040000
 8001248:	50040300 	.word	0x50040300
 800124c:	fff0c007 	.word	0xfff0c007

08001250 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	60b9      	str	r1, [r7, #8]
 800125a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff fe6f 	bl	8000f44 <LL_ADC_REG_IsConversionOngoing>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d167      	bne.n	800133c <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001272:	2b01      	cmp	r3, #1
 8001274:	d101      	bne.n	800127a <HAL_ADC_Start_DMA+0x2a>
 8001276:	2302      	movs	r3, #2
 8001278:	e063      	b.n	8001342 <HAL_ADC_Start_DMA+0xf2>
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	2201      	movs	r2, #1
 800127e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001282:	68f8      	ldr	r0, [r7, #12]
 8001284:	f000 fd96 	bl	8001db4 <ADC_Enable>
 8001288:	4603      	mov	r3, r0
 800128a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800128c:	7dfb      	ldrb	r3, [r7, #23]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d14f      	bne.n	8001332 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001296:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800129a:	f023 0301 	bic.w	r3, r3, #1
 800129e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	659a      	str	r2, [r3, #88]	; 0x58
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d006      	beq.n	80012c0 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012b6:	f023 0206 	bic.w	r2, r3, #6
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	65da      	str	r2, [r3, #92]	; 0x5c
 80012be:	e002      	b.n	80012c6 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	2200      	movs	r2, #0
 80012c4:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012ca:	4a20      	ldr	r2, [pc, #128]	; (800134c <HAL_ADC_Start_DMA+0xfc>)
 80012cc:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012d2:	4a1f      	ldr	r2, [pc, #124]	; (8001350 <HAL_ADC_Start_DMA+0x100>)
 80012d4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012da:	4a1e      	ldr	r2, [pc, #120]	; (8001354 <HAL_ADC_Start_DMA+0x104>)
 80012dc:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	221c      	movs	r2, #28
 80012e4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	2200      	movs	r2, #0
 80012ea:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	685a      	ldr	r2, [r3, #4]
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f042 0210 	orr.w	r2, r2, #16
 80012fc:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	68da      	ldr	r2, [r3, #12]
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f042 0201 	orr.w	r2, r2, #1
 800130c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	3340      	adds	r3, #64	; 0x40
 8001318:	4619      	mov	r1, r3
 800131a:	68ba      	ldr	r2, [r7, #8]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f001 f87d 	bl	800241c <HAL_DMA_Start_IT>
 8001322:	4603      	mov	r3, r0
 8001324:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff fde2 	bl	8000ef4 <LL_ADC_REG_StartConversion>
 8001330:	e006      	b.n	8001340 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	2200      	movs	r2, #0
 8001336:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 800133a:	e001      	b.n	8001340 <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800133c:	2302      	movs	r3, #2
 800133e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001340:	7dfb      	ldrb	r3, [r7, #23]
}
 8001342:	4618      	mov	r0, r3
 8001344:	3718      	adds	r7, #24
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	08001f7f 	.word	0x08001f7f
 8001350:	08002057 	.word	0x08002057
 8001354:	08002073 	.word	0x08002073

08001358 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001366:	2b01      	cmp	r3, #1
 8001368:	d101      	bne.n	800136e <HAL_ADC_Stop_DMA+0x16>
 800136a:	2302      	movs	r3, #2
 800136c:	e051      	b.n	8001412 <HAL_ADC_Stop_DMA+0xba>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2201      	movs	r2, #1
 8001372:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001376:	2103      	movs	r1, #3
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f000 fc5f 	bl	8001c3c <ADC_ConversionStop>
 800137e:	4603      	mov	r3, r0
 8001380:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001382:	7bfb      	ldrb	r3, [r7, #15]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d13f      	bne.n	8001408 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	68da      	ldr	r2, [r3, #12]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f022 0201 	bic.w	r2, r2, #1
 8001396:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800139c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	d10f      	bne.n	80013c6 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013aa:	4618      	mov	r0, r3
 80013ac:	f001 f8b1 	bl	8002512 <HAL_DMA_Abort>
 80013b0:	4603      	mov	r3, r0
 80013b2:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80013b4:	7bfb      	ldrb	r3, [r7, #15]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d005      	beq.n	80013c6 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	659a      	str	r2, [r3, #88]	; 0x58
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	685a      	ldr	r2, [r3, #4]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f022 0210 	bic.w	r2, r2, #16
 80013d4:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 80013d6:	7bfb      	ldrb	r3, [r7, #15]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d105      	bne.n	80013e8 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f000 fd6f 	bl	8001ec0 <ADC_Disable>
 80013e2:	4603      	mov	r3, r0
 80013e4:	73fb      	strb	r3, [r7, #15]
 80013e6:	e002      	b.n	80013ee <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f000 fd69 	bl	8001ec0 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80013ee:	7bfb      	ldrb	r3, [r7, #15]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d109      	bne.n	8001408 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013f8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80013fc:	f023 0301 	bic.w	r3, r3, #1
 8001400:	f043 0201 	orr.w	r2, r3, #1
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2200      	movs	r2, #0
 800140c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8001410:	7bfb      	ldrb	r3, [r7, #15]
}
 8001412:	4618      	mov	r0, r3
 8001414:	3710      	adds	r7, #16
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800141a:	b480      	push	{r7}
 800141c:	b083      	sub	sp, #12
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001422:	bf00      	nop
 8001424:	370c      	adds	r7, #12
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr

0800142e <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800142e:	b480      	push	{r7}
 8001430:	b083      	sub	sp, #12
 8001432:	af00      	add	r7, sp, #0
 8001434:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001436:	bf00      	nop
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
	...

08001444 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b0b6      	sub	sp, #216	; 0xd8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800144e:	2300      	movs	r3, #0
 8001450:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001454:	2300      	movs	r3, #0
 8001456:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800145e:	2b01      	cmp	r3, #1
 8001460:	d101      	bne.n	8001466 <HAL_ADC_ConfigChannel+0x22>
 8001462:	2302      	movs	r3, #2
 8001464:	e3d5      	b.n	8001c12 <HAL_ADC_ConfigChannel+0x7ce>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2201      	movs	r2, #1
 800146a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff fd66 	bl	8000f44 <LL_ADC_REG_IsConversionOngoing>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	f040 83ba 	bne.w	8001bf4 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	2b05      	cmp	r3, #5
 8001486:	d824      	bhi.n	80014d2 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	3b02      	subs	r3, #2
 800148e:	2b03      	cmp	r3, #3
 8001490:	d81b      	bhi.n	80014ca <HAL_ADC_ConfigChannel+0x86>
 8001492:	a201      	add	r2, pc, #4	; (adr r2, 8001498 <HAL_ADC_ConfigChannel+0x54>)
 8001494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001498:	080014a9 	.word	0x080014a9
 800149c:	080014b1 	.word	0x080014b1
 80014a0:	080014b9 	.word	0x080014b9
 80014a4:	080014c1 	.word	0x080014c1
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	220c      	movs	r2, #12
 80014ac:	605a      	str	r2, [r3, #4]
          break;
 80014ae:	e011      	b.n	80014d4 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	2212      	movs	r2, #18
 80014b4:	605a      	str	r2, [r3, #4]
          break;
 80014b6:	e00d      	b.n	80014d4 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	2218      	movs	r2, #24
 80014bc:	605a      	str	r2, [r3, #4]
          break;
 80014be:	e009      	b.n	80014d4 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014c6:	605a      	str	r2, [r3, #4]
          break;
 80014c8:	e004      	b.n	80014d4 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	2206      	movs	r2, #6
 80014ce:	605a      	str	r2, [r3, #4]
          break;
 80014d0:	e000      	b.n	80014d4 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80014d2:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6818      	ldr	r0, [r3, #0]
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	6859      	ldr	r1, [r3, #4]
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	461a      	mov	r2, r3
 80014e2:	f7ff fbf0 	bl	8000cc6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff fd2a 	bl	8000f44 <LL_ADC_REG_IsConversionOngoing>
 80014f0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff fd4a 	bl	8000f92 <LL_ADC_INJ_IsConversionOngoing>
 80014fe:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001502:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001506:	2b00      	cmp	r3, #0
 8001508:	f040 81c1 	bne.w	800188e <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800150c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001510:	2b00      	cmp	r3, #0
 8001512:	f040 81bc 	bne.w	800188e <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800151e:	d10f      	bne.n	8001540 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6818      	ldr	r0, [r3, #0]
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2200      	movs	r2, #0
 800152a:	4619      	mov	r1, r3
 800152c:	f7ff fbf7 	bl	8000d1e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff fb9e 	bl	8000c7a <LL_ADC_SetSamplingTimeCommonConfig>
 800153e:	e00e      	b.n	800155e <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6818      	ldr	r0, [r3, #0]
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	6819      	ldr	r1, [r3, #0]
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	461a      	mov	r2, r3
 800154e:	f7ff fbe6 	bl	8000d1e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2100      	movs	r1, #0
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff fb8e 	bl	8000c7a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	695a      	ldr	r2, [r3, #20]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	08db      	lsrs	r3, r3, #3
 800156a:	f003 0303 	and.w	r3, r3, #3
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	691b      	ldr	r3, [r3, #16]
 800157c:	2b04      	cmp	r3, #4
 800157e:	d00a      	beq.n	8001596 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6818      	ldr	r0, [r3, #0]
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	6919      	ldr	r1, [r3, #16]
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001590:	f7ff fb1e 	bl	8000bd0 <LL_ADC_SetOffset>
 8001594:	e17b      	b.n	800188e <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2100      	movs	r1, #0
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff fb3b 	bl	8000c18 <LL_ADC_GetOffsetChannel>
 80015a2:	4603      	mov	r3, r0
 80015a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d10a      	bne.n	80015c2 <HAL_ADC_ConfigChannel+0x17e>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2100      	movs	r1, #0
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7ff fb30 	bl	8000c18 <LL_ADC_GetOffsetChannel>
 80015b8:	4603      	mov	r3, r0
 80015ba:	0e9b      	lsrs	r3, r3, #26
 80015bc:	f003 021f 	and.w	r2, r3, #31
 80015c0:	e01e      	b.n	8001600 <HAL_ADC_ConfigChannel+0x1bc>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	2100      	movs	r1, #0
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff fb25 	bl	8000c18 <LL_ADC_GetOffsetChannel>
 80015ce:	4603      	mov	r3, r0
 80015d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015d4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80015d8:	fa93 f3a3 	rbit	r3, r3
 80015dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80015e0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80015e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80015e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d101      	bne.n	80015f4 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 80015f0:	2320      	movs	r3, #32
 80015f2:	e004      	b.n	80015fe <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 80015f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80015f8:	fab3 f383 	clz	r3, r3
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001608:	2b00      	cmp	r3, #0
 800160a:	d105      	bne.n	8001618 <HAL_ADC_ConfigChannel+0x1d4>
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	0e9b      	lsrs	r3, r3, #26
 8001612:	f003 031f 	and.w	r3, r3, #31
 8001616:	e018      	b.n	800164a <HAL_ADC_ConfigChannel+0x206>
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001620:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001624:	fa93 f3a3 	rbit	r3, r3
 8001628:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800162c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001630:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001634:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001638:	2b00      	cmp	r3, #0
 800163a:	d101      	bne.n	8001640 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 800163c:	2320      	movs	r3, #32
 800163e:	e004      	b.n	800164a <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8001640:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001644:	fab3 f383 	clz	r3, r3
 8001648:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800164a:	429a      	cmp	r2, r3
 800164c:	d106      	bne.n	800165c <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	2200      	movs	r2, #0
 8001654:	2100      	movs	r1, #0
 8001656:	4618      	mov	r0, r3
 8001658:	f7ff faf4 	bl	8000c44 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2101      	movs	r1, #1
 8001662:	4618      	mov	r0, r3
 8001664:	f7ff fad8 	bl	8000c18 <LL_ADC_GetOffsetChannel>
 8001668:	4603      	mov	r3, r0
 800166a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800166e:	2b00      	cmp	r3, #0
 8001670:	d10a      	bne.n	8001688 <HAL_ADC_ConfigChannel+0x244>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2101      	movs	r1, #1
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff facd 	bl	8000c18 <LL_ADC_GetOffsetChannel>
 800167e:	4603      	mov	r3, r0
 8001680:	0e9b      	lsrs	r3, r3, #26
 8001682:	f003 021f 	and.w	r2, r3, #31
 8001686:	e01e      	b.n	80016c6 <HAL_ADC_ConfigChannel+0x282>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2101      	movs	r1, #1
 800168e:	4618      	mov	r0, r3
 8001690:	f7ff fac2 	bl	8000c18 <LL_ADC_GetOffsetChannel>
 8001694:	4603      	mov	r3, r0
 8001696:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800169a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800169e:	fa93 f3a3 	rbit	r3, r3
 80016a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80016a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80016aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80016ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d101      	bne.n	80016ba <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 80016b6:	2320      	movs	r3, #32
 80016b8:	e004      	b.n	80016c4 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 80016ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80016be:	fab3 f383 	clz	r3, r3
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d105      	bne.n	80016de <HAL_ADC_ConfigChannel+0x29a>
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	0e9b      	lsrs	r3, r3, #26
 80016d8:	f003 031f 	and.w	r3, r3, #31
 80016dc:	e018      	b.n	8001710 <HAL_ADC_ConfigChannel+0x2cc>
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80016ea:	fa93 f3a3 	rbit	r3, r3
 80016ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80016f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80016f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80016fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d101      	bne.n	8001706 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8001702:	2320      	movs	r3, #32
 8001704:	e004      	b.n	8001710 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8001706:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800170a:	fab3 f383 	clz	r3, r3
 800170e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001710:	429a      	cmp	r2, r3
 8001712:	d106      	bne.n	8001722 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2200      	movs	r2, #0
 800171a:	2101      	movs	r1, #1
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff fa91 	bl	8000c44 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	2102      	movs	r1, #2
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff fa75 	bl	8000c18 <LL_ADC_GetOffsetChannel>
 800172e:	4603      	mov	r3, r0
 8001730:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001734:	2b00      	cmp	r3, #0
 8001736:	d10a      	bne.n	800174e <HAL_ADC_ConfigChannel+0x30a>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2102      	movs	r1, #2
 800173e:	4618      	mov	r0, r3
 8001740:	f7ff fa6a 	bl	8000c18 <LL_ADC_GetOffsetChannel>
 8001744:	4603      	mov	r3, r0
 8001746:	0e9b      	lsrs	r3, r3, #26
 8001748:	f003 021f 	and.w	r2, r3, #31
 800174c:	e01e      	b.n	800178c <HAL_ADC_ConfigChannel+0x348>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2102      	movs	r1, #2
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff fa5f 	bl	8000c18 <LL_ADC_GetOffsetChannel>
 800175a:	4603      	mov	r3, r0
 800175c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001760:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001764:	fa93 f3a3 	rbit	r3, r3
 8001768:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800176c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001770:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001774:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001778:	2b00      	cmp	r3, #0
 800177a:	d101      	bne.n	8001780 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 800177c:	2320      	movs	r3, #32
 800177e:	e004      	b.n	800178a <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8001780:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001784:	fab3 f383 	clz	r3, r3
 8001788:	b2db      	uxtb	r3, r3
 800178a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001794:	2b00      	cmp	r3, #0
 8001796:	d105      	bne.n	80017a4 <HAL_ADC_ConfigChannel+0x360>
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	0e9b      	lsrs	r3, r3, #26
 800179e:	f003 031f 	and.w	r3, r3, #31
 80017a2:	e016      	b.n	80017d2 <HAL_ADC_ConfigChannel+0x38e>
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80017b0:	fa93 f3a3 	rbit	r3, r3
 80017b4:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80017b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80017b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80017bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d101      	bne.n	80017c8 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 80017c4:	2320      	movs	r3, #32
 80017c6:	e004      	b.n	80017d2 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 80017c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80017cc:	fab3 f383 	clz	r3, r3
 80017d0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d106      	bne.n	80017e4 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	2200      	movs	r2, #0
 80017dc:	2102      	movs	r1, #2
 80017de:	4618      	mov	r0, r3
 80017e0:	f7ff fa30 	bl	8000c44 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2103      	movs	r1, #3
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7ff fa14 	bl	8000c18 <LL_ADC_GetOffsetChannel>
 80017f0:	4603      	mov	r3, r0
 80017f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d10a      	bne.n	8001810 <HAL_ADC_ConfigChannel+0x3cc>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	2103      	movs	r1, #3
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff fa09 	bl	8000c18 <LL_ADC_GetOffsetChannel>
 8001806:	4603      	mov	r3, r0
 8001808:	0e9b      	lsrs	r3, r3, #26
 800180a:	f003 021f 	and.w	r2, r3, #31
 800180e:	e017      	b.n	8001840 <HAL_ADC_ConfigChannel+0x3fc>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2103      	movs	r1, #3
 8001816:	4618      	mov	r0, r3
 8001818:	f7ff f9fe 	bl	8000c18 <LL_ADC_GetOffsetChannel>
 800181c:	4603      	mov	r3, r0
 800181e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001820:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001822:	fa93 f3a3 	rbit	r3, r3
 8001826:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001828:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800182a:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800182c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800182e:	2b00      	cmp	r3, #0
 8001830:	d101      	bne.n	8001836 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8001832:	2320      	movs	r3, #32
 8001834:	e003      	b.n	800183e <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8001836:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001838:	fab3 f383 	clz	r3, r3
 800183c:	b2db      	uxtb	r3, r3
 800183e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001848:	2b00      	cmp	r3, #0
 800184a:	d105      	bne.n	8001858 <HAL_ADC_ConfigChannel+0x414>
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	0e9b      	lsrs	r3, r3, #26
 8001852:	f003 031f 	and.w	r3, r3, #31
 8001856:	e011      	b.n	800187c <HAL_ADC_ConfigChannel+0x438>
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800185e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001860:	fa93 f3a3 	rbit	r3, r3
 8001864:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001866:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001868:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800186a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800186c:	2b00      	cmp	r3, #0
 800186e:	d101      	bne.n	8001874 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8001870:	2320      	movs	r3, #32
 8001872:	e003      	b.n	800187c <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8001874:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001876:	fab3 f383 	clz	r3, r3
 800187a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800187c:	429a      	cmp	r2, r3
 800187e:	d106      	bne.n	800188e <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2200      	movs	r2, #0
 8001886:	2103      	movs	r1, #3
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff f9db 	bl	8000c44 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4618      	mov	r0, r3
 8001894:	f7ff fb08 	bl	8000ea8 <LL_ADC_IsEnabled>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	f040 8140 	bne.w	8001b20 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6818      	ldr	r0, [r3, #0]
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	6819      	ldr	r1, [r3, #0]
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	461a      	mov	r2, r3
 80018ae:	f7ff fa61 	bl	8000d74 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	68db      	ldr	r3, [r3, #12]
 80018b6:	4a8f      	ldr	r2, [pc, #572]	; (8001af4 <HAL_ADC_ConfigChannel+0x6b0>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	f040 8131 	bne.w	8001b20 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d10b      	bne.n	80018e6 <HAL_ADC_ConfigChannel+0x4a2>
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	0e9b      	lsrs	r3, r3, #26
 80018d4:	3301      	adds	r3, #1
 80018d6:	f003 031f 	and.w	r3, r3, #31
 80018da:	2b09      	cmp	r3, #9
 80018dc:	bf94      	ite	ls
 80018de:	2301      	movls	r3, #1
 80018e0:	2300      	movhi	r3, #0
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	e019      	b.n	800191a <HAL_ADC_ConfigChannel+0x4d6>
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018ee:	fa93 f3a3 	rbit	r3, r3
 80018f2:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80018f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80018f6:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80018f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d101      	bne.n	8001902 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 80018fe:	2320      	movs	r3, #32
 8001900:	e003      	b.n	800190a <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8001902:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001904:	fab3 f383 	clz	r3, r3
 8001908:	b2db      	uxtb	r3, r3
 800190a:	3301      	adds	r3, #1
 800190c:	f003 031f 	and.w	r3, r3, #31
 8001910:	2b09      	cmp	r3, #9
 8001912:	bf94      	ite	ls
 8001914:	2301      	movls	r3, #1
 8001916:	2300      	movhi	r3, #0
 8001918:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800191a:	2b00      	cmp	r3, #0
 800191c:	d079      	beq.n	8001a12 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001926:	2b00      	cmp	r3, #0
 8001928:	d107      	bne.n	800193a <HAL_ADC_ConfigChannel+0x4f6>
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	0e9b      	lsrs	r3, r3, #26
 8001930:	3301      	adds	r3, #1
 8001932:	069b      	lsls	r3, r3, #26
 8001934:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001938:	e015      	b.n	8001966 <HAL_ADC_ConfigChannel+0x522>
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001940:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001942:	fa93 f3a3 	rbit	r3, r3
 8001946:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001948:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800194a:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800194c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800194e:	2b00      	cmp	r3, #0
 8001950:	d101      	bne.n	8001956 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8001952:	2320      	movs	r3, #32
 8001954:	e003      	b.n	800195e <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8001956:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001958:	fab3 f383 	clz	r3, r3
 800195c:	b2db      	uxtb	r3, r3
 800195e:	3301      	adds	r3, #1
 8001960:	069b      	lsls	r3, r3, #26
 8001962:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800196e:	2b00      	cmp	r3, #0
 8001970:	d109      	bne.n	8001986 <HAL_ADC_ConfigChannel+0x542>
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	0e9b      	lsrs	r3, r3, #26
 8001978:	3301      	adds	r3, #1
 800197a:	f003 031f 	and.w	r3, r3, #31
 800197e:	2101      	movs	r1, #1
 8001980:	fa01 f303 	lsl.w	r3, r1, r3
 8001984:	e017      	b.n	80019b6 <HAL_ADC_ConfigChannel+0x572>
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800198c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800198e:	fa93 f3a3 	rbit	r3, r3
 8001992:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001994:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001996:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001998:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800199a:	2b00      	cmp	r3, #0
 800199c:	d101      	bne.n	80019a2 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 800199e:	2320      	movs	r3, #32
 80019a0:	e003      	b.n	80019aa <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 80019a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80019a4:	fab3 f383 	clz	r3, r3
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	3301      	adds	r3, #1
 80019ac:	f003 031f 	and.w	r3, r3, #31
 80019b0:	2101      	movs	r1, #1
 80019b2:	fa01 f303 	lsl.w	r3, r1, r3
 80019b6:	ea42 0103 	orr.w	r1, r2, r3
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d10a      	bne.n	80019dc <HAL_ADC_ConfigChannel+0x598>
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	0e9b      	lsrs	r3, r3, #26
 80019cc:	3301      	adds	r3, #1
 80019ce:	f003 021f 	and.w	r2, r3, #31
 80019d2:	4613      	mov	r3, r2
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	4413      	add	r3, r2
 80019d8:	051b      	lsls	r3, r3, #20
 80019da:	e018      	b.n	8001a0e <HAL_ADC_ConfigChannel+0x5ca>
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019e4:	fa93 f3a3 	rbit	r3, r3
 80019e8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80019ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80019ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d101      	bne.n	80019f8 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 80019f4:	2320      	movs	r3, #32
 80019f6:	e003      	b.n	8001a00 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 80019f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019fa:	fab3 f383 	clz	r3, r3
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	3301      	adds	r3, #1
 8001a02:	f003 021f 	and.w	r2, r3, #31
 8001a06:	4613      	mov	r3, r2
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	4413      	add	r3, r2
 8001a0c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001a0e:	430b      	orrs	r3, r1
 8001a10:	e081      	b.n	8001b16 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d107      	bne.n	8001a2e <HAL_ADC_ConfigChannel+0x5ea>
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	0e9b      	lsrs	r3, r3, #26
 8001a24:	3301      	adds	r3, #1
 8001a26:	069b      	lsls	r3, r3, #26
 8001a28:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a2c:	e015      	b.n	8001a5a <HAL_ADC_ConfigChannel+0x616>
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a36:	fa93 f3a3 	rbit	r3, r3
 8001a3a:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a3e:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d101      	bne.n	8001a4a <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8001a46:	2320      	movs	r3, #32
 8001a48:	e003      	b.n	8001a52 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8001a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a4c:	fab3 f383 	clz	r3, r3
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	3301      	adds	r3, #1
 8001a54:	069b      	lsls	r3, r3, #26
 8001a56:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d109      	bne.n	8001a7a <HAL_ADC_ConfigChannel+0x636>
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	0e9b      	lsrs	r3, r3, #26
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	f003 031f 	and.w	r3, r3, #31
 8001a72:	2101      	movs	r1, #1
 8001a74:	fa01 f303 	lsl.w	r3, r1, r3
 8001a78:	e017      	b.n	8001aaa <HAL_ADC_ConfigChannel+0x666>
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a80:	6a3b      	ldr	r3, [r7, #32]
 8001a82:	fa93 f3a3 	rbit	r3, r3
 8001a86:	61fb      	str	r3, [r7, #28]
  return result;
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d101      	bne.n	8001a96 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8001a92:	2320      	movs	r3, #32
 8001a94:	e003      	b.n	8001a9e <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8001a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a98:	fab3 f383 	clz	r3, r3
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	f003 031f 	and.w	r3, r3, #31
 8001aa4:	2101      	movs	r1, #1
 8001aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aaa:	ea42 0103 	orr.w	r1, r2, r3
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d10d      	bne.n	8001ad6 <HAL_ADC_ConfigChannel+0x692>
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	0e9b      	lsrs	r3, r3, #26
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	f003 021f 	and.w	r2, r3, #31
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	4413      	add	r3, r2
 8001acc:	3b1e      	subs	r3, #30
 8001ace:	051b      	lsls	r3, r3, #20
 8001ad0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ad4:	e01e      	b.n	8001b14 <HAL_ADC_ConfigChannel+0x6d0>
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	fa93 f3a3 	rbit	r3, r3
 8001ae2:	613b      	str	r3, [r7, #16]
  return result;
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d104      	bne.n	8001af8 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8001aee:	2320      	movs	r3, #32
 8001af0:	e006      	b.n	8001b00 <HAL_ADC_ConfigChannel+0x6bc>
 8001af2:	bf00      	nop
 8001af4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	fab3 f383 	clz	r3, r3
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	3301      	adds	r3, #1
 8001b02:	f003 021f 	and.w	r2, r3, #31
 8001b06:	4613      	mov	r3, r2
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	4413      	add	r3, r2
 8001b0c:	3b1e      	subs	r3, #30
 8001b0e:	051b      	lsls	r3, r3, #20
 8001b10:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001b14:	430b      	orrs	r3, r1
 8001b16:	683a      	ldr	r2, [r7, #0]
 8001b18:	6892      	ldr	r2, [r2, #8]
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	f7ff f8ff 	bl	8000d1e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	4b3d      	ldr	r3, [pc, #244]	; (8001c1c <HAL_ADC_ConfigChannel+0x7d8>)
 8001b26:	4013      	ands	r3, r2
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d06c      	beq.n	8001c06 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001b2c:	483c      	ldr	r0, [pc, #240]	; (8001c20 <HAL_ADC_ConfigChannel+0x7dc>)
 8001b2e:	f7ff f841 	bl	8000bb4 <LL_ADC_GetCommonPathInternalCh>
 8001b32:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a3a      	ldr	r2, [pc, #232]	; (8001c24 <HAL_ADC_ConfigChannel+0x7e0>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d127      	bne.n	8001b90 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001b40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001b44:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d121      	bne.n	8001b90 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a35      	ldr	r2, [pc, #212]	; (8001c28 <HAL_ADC_ConfigChannel+0x7e4>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d157      	bne.n	8001c06 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001b56:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001b5a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001b5e:	4619      	mov	r1, r3
 8001b60:	482f      	ldr	r0, [pc, #188]	; (8001c20 <HAL_ADC_ConfigChannel+0x7dc>)
 8001b62:	f7ff f814 	bl	8000b8e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b66:	4b31      	ldr	r3, [pc, #196]	; (8001c2c <HAL_ADC_ConfigChannel+0x7e8>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	099b      	lsrs	r3, r3, #6
 8001b6c:	4a30      	ldr	r2, [pc, #192]	; (8001c30 <HAL_ADC_ConfigChannel+0x7ec>)
 8001b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b72:	099b      	lsrs	r3, r3, #6
 8001b74:	1c5a      	adds	r2, r3, #1
 8001b76:	4613      	mov	r3, r2
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	4413      	add	r3, r2
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001b80:	e002      	b.n	8001b88 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	3b01      	subs	r3, #1
 8001b86:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d1f9      	bne.n	8001b82 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001b8e:	e03a      	b.n	8001c06 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a27      	ldr	r2, [pc, #156]	; (8001c34 <HAL_ADC_ConfigChannel+0x7f0>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d113      	bne.n	8001bc2 <HAL_ADC_ConfigChannel+0x77e>
 8001b9a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001b9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d10d      	bne.n	8001bc2 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a1f      	ldr	r2, [pc, #124]	; (8001c28 <HAL_ADC_ConfigChannel+0x7e4>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d12a      	bne.n	8001c06 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001bb0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001bb4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4819      	ldr	r0, [pc, #100]	; (8001c20 <HAL_ADC_ConfigChannel+0x7dc>)
 8001bbc:	f7fe ffe7 	bl	8000b8e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001bc0:	e021      	b.n	8001c06 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a1c      	ldr	r2, [pc, #112]	; (8001c38 <HAL_ADC_ConfigChannel+0x7f4>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d11c      	bne.n	8001c06 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001bcc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001bd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d116      	bne.n	8001c06 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a12      	ldr	r2, [pc, #72]	; (8001c28 <HAL_ADC_ConfigChannel+0x7e4>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d111      	bne.n	8001c06 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001be2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001be6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001bea:	4619      	mov	r1, r3
 8001bec:	480c      	ldr	r0, [pc, #48]	; (8001c20 <HAL_ADC_ConfigChannel+0x7dc>)
 8001bee:	f7fe ffce 	bl	8000b8e <LL_ADC_SetCommonPathInternalCh>
 8001bf2:	e008      	b.n	8001c06 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf8:	f043 0220 	orr.w	r2, r3, #32
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8001c0e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	37d8      	adds	r7, #216	; 0xd8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	80080000 	.word	0x80080000
 8001c20:	50040300 	.word	0x50040300
 8001c24:	c7520000 	.word	0xc7520000
 8001c28:	50040000 	.word	0x50040000
 8001c2c:	20000008 	.word	0x20000008
 8001c30:	053e2d63 	.word	0x053e2d63
 8001c34:	cb840000 	.word	0xcb840000
 8001c38:	80000001 	.word	0x80000001

08001c3c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b088      	sub	sp, #32
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8001c46:	2300      	movs	r3, #0
 8001c48:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7ff f976 	bl	8000f44 <LL_ADC_REG_IsConversionOngoing>
 8001c58:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7ff f997 	bl	8000f92 <LL_ADC_INJ_IsConversionOngoing>
 8001c64:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d103      	bne.n	8001c74 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	f000 8098 	beq.w	8001da4 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	68db      	ldr	r3, [r3, #12]
 8001c7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d02a      	beq.n	8001cd8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	7e5b      	ldrb	r3, [r3, #25]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d126      	bne.n	8001cd8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	7e1b      	ldrb	r3, [r3, #24]
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d122      	bne.n	8001cd8 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8001c92:	2301      	movs	r3, #1
 8001c94:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8001c96:	e014      	b.n	8001cc2 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	4a45      	ldr	r2, [pc, #276]	; (8001db0 <ADC_ConversionStop+0x174>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d90d      	bls.n	8001cbc <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ca4:	f043 0210 	orr.w	r2, r3, #16
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cb0:	f043 0201 	orr.w	r2, r3, #1
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e074      	b.n	8001da6 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ccc:	2b40      	cmp	r3, #64	; 0x40
 8001cce:	d1e3      	bne.n	8001c98 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2240      	movs	r2, #64	; 0x40
 8001cd6:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d014      	beq.n	8001d08 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7ff f92e 	bl	8000f44 <LL_ADC_REG_IsConversionOngoing>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d00c      	beq.n	8001d08 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7ff f8eb 	bl	8000ece <LL_ADC_IsDisableOngoing>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d104      	bne.n	8001d08 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7ff f90a 	bl	8000f1c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d014      	beq.n	8001d38 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7ff f93d 	bl	8000f92 <LL_ADC_INJ_IsConversionOngoing>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d00c      	beq.n	8001d38 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7ff f8d3 	bl	8000ece <LL_ADC_IsDisableOngoing>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d104      	bne.n	8001d38 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7ff f919 	bl	8000f6a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d005      	beq.n	8001d4a <ADC_ConversionStop+0x10e>
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	2b03      	cmp	r3, #3
 8001d42:	d105      	bne.n	8001d50 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8001d44:	230c      	movs	r3, #12
 8001d46:	617b      	str	r3, [r7, #20]
        break;
 8001d48:	e005      	b.n	8001d56 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8001d4a:	2308      	movs	r3, #8
 8001d4c:	617b      	str	r3, [r7, #20]
        break;
 8001d4e:	e002      	b.n	8001d56 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8001d50:	2304      	movs	r3, #4
 8001d52:	617b      	str	r3, [r7, #20]
        break;
 8001d54:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8001d56:	f7fe fed7 	bl	8000b08 <HAL_GetTick>
 8001d5a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8001d5c:	e01b      	b.n	8001d96 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001d5e:	f7fe fed3 	bl	8000b08 <HAL_GetTick>
 8001d62:	4602      	mov	r2, r0
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	2b05      	cmp	r3, #5
 8001d6a:	d914      	bls.n	8001d96 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	689a      	ldr	r2, [r3, #8]
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	4013      	ands	r3, r2
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d00d      	beq.n	8001d96 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d7e:	f043 0210 	orr.w	r2, r3, #16
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d8a:	f043 0201 	orr.w	r2, r3, #1
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e007      	b.n	8001da6 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	689a      	ldr	r2, [r3, #8]
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	4013      	ands	r3, r2
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d1dc      	bne.n	8001d5e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3720      	adds	r7, #32
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	a33fffff 	.word	0xa33fffff

08001db4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7ff f86f 	bl	8000ea8 <LL_ADC_IsEnabled>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d169      	bne.n	8001ea4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	689a      	ldr	r2, [r3, #8]
 8001dd6:	4b36      	ldr	r3, [pc, #216]	; (8001eb0 <ADC_Enable+0xfc>)
 8001dd8:	4013      	ands	r3, r2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d00d      	beq.n	8001dfa <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de2:	f043 0210 	orr.w	r2, r3, #16
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dee:	f043 0201 	orr.w	r2, r3, #1
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e055      	b.n	8001ea6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7ff f82a 	bl	8000e58 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001e04:	482b      	ldr	r0, [pc, #172]	; (8001eb4 <ADC_Enable+0x100>)
 8001e06:	f7fe fed5 	bl	8000bb4 <LL_ADC_GetCommonPathInternalCh>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d013      	beq.n	8001e3c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e14:	4b28      	ldr	r3, [pc, #160]	; (8001eb8 <ADC_Enable+0x104>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	099b      	lsrs	r3, r3, #6
 8001e1a:	4a28      	ldr	r2, [pc, #160]	; (8001ebc <ADC_Enable+0x108>)
 8001e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e20:	099b      	lsrs	r3, r3, #6
 8001e22:	1c5a      	adds	r2, r3, #1
 8001e24:	4613      	mov	r3, r2
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	4413      	add	r3, r2
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8001e2e:	e002      	b.n	8001e36 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	3b01      	subs	r3, #1
 8001e34:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d1f9      	bne.n	8001e30 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001e3c:	f7fe fe64 	bl	8000b08 <HAL_GetTick>
 8001e40:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001e42:	e028      	b.n	8001e96 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7ff f82d 	bl	8000ea8 <LL_ADC_IsEnabled>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d104      	bne.n	8001e5e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7fe fffd 	bl	8000e58 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001e5e:	f7fe fe53 	bl	8000b08 <HAL_GetTick>
 8001e62:	4602      	mov	r2, r0
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d914      	bls.n	8001e96 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0301 	and.w	r3, r3, #1
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d00d      	beq.n	8001e96 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e7e:	f043 0210 	orr.w	r2, r3, #16
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e8a:	f043 0201 	orr.w	r2, r3, #1
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e007      	b.n	8001ea6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0301 	and.w	r3, r3, #1
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d1cf      	bne.n	8001e44 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3710      	adds	r7, #16
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	8000003f 	.word	0x8000003f
 8001eb4:	50040300 	.word	0x50040300
 8001eb8:	20000008 	.word	0x20000008
 8001ebc:	053e2d63 	.word	0x053e2d63

08001ec0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7fe fffe 	bl	8000ece <LL_ADC_IsDisableOngoing>
 8001ed2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7fe ffe5 	bl	8000ea8 <LL_ADC_IsEnabled>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d047      	beq.n	8001f74 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d144      	bne.n	8001f74 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f003 030d 	and.w	r3, r3, #13
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d10c      	bne.n	8001f12 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7fe ffbf 	bl	8000e80 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2203      	movs	r2, #3
 8001f08:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001f0a:	f7fe fdfd 	bl	8000b08 <HAL_GetTick>
 8001f0e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001f10:	e029      	b.n	8001f66 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f16:	f043 0210 	orr.w	r2, r3, #16
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f22:	f043 0201 	orr.w	r2, r3, #1
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e023      	b.n	8001f76 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001f2e:	f7fe fdeb 	bl	8000b08 <HAL_GetTick>
 8001f32:	4602      	mov	r2, r0
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d914      	bls.n	8001f66 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d00d      	beq.n	8001f66 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f4e:	f043 0210 	orr.w	r2, r3, #16
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f5a:	f043 0201 	orr.w	r2, r3, #1
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e007      	b.n	8001f76 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f003 0301 	and.w	r3, r3, #1
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d1dc      	bne.n	8001f2e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3710      	adds	r7, #16
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	b084      	sub	sp, #16
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f8a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f90:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d14b      	bne.n	8002030 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f9c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0308 	and.w	r3, r3, #8
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d021      	beq.n	8001ff6 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7fe fe72 	bl	8000ca0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d032      	beq.n	8002028 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d12b      	bne.n	8002028 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	659a      	str	r2, [r3, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d11f      	bne.n	8002028 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fec:	f043 0201 	orr.w	r2, r3, #1
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	659a      	str	r2, [r3, #88]	; 0x58
 8001ff4:	e018      	b.n	8002028 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	f003 0302 	and.w	r3, r3, #2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d111      	bne.n	8002028 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002008:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	659a      	str	r2, [r3, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002014:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d105      	bne.n	8002028 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002020:	f043 0201 	orr.w	r2, r3, #1
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	659a      	str	r2, [r3, #88]	; 0x58

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002028:	68f8      	ldr	r0, [r7, #12]
 800202a:	f002 f9c7 	bl	80043bc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800202e:	e00e      	b.n	800204e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002034:	f003 0310 	and.w	r3, r3, #16
 8002038:	2b00      	cmp	r3, #0
 800203a:	d003      	beq.n	8002044 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800203c:	68f8      	ldr	r0, [r7, #12]
 800203e:	f7ff f9f6 	bl	800142e <HAL_ADC_ErrorCallback>
}
 8002042:	e004      	b.n	800204e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	4798      	blx	r3
}
 800204e:	bf00      	nop
 8002050:	3710      	adds	r7, #16
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}

08002056 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002056:	b580      	push	{r7, lr}
 8002058:	b084      	sub	sp, #16
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002062:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002064:	68f8      	ldr	r0, [r7, #12]
 8002066:	f7ff f9d8 	bl	800141a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800206a:	bf00      	nop
 800206c:	3710      	adds	r7, #16
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}

08002072 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002072:	b580      	push	{r7, lr}
 8002074:	b084      	sub	sp, #16
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800207e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002084:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002090:	f043 0204 	orr.w	r2, r3, #4
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002098:	68f8      	ldr	r0, [r7, #12]
 800209a:	f7ff f9c8 	bl	800142e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800209e:	bf00      	nop
 80020a0:	3710      	adds	r7, #16
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
	...

080020a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b085      	sub	sp, #20
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f003 0307 	and.w	r3, r3, #7
 80020b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020b8:	4b0c      	ldr	r3, [pc, #48]	; (80020ec <__NVIC_SetPriorityGrouping+0x44>)
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020be:	68ba      	ldr	r2, [r7, #8]
 80020c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020c4:	4013      	ands	r3, r2
 80020c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020da:	4a04      	ldr	r2, [pc, #16]	; (80020ec <__NVIC_SetPriorityGrouping+0x44>)
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	60d3      	str	r3, [r2, #12]
}
 80020e0:	bf00      	nop
 80020e2:	3714      	adds	r7, #20
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr
 80020ec:	e000ed00 	.word	0xe000ed00

080020f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020f4:	4b04      	ldr	r3, [pc, #16]	; (8002108 <__NVIC_GetPriorityGrouping+0x18>)
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	0a1b      	lsrs	r3, r3, #8
 80020fa:	f003 0307 	and.w	r3, r3, #7
}
 80020fe:	4618      	mov	r0, r3
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr
 8002108:	e000ed00 	.word	0xe000ed00

0800210c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	4603      	mov	r3, r0
 8002114:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800211a:	2b00      	cmp	r3, #0
 800211c:	db0b      	blt.n	8002136 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800211e:	79fb      	ldrb	r3, [r7, #7]
 8002120:	f003 021f 	and.w	r2, r3, #31
 8002124:	4907      	ldr	r1, [pc, #28]	; (8002144 <__NVIC_EnableIRQ+0x38>)
 8002126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212a:	095b      	lsrs	r3, r3, #5
 800212c:	2001      	movs	r0, #1
 800212e:	fa00 f202 	lsl.w	r2, r0, r2
 8002132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002136:	bf00      	nop
 8002138:	370c      	adds	r7, #12
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	e000e100 	.word	0xe000e100

08002148 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	4603      	mov	r3, r0
 8002150:	6039      	str	r1, [r7, #0]
 8002152:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002158:	2b00      	cmp	r3, #0
 800215a:	db0a      	blt.n	8002172 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	b2da      	uxtb	r2, r3
 8002160:	490c      	ldr	r1, [pc, #48]	; (8002194 <__NVIC_SetPriority+0x4c>)
 8002162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002166:	0112      	lsls	r2, r2, #4
 8002168:	b2d2      	uxtb	r2, r2
 800216a:	440b      	add	r3, r1
 800216c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002170:	e00a      	b.n	8002188 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	b2da      	uxtb	r2, r3
 8002176:	4908      	ldr	r1, [pc, #32]	; (8002198 <__NVIC_SetPriority+0x50>)
 8002178:	79fb      	ldrb	r3, [r7, #7]
 800217a:	f003 030f 	and.w	r3, r3, #15
 800217e:	3b04      	subs	r3, #4
 8002180:	0112      	lsls	r2, r2, #4
 8002182:	b2d2      	uxtb	r2, r2
 8002184:	440b      	add	r3, r1
 8002186:	761a      	strb	r2, [r3, #24]
}
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr
 8002194:	e000e100 	.word	0xe000e100
 8002198:	e000ed00 	.word	0xe000ed00

0800219c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800219c:	b480      	push	{r7}
 800219e:	b089      	sub	sp, #36	; 0x24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f003 0307 	and.w	r3, r3, #7
 80021ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	f1c3 0307 	rsb	r3, r3, #7
 80021b6:	2b04      	cmp	r3, #4
 80021b8:	bf28      	it	cs
 80021ba:	2304      	movcs	r3, #4
 80021bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	3304      	adds	r3, #4
 80021c2:	2b06      	cmp	r3, #6
 80021c4:	d902      	bls.n	80021cc <NVIC_EncodePriority+0x30>
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	3b03      	subs	r3, #3
 80021ca:	e000      	b.n	80021ce <NVIC_EncodePriority+0x32>
 80021cc:	2300      	movs	r3, #0
 80021ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	fa02 f303 	lsl.w	r3, r2, r3
 80021da:	43da      	mvns	r2, r3
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	401a      	ands	r2, r3
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	fa01 f303 	lsl.w	r3, r1, r3
 80021ee:	43d9      	mvns	r1, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021f4:	4313      	orrs	r3, r2
         );
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3724      	adds	r7, #36	; 0x24
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
	...

08002204 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	3b01      	subs	r3, #1
 8002210:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002214:	d301      	bcc.n	800221a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002216:	2301      	movs	r3, #1
 8002218:	e00f      	b.n	800223a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800221a:	4a0a      	ldr	r2, [pc, #40]	; (8002244 <SysTick_Config+0x40>)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	3b01      	subs	r3, #1
 8002220:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002222:	210f      	movs	r1, #15
 8002224:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002228:	f7ff ff8e 	bl	8002148 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800222c:	4b05      	ldr	r3, [pc, #20]	; (8002244 <SysTick_Config+0x40>)
 800222e:	2200      	movs	r2, #0
 8002230:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002232:	4b04      	ldr	r3, [pc, #16]	; (8002244 <SysTick_Config+0x40>)
 8002234:	2207      	movs	r2, #7
 8002236:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	e000e010 	.word	0xe000e010

08002248 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f7ff ff29 	bl	80020a8 <__NVIC_SetPriorityGrouping>
}
 8002256:	bf00      	nop
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800225e:	b580      	push	{r7, lr}
 8002260:	b086      	sub	sp, #24
 8002262:	af00      	add	r7, sp, #0
 8002264:	4603      	mov	r3, r0
 8002266:	60b9      	str	r1, [r7, #8]
 8002268:	607a      	str	r2, [r7, #4]
 800226a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800226c:	2300      	movs	r3, #0
 800226e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002270:	f7ff ff3e 	bl	80020f0 <__NVIC_GetPriorityGrouping>
 8002274:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	68b9      	ldr	r1, [r7, #8]
 800227a:	6978      	ldr	r0, [r7, #20]
 800227c:	f7ff ff8e 	bl	800219c <NVIC_EncodePriority>
 8002280:	4602      	mov	r2, r0
 8002282:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002286:	4611      	mov	r1, r2
 8002288:	4618      	mov	r0, r3
 800228a:	f7ff ff5d 	bl	8002148 <__NVIC_SetPriority>
}
 800228e:	bf00      	nop
 8002290:	3718      	adds	r7, #24
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002296:	b580      	push	{r7, lr}
 8002298:	b082      	sub	sp, #8
 800229a:	af00      	add	r7, sp, #0
 800229c:	4603      	mov	r3, r0
 800229e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a4:	4618      	mov	r0, r3
 80022a6:	f7ff ff31 	bl	800210c <__NVIC_EnableIRQ>
}
 80022aa:	bf00      	nop
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}

080022b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022b2:	b580      	push	{r7, lr}
 80022b4:	b082      	sub	sp, #8
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f7ff ffa2 	bl	8002204 <SysTick_Config>
 80022c0:	4603      	mov	r3, r0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3708      	adds	r7, #8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
	...

080022cc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d101      	bne.n	80022de <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e08d      	b.n	80023fa <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	461a      	mov	r2, r3
 80022e4:	4b47      	ldr	r3, [pc, #284]	; (8002404 <HAL_DMA_Init+0x138>)
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d80f      	bhi.n	800230a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	461a      	mov	r2, r3
 80022f0:	4b45      	ldr	r3, [pc, #276]	; (8002408 <HAL_DMA_Init+0x13c>)
 80022f2:	4413      	add	r3, r2
 80022f4:	4a45      	ldr	r2, [pc, #276]	; (800240c <HAL_DMA_Init+0x140>)
 80022f6:	fba2 2303 	umull	r2, r3, r2, r3
 80022fa:	091b      	lsrs	r3, r3, #4
 80022fc:	009a      	lsls	r2, r3, #2
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a42      	ldr	r2, [pc, #264]	; (8002410 <HAL_DMA_Init+0x144>)
 8002306:	641a      	str	r2, [r3, #64]	; 0x40
 8002308:	e00e      	b.n	8002328 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	461a      	mov	r2, r3
 8002310:	4b40      	ldr	r3, [pc, #256]	; (8002414 <HAL_DMA_Init+0x148>)
 8002312:	4413      	add	r3, r2
 8002314:	4a3d      	ldr	r2, [pc, #244]	; (800240c <HAL_DMA_Init+0x140>)
 8002316:	fba2 2303 	umull	r2, r3, r2, r3
 800231a:	091b      	lsrs	r3, r3, #4
 800231c:	009a      	lsls	r2, r3, #2
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a3c      	ldr	r2, [pc, #240]	; (8002418 <HAL_DMA_Init+0x14c>)
 8002326:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2202      	movs	r2, #2
 800232c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800233e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002342:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800234c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002358:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	699b      	ldr	r3, [r3, #24]
 800235e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002364:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a1b      	ldr	r3, [r3, #32]
 800236a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800236c:	68fa      	ldr	r2, [r7, #12]
 800236e:	4313      	orrs	r3, r2
 8002370:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	68fa      	ldr	r2, [r7, #12]
 8002378:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f000 fa12 	bl	80027a4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002388:	d102      	bne.n	8002390 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685a      	ldr	r2, [r3, #4]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002398:	b2d2      	uxtb	r2, r2
 800239a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80023a4:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d010      	beq.n	80023d0 <HAL_DMA_Init+0x104>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	2b04      	cmp	r3, #4
 80023b4:	d80c      	bhi.n	80023d0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f000 fa32 	bl	8002820 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023c0:	2200      	movs	r2, #0
 80023c2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80023cc:	605a      	str	r2, [r3, #4]
 80023ce:	e008      	b.n	80023e2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2200      	movs	r2, #0
 80023f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3710      	adds	r7, #16
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	40020407 	.word	0x40020407
 8002408:	bffdfff8 	.word	0xbffdfff8
 800240c:	cccccccd 	.word	0xcccccccd
 8002410:	40020000 	.word	0x40020000
 8002414:	bffdfbf8 	.word	0xbffdfbf8
 8002418:	40020400 	.word	0x40020400

0800241c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af00      	add	r7, sp, #0
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	60b9      	str	r1, [r7, #8]
 8002426:	607a      	str	r2, [r7, #4]
 8002428:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800242a:	2300      	movs	r3, #0
 800242c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002434:	2b01      	cmp	r3, #1
 8002436:	d101      	bne.n	800243c <HAL_DMA_Start_IT+0x20>
 8002438:	2302      	movs	r3, #2
 800243a:	e066      	b.n	800250a <HAL_DMA_Start_IT+0xee>
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800244a:	b2db      	uxtb	r3, r3
 800244c:	2b01      	cmp	r3, #1
 800244e:	d155      	bne.n	80024fc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2202      	movs	r2, #2
 8002454:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2200      	movs	r2, #0
 800245c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f022 0201 	bic.w	r2, r2, #1
 800246c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	68b9      	ldr	r1, [r7, #8]
 8002474:	68f8      	ldr	r0, [r7, #12]
 8002476:	f000 f957 	bl	8002728 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247e:	2b00      	cmp	r3, #0
 8002480:	d008      	beq.n	8002494 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f042 020e 	orr.w	r2, r2, #14
 8002490:	601a      	str	r2, [r3, #0]
 8002492:	e00f      	b.n	80024b4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f022 0204 	bic.w	r2, r2, #4
 80024a2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f042 020a 	orr.w	r2, r2, #10
 80024b2:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d007      	beq.n	80024d2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024d0:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d007      	beq.n	80024ea <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024e8:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f042 0201 	orr.w	r2, r2, #1
 80024f8:	601a      	str	r2, [r3, #0]
 80024fa:	e005      	b.n	8002508 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002504:	2302      	movs	r3, #2
 8002506:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002508:	7dfb      	ldrb	r3, [r7, #23]
}
 800250a:	4618      	mov	r0, r3
 800250c:	3718      	adds	r7, #24
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002512:	b480      	push	{r7}
 8002514:	b085      	sub	sp, #20
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800251a:	2300      	movs	r3, #0
 800251c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002524:	b2db      	uxtb	r3, r3
 8002526:	2b02      	cmp	r3, #2
 8002528:	d008      	beq.n	800253c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2204      	movs	r2, #4
 800252e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e040      	b.n	80025be <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f022 020e 	bic.w	r2, r2, #14
 800254a:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002556:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800255a:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f022 0201 	bic.w	r2, r2, #1
 800256a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002570:	f003 021c 	and.w	r2, r3, #28
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002578:	2101      	movs	r1, #1
 800257a:	fa01 f202 	lsl.w	r2, r1, r2
 800257e:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002588:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800258e:	2b00      	cmp	r3, #0
 8002590:	d00c      	beq.n	80025ac <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800259c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025a0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80025aa:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80025bc:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3714      	adds	r7, #20
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr

080025ca <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025ca:	b580      	push	{r7, lr}
 80025cc:	b084      	sub	sp, #16
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e6:	f003 031c 	and.w	r3, r3, #28
 80025ea:	2204      	movs	r2, #4
 80025ec:	409a      	lsls	r2, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	4013      	ands	r3, r2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d026      	beq.n	8002644 <HAL_DMA_IRQHandler+0x7a>
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	f003 0304 	and.w	r3, r3, #4
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d021      	beq.n	8002644 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0320 	and.w	r3, r3, #32
 800260a:	2b00      	cmp	r3, #0
 800260c:	d107      	bne.n	800261e <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f022 0204 	bic.w	r2, r2, #4
 800261c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002622:	f003 021c 	and.w	r2, r3, #28
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262a:	2104      	movs	r1, #4
 800262c:	fa01 f202 	lsl.w	r2, r1, r2
 8002630:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002636:	2b00      	cmp	r3, #0
 8002638:	d071      	beq.n	800271e <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002642:	e06c      	b.n	800271e <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002648:	f003 031c 	and.w	r3, r3, #28
 800264c:	2202      	movs	r2, #2
 800264e:	409a      	lsls	r2, r3
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	4013      	ands	r3, r2
 8002654:	2b00      	cmp	r3, #0
 8002656:	d02e      	beq.n	80026b6 <HAL_DMA_IRQHandler+0xec>
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d029      	beq.n	80026b6 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0320 	and.w	r3, r3, #32
 800266c:	2b00      	cmp	r3, #0
 800266e:	d10b      	bne.n	8002688 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f022 020a 	bic.w	r2, r2, #10
 800267e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268c:	f003 021c 	and.w	r2, r3, #28
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002694:	2102      	movs	r1, #2
 8002696:	fa01 f202 	lsl.w	r2, r1, r2
 800269a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d038      	beq.n	800271e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80026b4:	e033      	b.n	800271e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ba:	f003 031c 	and.w	r3, r3, #28
 80026be:	2208      	movs	r2, #8
 80026c0:	409a      	lsls	r2, r3
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	4013      	ands	r3, r2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d02a      	beq.n	8002720 <HAL_DMA_IRQHandler+0x156>
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	f003 0308 	and.w	r3, r3, #8
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d025      	beq.n	8002720 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f022 020e 	bic.w	r2, r2, #14
 80026e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e8:	f003 021c 	and.w	r2, r3, #28
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f0:	2101      	movs	r1, #1
 80026f2:	fa01 f202 	lsl.w	r2, r1, r2
 80026f6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2201      	movs	r2, #1
 8002702:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002712:	2b00      	cmp	r3, #0
 8002714:	d004      	beq.n	8002720 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800271e:	bf00      	nop
 8002720:	bf00      	nop
}
 8002722:	3710      	adds	r7, #16
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}

08002728 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002728:	b480      	push	{r7}
 800272a:	b085      	sub	sp, #20
 800272c:	af00      	add	r7, sp, #0
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	607a      	str	r2, [r7, #4]
 8002734:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800273a:	68fa      	ldr	r2, [r7, #12]
 800273c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800273e:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002744:	2b00      	cmp	r3, #0
 8002746:	d004      	beq.n	8002752 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800274c:	68fa      	ldr	r2, [r7, #12]
 800274e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002750:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002756:	f003 021c 	and.w	r2, r3, #28
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275e:	2101      	movs	r1, #1
 8002760:	fa01 f202 	lsl.w	r2, r1, r2
 8002764:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	683a      	ldr	r2, [r7, #0]
 800276c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	2b10      	cmp	r3, #16
 8002774:	d108      	bne.n	8002788 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	68ba      	ldr	r2, [r7, #8]
 8002784:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002786:	e007      	b.n	8002798 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	68ba      	ldr	r2, [r7, #8]
 800278e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	60da      	str	r2, [r3, #12]
}
 8002798:	bf00      	nop
 800279a:	3714      	adds	r7, #20
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr

080027a4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b085      	sub	sp, #20
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	461a      	mov	r2, r3
 80027b2:	4b17      	ldr	r3, [pc, #92]	; (8002810 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d80a      	bhi.n	80027ce <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027bc:	089b      	lsrs	r3, r3, #2
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80027c4:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	6493      	str	r3, [r2, #72]	; 0x48
 80027cc:	e007      	b.n	80027de <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d2:	089b      	lsrs	r3, r3, #2
 80027d4:	009a      	lsls	r2, r3, #2
 80027d6:	4b0f      	ldr	r3, [pc, #60]	; (8002814 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80027d8:	4413      	add	r3, r2
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	3b08      	subs	r3, #8
 80027e6:	4a0c      	ldr	r2, [pc, #48]	; (8002818 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80027e8:	fba2 2303 	umull	r2, r3, r2, r3
 80027ec:	091b      	lsrs	r3, r3, #4
 80027ee:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	4a0a      	ldr	r2, [pc, #40]	; (800281c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80027f4:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	f003 031f 	and.w	r3, r3, #31
 80027fc:	2201      	movs	r2, #1
 80027fe:	409a      	lsls	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002804:	bf00      	nop
 8002806:	3714      	adds	r7, #20
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr
 8002810:	40020407 	.word	0x40020407
 8002814:	4002081c 	.word	0x4002081c
 8002818:	cccccccd 	.word	0xcccccccd
 800281c:	40020880 	.word	0x40020880

08002820 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002820:	b480      	push	{r7}
 8002822:	b085      	sub	sp, #20
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	b2db      	uxtb	r3, r3
 800282e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002830:	68fa      	ldr	r2, [r7, #12]
 8002832:	4b0b      	ldr	r3, [pc, #44]	; (8002860 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002834:	4413      	add	r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	461a      	mov	r2, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a08      	ldr	r2, [pc, #32]	; (8002864 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002842:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	3b01      	subs	r3, #1
 8002848:	f003 0303 	and.w	r3, r3, #3
 800284c:	2201      	movs	r2, #1
 800284e:	409a      	lsls	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002854:	bf00      	nop
 8002856:	3714      	adds	r7, #20
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr
 8002860:	1000823f 	.word	0x1000823f
 8002864:	40020940 	.word	0x40020940

08002868 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002868:	b480      	push	{r7}
 800286a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800286c:	4b0d      	ldr	r3, [pc, #52]	; (80028a4 <HAL_PWREx_GetVoltageRange+0x3c>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002874:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002878:	d102      	bne.n	8002880 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800287a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800287e:	e00b      	b.n	8002898 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002880:	4b08      	ldr	r3, [pc, #32]	; (80028a4 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002882:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800288a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800288e:	d102      	bne.n	8002896 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002890:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002894:	e000      	b.n	8002898 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002896:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002898:	4618      	mov	r0, r3
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	40007000 	.word	0x40007000

080028a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b085      	sub	sp, #20
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d141      	bne.n	800293a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80028b6:	4b4b      	ldr	r3, [pc, #300]	; (80029e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80028be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028c2:	d131      	bne.n	8002928 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80028c4:	4b47      	ldr	r3, [pc, #284]	; (80029e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028ca:	4a46      	ldr	r2, [pc, #280]	; (80029e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80028d4:	4b43      	ldr	r3, [pc, #268]	; (80029e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80028dc:	4a41      	ldr	r2, [pc, #260]	; (80029e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80028de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028e2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80028e4:	4b40      	ldr	r3, [pc, #256]	; (80029e8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2232      	movs	r2, #50	; 0x32
 80028ea:	fb02 f303 	mul.w	r3, r2, r3
 80028ee:	4a3f      	ldr	r2, [pc, #252]	; (80029ec <HAL_PWREx_ControlVoltageScaling+0x144>)
 80028f0:	fba2 2303 	umull	r2, r3, r2, r3
 80028f4:	0c9b      	lsrs	r3, r3, #18
 80028f6:	3301      	adds	r3, #1
 80028f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80028fa:	e002      	b.n	8002902 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	3b01      	subs	r3, #1
 8002900:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002902:	4b38      	ldr	r3, [pc, #224]	; (80029e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002904:	695b      	ldr	r3, [r3, #20]
 8002906:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800290a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800290e:	d102      	bne.n	8002916 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d1f2      	bne.n	80028fc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002916:	4b33      	ldr	r3, [pc, #204]	; (80029e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002918:	695b      	ldr	r3, [r3, #20]
 800291a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800291e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002922:	d158      	bne.n	80029d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e057      	b.n	80029d8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002928:	4b2e      	ldr	r3, [pc, #184]	; (80029e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800292a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800292e:	4a2d      	ldr	r2, [pc, #180]	; (80029e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002930:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002934:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002938:	e04d      	b.n	80029d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002940:	d141      	bne.n	80029c6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002942:	4b28      	ldr	r3, [pc, #160]	; (80029e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800294a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800294e:	d131      	bne.n	80029b4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002950:	4b24      	ldr	r3, [pc, #144]	; (80029e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002952:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002956:	4a23      	ldr	r2, [pc, #140]	; (80029e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002958:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800295c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002960:	4b20      	ldr	r3, [pc, #128]	; (80029e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002968:	4a1e      	ldr	r2, [pc, #120]	; (80029e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800296a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800296e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002970:	4b1d      	ldr	r3, [pc, #116]	; (80029e8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2232      	movs	r2, #50	; 0x32
 8002976:	fb02 f303 	mul.w	r3, r2, r3
 800297a:	4a1c      	ldr	r2, [pc, #112]	; (80029ec <HAL_PWREx_ControlVoltageScaling+0x144>)
 800297c:	fba2 2303 	umull	r2, r3, r2, r3
 8002980:	0c9b      	lsrs	r3, r3, #18
 8002982:	3301      	adds	r3, #1
 8002984:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002986:	e002      	b.n	800298e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	3b01      	subs	r3, #1
 800298c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800298e:	4b15      	ldr	r3, [pc, #84]	; (80029e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002990:	695b      	ldr	r3, [r3, #20]
 8002992:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002996:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800299a:	d102      	bne.n	80029a2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d1f2      	bne.n	8002988 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80029a2:	4b10      	ldr	r3, [pc, #64]	; (80029e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029a4:	695b      	ldr	r3, [r3, #20]
 80029a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029ae:	d112      	bne.n	80029d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e011      	b.n	80029d8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80029b4:	4b0b      	ldr	r3, [pc, #44]	; (80029e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029ba:	4a0a      	ldr	r2, [pc, #40]	; (80029e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80029c4:	e007      	b.n	80029d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80029c6:	4b07      	ldr	r3, [pc, #28]	; (80029e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80029ce:	4a05      	ldr	r2, [pc, #20]	; (80029e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029d4:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80029d6:	2300      	movs	r3, #0
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3714      	adds	r7, #20
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr
 80029e4:	40007000 	.word	0x40007000
 80029e8:	20000008 	.word	0x20000008
 80029ec:	431bde83 	.word	0x431bde83

080029f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b088      	sub	sp, #32
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d102      	bne.n	8002a04 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	f000 bc08 	b.w	8003214 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a04:	4b96      	ldr	r3, [pc, #600]	; (8002c60 <HAL_RCC_OscConfig+0x270>)
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f003 030c 	and.w	r3, r3, #12
 8002a0c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a0e:	4b94      	ldr	r3, [pc, #592]	; (8002c60 <HAL_RCC_OscConfig+0x270>)
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	f003 0303 	and.w	r3, r3, #3
 8002a16:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0310 	and.w	r3, r3, #16
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	f000 80e4 	beq.w	8002bee <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d007      	beq.n	8002a3c <HAL_RCC_OscConfig+0x4c>
 8002a2c:	69bb      	ldr	r3, [r7, #24]
 8002a2e:	2b0c      	cmp	r3, #12
 8002a30:	f040 808b 	bne.w	8002b4a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	f040 8087 	bne.w	8002b4a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a3c:	4b88      	ldr	r3, [pc, #544]	; (8002c60 <HAL_RCC_OscConfig+0x270>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0302 	and.w	r3, r3, #2
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d005      	beq.n	8002a54 <HAL_RCC_OscConfig+0x64>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	699b      	ldr	r3, [r3, #24]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d101      	bne.n	8002a54 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e3df      	b.n	8003214 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6a1a      	ldr	r2, [r3, #32]
 8002a58:	4b81      	ldr	r3, [pc, #516]	; (8002c60 <HAL_RCC_OscConfig+0x270>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0308 	and.w	r3, r3, #8
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d004      	beq.n	8002a6e <HAL_RCC_OscConfig+0x7e>
 8002a64:	4b7e      	ldr	r3, [pc, #504]	; (8002c60 <HAL_RCC_OscConfig+0x270>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a6c:	e005      	b.n	8002a7a <HAL_RCC_OscConfig+0x8a>
 8002a6e:	4b7c      	ldr	r3, [pc, #496]	; (8002c60 <HAL_RCC_OscConfig+0x270>)
 8002a70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a74:	091b      	lsrs	r3, r3, #4
 8002a76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d223      	bcs.n	8002ac6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a1b      	ldr	r3, [r3, #32]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f000 fd94 	bl	80035b0 <RCC_SetFlashLatencyFromMSIRange>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e3c0      	b.n	8003214 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a92:	4b73      	ldr	r3, [pc, #460]	; (8002c60 <HAL_RCC_OscConfig+0x270>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a72      	ldr	r2, [pc, #456]	; (8002c60 <HAL_RCC_OscConfig+0x270>)
 8002a98:	f043 0308 	orr.w	r3, r3, #8
 8002a9c:	6013      	str	r3, [r2, #0]
 8002a9e:	4b70      	ldr	r3, [pc, #448]	; (8002c60 <HAL_RCC_OscConfig+0x270>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a1b      	ldr	r3, [r3, #32]
 8002aaa:	496d      	ldr	r1, [pc, #436]	; (8002c60 <HAL_RCC_OscConfig+0x270>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ab0:	4b6b      	ldr	r3, [pc, #428]	; (8002c60 <HAL_RCC_OscConfig+0x270>)
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	69db      	ldr	r3, [r3, #28]
 8002abc:	021b      	lsls	r3, r3, #8
 8002abe:	4968      	ldr	r1, [pc, #416]	; (8002c60 <HAL_RCC_OscConfig+0x270>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	604b      	str	r3, [r1, #4]
 8002ac4:	e025      	b.n	8002b12 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ac6:	4b66      	ldr	r3, [pc, #408]	; (8002c60 <HAL_RCC_OscConfig+0x270>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a65      	ldr	r2, [pc, #404]	; (8002c60 <HAL_RCC_OscConfig+0x270>)
 8002acc:	f043 0308 	orr.w	r3, r3, #8
 8002ad0:	6013      	str	r3, [r2, #0]
 8002ad2:	4b63      	ldr	r3, [pc, #396]	; (8002c60 <HAL_RCC_OscConfig+0x270>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a1b      	ldr	r3, [r3, #32]
 8002ade:	4960      	ldr	r1, [pc, #384]	; (8002c60 <HAL_RCC_OscConfig+0x270>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ae4:	4b5e      	ldr	r3, [pc, #376]	; (8002c60 <HAL_RCC_OscConfig+0x270>)
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	69db      	ldr	r3, [r3, #28]
 8002af0:	021b      	lsls	r3, r3, #8
 8002af2:	495b      	ldr	r1, [pc, #364]	; (8002c60 <HAL_RCC_OscConfig+0x270>)
 8002af4:	4313      	orrs	r3, r2
 8002af6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d109      	bne.n	8002b12 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a1b      	ldr	r3, [r3, #32]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f000 fd54 	bl	80035b0 <RCC_SetFlashLatencyFromMSIRange>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e380      	b.n	8003214 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b12:	f000 fcc1 	bl	8003498 <HAL_RCC_GetSysClockFreq>
 8002b16:	4602      	mov	r2, r0
 8002b18:	4b51      	ldr	r3, [pc, #324]	; (8002c60 <HAL_RCC_OscConfig+0x270>)
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	091b      	lsrs	r3, r3, #4
 8002b1e:	f003 030f 	and.w	r3, r3, #15
 8002b22:	4950      	ldr	r1, [pc, #320]	; (8002c64 <HAL_RCC_OscConfig+0x274>)
 8002b24:	5ccb      	ldrb	r3, [r1, r3]
 8002b26:	f003 031f 	and.w	r3, r3, #31
 8002b2a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b2e:	4a4e      	ldr	r2, [pc, #312]	; (8002c68 <HAL_RCC_OscConfig+0x278>)
 8002b30:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002b32:	4b4e      	ldr	r3, [pc, #312]	; (8002c6c <HAL_RCC_OscConfig+0x27c>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7fd ff96 	bl	8000a68 <HAL_InitTick>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002b40:	7bfb      	ldrb	r3, [r7, #15]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d052      	beq.n	8002bec <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002b46:	7bfb      	ldrb	r3, [r7, #15]
 8002b48:	e364      	b.n	8003214 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	699b      	ldr	r3, [r3, #24]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d032      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b52:	4b43      	ldr	r3, [pc, #268]	; (8002c60 <HAL_RCC_OscConfig+0x270>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a42      	ldr	r2, [pc, #264]	; (8002c60 <HAL_RCC_OscConfig+0x270>)
 8002b58:	f043 0301 	orr.w	r3, r3, #1
 8002b5c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b5e:	f7fd ffd3 	bl	8000b08 <HAL_GetTick>
 8002b62:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b64:	e008      	b.n	8002b78 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b66:	f7fd ffcf 	bl	8000b08 <HAL_GetTick>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d901      	bls.n	8002b78 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	e34d      	b.n	8003214 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b78:	4b39      	ldr	r3, [pc, #228]	; (8002c60 <HAL_RCC_OscConfig+0x270>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0302 	and.w	r3, r3, #2
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d0f0      	beq.n	8002b66 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b84:	4b36      	ldr	r3, [pc, #216]	; (8002c60 <HAL_RCC_OscConfig+0x270>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a35      	ldr	r2, [pc, #212]	; (8002c60 <HAL_RCC_OscConfig+0x270>)
 8002b8a:	f043 0308 	orr.w	r3, r3, #8
 8002b8e:	6013      	str	r3, [r2, #0]
 8002b90:	4b33      	ldr	r3, [pc, #204]	; (8002c60 <HAL_RCC_OscConfig+0x270>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6a1b      	ldr	r3, [r3, #32]
 8002b9c:	4930      	ldr	r1, [pc, #192]	; (8002c60 <HAL_RCC_OscConfig+0x270>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ba2:	4b2f      	ldr	r3, [pc, #188]	; (8002c60 <HAL_RCC_OscConfig+0x270>)
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	69db      	ldr	r3, [r3, #28]
 8002bae:	021b      	lsls	r3, r3, #8
 8002bb0:	492b      	ldr	r1, [pc, #172]	; (8002c60 <HAL_RCC_OscConfig+0x270>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	604b      	str	r3, [r1, #4]
 8002bb6:	e01a      	b.n	8002bee <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002bb8:	4b29      	ldr	r3, [pc, #164]	; (8002c60 <HAL_RCC_OscConfig+0x270>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a28      	ldr	r2, [pc, #160]	; (8002c60 <HAL_RCC_OscConfig+0x270>)
 8002bbe:	f023 0301 	bic.w	r3, r3, #1
 8002bc2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002bc4:	f7fd ffa0 	bl	8000b08 <HAL_GetTick>
 8002bc8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002bca:	e008      	b.n	8002bde <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002bcc:	f7fd ff9c 	bl	8000b08 <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e31a      	b.n	8003214 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002bde:	4b20      	ldr	r3, [pc, #128]	; (8002c60 <HAL_RCC_OscConfig+0x270>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d1f0      	bne.n	8002bcc <HAL_RCC_OscConfig+0x1dc>
 8002bea:	e000      	b.n	8002bee <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002bec:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d073      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	2b08      	cmp	r3, #8
 8002bfe:	d005      	beq.n	8002c0c <HAL_RCC_OscConfig+0x21c>
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	2b0c      	cmp	r3, #12
 8002c04:	d10e      	bne.n	8002c24 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	2b03      	cmp	r3, #3
 8002c0a:	d10b      	bne.n	8002c24 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c0c:	4b14      	ldr	r3, [pc, #80]	; (8002c60 <HAL_RCC_OscConfig+0x270>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d063      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x2f0>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d15f      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e2f7      	b.n	8003214 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c2c:	d106      	bne.n	8002c3c <HAL_RCC_OscConfig+0x24c>
 8002c2e:	4b0c      	ldr	r3, [pc, #48]	; (8002c60 <HAL_RCC_OscConfig+0x270>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a0b      	ldr	r2, [pc, #44]	; (8002c60 <HAL_RCC_OscConfig+0x270>)
 8002c34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c38:	6013      	str	r3, [r2, #0]
 8002c3a:	e025      	b.n	8002c88 <HAL_RCC_OscConfig+0x298>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c44:	d114      	bne.n	8002c70 <HAL_RCC_OscConfig+0x280>
 8002c46:	4b06      	ldr	r3, [pc, #24]	; (8002c60 <HAL_RCC_OscConfig+0x270>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a05      	ldr	r2, [pc, #20]	; (8002c60 <HAL_RCC_OscConfig+0x270>)
 8002c4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c50:	6013      	str	r3, [r2, #0]
 8002c52:	4b03      	ldr	r3, [pc, #12]	; (8002c60 <HAL_RCC_OscConfig+0x270>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a02      	ldr	r2, [pc, #8]	; (8002c60 <HAL_RCC_OscConfig+0x270>)
 8002c58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c5c:	6013      	str	r3, [r2, #0]
 8002c5e:	e013      	b.n	8002c88 <HAL_RCC_OscConfig+0x298>
 8002c60:	40021000 	.word	0x40021000
 8002c64:	08004780 	.word	0x08004780
 8002c68:	20000008 	.word	0x20000008
 8002c6c:	20000000 	.word	0x20000000
 8002c70:	4ba0      	ldr	r3, [pc, #640]	; (8002ef4 <HAL_RCC_OscConfig+0x504>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a9f      	ldr	r2, [pc, #636]	; (8002ef4 <HAL_RCC_OscConfig+0x504>)
 8002c76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c7a:	6013      	str	r3, [r2, #0]
 8002c7c:	4b9d      	ldr	r3, [pc, #628]	; (8002ef4 <HAL_RCC_OscConfig+0x504>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a9c      	ldr	r2, [pc, #624]	; (8002ef4 <HAL_RCC_OscConfig+0x504>)
 8002c82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d013      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c90:	f7fd ff3a 	bl	8000b08 <HAL_GetTick>
 8002c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c96:	e008      	b.n	8002caa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c98:	f7fd ff36 	bl	8000b08 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	2b64      	cmp	r3, #100	; 0x64
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e2b4      	b.n	8003214 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002caa:	4b92      	ldr	r3, [pc, #584]	; (8002ef4 <HAL_RCC_OscConfig+0x504>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d0f0      	beq.n	8002c98 <HAL_RCC_OscConfig+0x2a8>
 8002cb6:	e014      	b.n	8002ce2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb8:	f7fd ff26 	bl	8000b08 <HAL_GetTick>
 8002cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cbe:	e008      	b.n	8002cd2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cc0:	f7fd ff22 	bl	8000b08 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b64      	cmp	r3, #100	; 0x64
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e2a0      	b.n	8003214 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cd2:	4b88      	ldr	r3, [pc, #544]	; (8002ef4 <HAL_RCC_OscConfig+0x504>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d1f0      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x2d0>
 8002cde:	e000      	b.n	8002ce2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ce0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d060      	beq.n	8002db0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	2b04      	cmp	r3, #4
 8002cf2:	d005      	beq.n	8002d00 <HAL_RCC_OscConfig+0x310>
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	2b0c      	cmp	r3, #12
 8002cf8:	d119      	bne.n	8002d2e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d116      	bne.n	8002d2e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d00:	4b7c      	ldr	r3, [pc, #496]	; (8002ef4 <HAL_RCC_OscConfig+0x504>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d005      	beq.n	8002d18 <HAL_RCC_OscConfig+0x328>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d101      	bne.n	8002d18 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e27d      	b.n	8003214 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d18:	4b76      	ldr	r3, [pc, #472]	; (8002ef4 <HAL_RCC_OscConfig+0x504>)
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	691b      	ldr	r3, [r3, #16]
 8002d24:	061b      	lsls	r3, r3, #24
 8002d26:	4973      	ldr	r1, [pc, #460]	; (8002ef4 <HAL_RCC_OscConfig+0x504>)
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d2c:	e040      	b.n	8002db0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d023      	beq.n	8002d7e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d36:	4b6f      	ldr	r3, [pc, #444]	; (8002ef4 <HAL_RCC_OscConfig+0x504>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a6e      	ldr	r2, [pc, #440]	; (8002ef4 <HAL_RCC_OscConfig+0x504>)
 8002d3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d42:	f7fd fee1 	bl	8000b08 <HAL_GetTick>
 8002d46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d48:	e008      	b.n	8002d5c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d4a:	f7fd fedd 	bl	8000b08 <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d901      	bls.n	8002d5c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e25b      	b.n	8003214 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d5c:	4b65      	ldr	r3, [pc, #404]	; (8002ef4 <HAL_RCC_OscConfig+0x504>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d0f0      	beq.n	8002d4a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d68:	4b62      	ldr	r3, [pc, #392]	; (8002ef4 <HAL_RCC_OscConfig+0x504>)
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	691b      	ldr	r3, [r3, #16]
 8002d74:	061b      	lsls	r3, r3, #24
 8002d76:	495f      	ldr	r1, [pc, #380]	; (8002ef4 <HAL_RCC_OscConfig+0x504>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	604b      	str	r3, [r1, #4]
 8002d7c:	e018      	b.n	8002db0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d7e:	4b5d      	ldr	r3, [pc, #372]	; (8002ef4 <HAL_RCC_OscConfig+0x504>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a5c      	ldr	r2, [pc, #368]	; (8002ef4 <HAL_RCC_OscConfig+0x504>)
 8002d84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d8a:	f7fd febd 	bl	8000b08 <HAL_GetTick>
 8002d8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d90:	e008      	b.n	8002da4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d92:	f7fd feb9 	bl	8000b08 <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d901      	bls.n	8002da4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e237      	b.n	8003214 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002da4:	4b53      	ldr	r3, [pc, #332]	; (8002ef4 <HAL_RCC_OscConfig+0x504>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d1f0      	bne.n	8002d92 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0308 	and.w	r3, r3, #8
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d03c      	beq.n	8002e36 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	695b      	ldr	r3, [r3, #20]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d01c      	beq.n	8002dfe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dc4:	4b4b      	ldr	r3, [pc, #300]	; (8002ef4 <HAL_RCC_OscConfig+0x504>)
 8002dc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dca:	4a4a      	ldr	r2, [pc, #296]	; (8002ef4 <HAL_RCC_OscConfig+0x504>)
 8002dcc:	f043 0301 	orr.w	r3, r3, #1
 8002dd0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dd4:	f7fd fe98 	bl	8000b08 <HAL_GetTick>
 8002dd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002dda:	e008      	b.n	8002dee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ddc:	f7fd fe94 	bl	8000b08 <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d901      	bls.n	8002dee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e212      	b.n	8003214 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002dee:	4b41      	ldr	r3, [pc, #260]	; (8002ef4 <HAL_RCC_OscConfig+0x504>)
 8002df0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002df4:	f003 0302 	and.w	r3, r3, #2
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d0ef      	beq.n	8002ddc <HAL_RCC_OscConfig+0x3ec>
 8002dfc:	e01b      	b.n	8002e36 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dfe:	4b3d      	ldr	r3, [pc, #244]	; (8002ef4 <HAL_RCC_OscConfig+0x504>)
 8002e00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e04:	4a3b      	ldr	r2, [pc, #236]	; (8002ef4 <HAL_RCC_OscConfig+0x504>)
 8002e06:	f023 0301 	bic.w	r3, r3, #1
 8002e0a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e0e:	f7fd fe7b 	bl	8000b08 <HAL_GetTick>
 8002e12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e14:	e008      	b.n	8002e28 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e16:	f7fd fe77 	bl	8000b08 <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d901      	bls.n	8002e28 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	e1f5      	b.n	8003214 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e28:	4b32      	ldr	r3, [pc, #200]	; (8002ef4 <HAL_RCC_OscConfig+0x504>)
 8002e2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e2e:	f003 0302 	and.w	r3, r3, #2
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d1ef      	bne.n	8002e16 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0304 	and.w	r3, r3, #4
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	f000 80a6 	beq.w	8002f90 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e44:	2300      	movs	r3, #0
 8002e46:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002e48:	4b2a      	ldr	r3, [pc, #168]	; (8002ef4 <HAL_RCC_OscConfig+0x504>)
 8002e4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d10d      	bne.n	8002e70 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e54:	4b27      	ldr	r3, [pc, #156]	; (8002ef4 <HAL_RCC_OscConfig+0x504>)
 8002e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e58:	4a26      	ldr	r2, [pc, #152]	; (8002ef4 <HAL_RCC_OscConfig+0x504>)
 8002e5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e5e:	6593      	str	r3, [r2, #88]	; 0x58
 8002e60:	4b24      	ldr	r3, [pc, #144]	; (8002ef4 <HAL_RCC_OscConfig+0x504>)
 8002e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e68:	60bb      	str	r3, [r7, #8]
 8002e6a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e70:	4b21      	ldr	r3, [pc, #132]	; (8002ef8 <HAL_RCC_OscConfig+0x508>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d118      	bne.n	8002eae <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e7c:	4b1e      	ldr	r3, [pc, #120]	; (8002ef8 <HAL_RCC_OscConfig+0x508>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a1d      	ldr	r2, [pc, #116]	; (8002ef8 <HAL_RCC_OscConfig+0x508>)
 8002e82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e86:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e88:	f7fd fe3e 	bl	8000b08 <HAL_GetTick>
 8002e8c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e8e:	e008      	b.n	8002ea2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e90:	f7fd fe3a 	bl	8000b08 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e1b8      	b.n	8003214 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ea2:	4b15      	ldr	r3, [pc, #84]	; (8002ef8 <HAL_RCC_OscConfig+0x508>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d0f0      	beq.n	8002e90 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d108      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x4d8>
 8002eb6:	4b0f      	ldr	r3, [pc, #60]	; (8002ef4 <HAL_RCC_OscConfig+0x504>)
 8002eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ebc:	4a0d      	ldr	r2, [pc, #52]	; (8002ef4 <HAL_RCC_OscConfig+0x504>)
 8002ebe:	f043 0301 	orr.w	r3, r3, #1
 8002ec2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ec6:	e029      	b.n	8002f1c <HAL_RCC_OscConfig+0x52c>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	2b05      	cmp	r3, #5
 8002ece:	d115      	bne.n	8002efc <HAL_RCC_OscConfig+0x50c>
 8002ed0:	4b08      	ldr	r3, [pc, #32]	; (8002ef4 <HAL_RCC_OscConfig+0x504>)
 8002ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ed6:	4a07      	ldr	r2, [pc, #28]	; (8002ef4 <HAL_RCC_OscConfig+0x504>)
 8002ed8:	f043 0304 	orr.w	r3, r3, #4
 8002edc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ee0:	4b04      	ldr	r3, [pc, #16]	; (8002ef4 <HAL_RCC_OscConfig+0x504>)
 8002ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee6:	4a03      	ldr	r2, [pc, #12]	; (8002ef4 <HAL_RCC_OscConfig+0x504>)
 8002ee8:	f043 0301 	orr.w	r3, r3, #1
 8002eec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ef0:	e014      	b.n	8002f1c <HAL_RCC_OscConfig+0x52c>
 8002ef2:	bf00      	nop
 8002ef4:	40021000 	.word	0x40021000
 8002ef8:	40007000 	.word	0x40007000
 8002efc:	4b9d      	ldr	r3, [pc, #628]	; (8003174 <HAL_RCC_OscConfig+0x784>)
 8002efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f02:	4a9c      	ldr	r2, [pc, #624]	; (8003174 <HAL_RCC_OscConfig+0x784>)
 8002f04:	f023 0301 	bic.w	r3, r3, #1
 8002f08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f0c:	4b99      	ldr	r3, [pc, #612]	; (8003174 <HAL_RCC_OscConfig+0x784>)
 8002f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f12:	4a98      	ldr	r2, [pc, #608]	; (8003174 <HAL_RCC_OscConfig+0x784>)
 8002f14:	f023 0304 	bic.w	r3, r3, #4
 8002f18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d016      	beq.n	8002f52 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f24:	f7fd fdf0 	bl	8000b08 <HAL_GetTick>
 8002f28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f2a:	e00a      	b.n	8002f42 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f2c:	f7fd fdec 	bl	8000b08 <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e168      	b.n	8003214 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f42:	4b8c      	ldr	r3, [pc, #560]	; (8003174 <HAL_RCC_OscConfig+0x784>)
 8002f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f48:	f003 0302 	and.w	r3, r3, #2
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d0ed      	beq.n	8002f2c <HAL_RCC_OscConfig+0x53c>
 8002f50:	e015      	b.n	8002f7e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f52:	f7fd fdd9 	bl	8000b08 <HAL_GetTick>
 8002f56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f58:	e00a      	b.n	8002f70 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f5a:	f7fd fdd5 	bl	8000b08 <HAL_GetTick>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d901      	bls.n	8002f70 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e151      	b.n	8003214 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f70:	4b80      	ldr	r3, [pc, #512]	; (8003174 <HAL_RCC_OscConfig+0x784>)
 8002f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f76:	f003 0302 	and.w	r3, r3, #2
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d1ed      	bne.n	8002f5a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f7e:	7ffb      	ldrb	r3, [r7, #31]
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d105      	bne.n	8002f90 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f84:	4b7b      	ldr	r3, [pc, #492]	; (8003174 <HAL_RCC_OscConfig+0x784>)
 8002f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f88:	4a7a      	ldr	r2, [pc, #488]	; (8003174 <HAL_RCC_OscConfig+0x784>)
 8002f8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f8e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0320 	and.w	r3, r3, #32
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d03c      	beq.n	8003016 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d01c      	beq.n	8002fde <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002fa4:	4b73      	ldr	r3, [pc, #460]	; (8003174 <HAL_RCC_OscConfig+0x784>)
 8002fa6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002faa:	4a72      	ldr	r2, [pc, #456]	; (8003174 <HAL_RCC_OscConfig+0x784>)
 8002fac:	f043 0301 	orr.w	r3, r3, #1
 8002fb0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fb4:	f7fd fda8 	bl	8000b08 <HAL_GetTick>
 8002fb8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002fba:	e008      	b.n	8002fce <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fbc:	f7fd fda4 	bl	8000b08 <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d901      	bls.n	8002fce <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e122      	b.n	8003214 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002fce:	4b69      	ldr	r3, [pc, #420]	; (8003174 <HAL_RCC_OscConfig+0x784>)
 8002fd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fd4:	f003 0302 	and.w	r3, r3, #2
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d0ef      	beq.n	8002fbc <HAL_RCC_OscConfig+0x5cc>
 8002fdc:	e01b      	b.n	8003016 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002fde:	4b65      	ldr	r3, [pc, #404]	; (8003174 <HAL_RCC_OscConfig+0x784>)
 8002fe0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fe4:	4a63      	ldr	r2, [pc, #396]	; (8003174 <HAL_RCC_OscConfig+0x784>)
 8002fe6:	f023 0301 	bic.w	r3, r3, #1
 8002fea:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fee:	f7fd fd8b 	bl	8000b08 <HAL_GetTick>
 8002ff2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ff4:	e008      	b.n	8003008 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ff6:	f7fd fd87 	bl	8000b08 <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	2b02      	cmp	r3, #2
 8003002:	d901      	bls.n	8003008 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e105      	b.n	8003214 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003008:	4b5a      	ldr	r3, [pc, #360]	; (8003174 <HAL_RCC_OscConfig+0x784>)
 800300a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800300e:	f003 0302 	and.w	r3, r3, #2
 8003012:	2b00      	cmp	r3, #0
 8003014:	d1ef      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800301a:	2b00      	cmp	r3, #0
 800301c:	f000 80f9 	beq.w	8003212 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003024:	2b02      	cmp	r3, #2
 8003026:	f040 80cf 	bne.w	80031c8 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800302a:	4b52      	ldr	r3, [pc, #328]	; (8003174 <HAL_RCC_OscConfig+0x784>)
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	f003 0203 	and.w	r2, r3, #3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800303a:	429a      	cmp	r2, r3
 800303c:	d12c      	bne.n	8003098 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003048:	3b01      	subs	r3, #1
 800304a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800304c:	429a      	cmp	r2, r3
 800304e:	d123      	bne.n	8003098 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800305a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800305c:	429a      	cmp	r2, r3
 800305e:	d11b      	bne.n	8003098 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800306a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800306c:	429a      	cmp	r2, r3
 800306e:	d113      	bne.n	8003098 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800307a:	085b      	lsrs	r3, r3, #1
 800307c:	3b01      	subs	r3, #1
 800307e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003080:	429a      	cmp	r2, r3
 8003082:	d109      	bne.n	8003098 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308e:	085b      	lsrs	r3, r3, #1
 8003090:	3b01      	subs	r3, #1
 8003092:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003094:	429a      	cmp	r2, r3
 8003096:	d071      	beq.n	800317c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	2b0c      	cmp	r3, #12
 800309c:	d068      	beq.n	8003170 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800309e:	4b35      	ldr	r3, [pc, #212]	; (8003174 <HAL_RCC_OscConfig+0x784>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d105      	bne.n	80030b6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80030aa:	4b32      	ldr	r3, [pc, #200]	; (8003174 <HAL_RCC_OscConfig+0x784>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d001      	beq.n	80030ba <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e0ac      	b.n	8003214 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80030ba:	4b2e      	ldr	r3, [pc, #184]	; (8003174 <HAL_RCC_OscConfig+0x784>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a2d      	ldr	r2, [pc, #180]	; (8003174 <HAL_RCC_OscConfig+0x784>)
 80030c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030c4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80030c6:	f7fd fd1f 	bl	8000b08 <HAL_GetTick>
 80030ca:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030cc:	e008      	b.n	80030e0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030ce:	f7fd fd1b 	bl	8000b08 <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d901      	bls.n	80030e0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e099      	b.n	8003214 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030e0:	4b24      	ldr	r3, [pc, #144]	; (8003174 <HAL_RCC_OscConfig+0x784>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d1f0      	bne.n	80030ce <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030ec:	4b21      	ldr	r3, [pc, #132]	; (8003174 <HAL_RCC_OscConfig+0x784>)
 80030ee:	68da      	ldr	r2, [r3, #12]
 80030f0:	4b21      	ldr	r3, [pc, #132]	; (8003178 <HAL_RCC_OscConfig+0x788>)
 80030f2:	4013      	ands	r3, r2
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80030fc:	3a01      	subs	r2, #1
 80030fe:	0112      	lsls	r2, r2, #4
 8003100:	4311      	orrs	r1, r2
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003106:	0212      	lsls	r2, r2, #8
 8003108:	4311      	orrs	r1, r2
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800310e:	0852      	lsrs	r2, r2, #1
 8003110:	3a01      	subs	r2, #1
 8003112:	0552      	lsls	r2, r2, #21
 8003114:	4311      	orrs	r1, r2
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800311a:	0852      	lsrs	r2, r2, #1
 800311c:	3a01      	subs	r2, #1
 800311e:	0652      	lsls	r2, r2, #25
 8003120:	4311      	orrs	r1, r2
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003126:	06d2      	lsls	r2, r2, #27
 8003128:	430a      	orrs	r2, r1
 800312a:	4912      	ldr	r1, [pc, #72]	; (8003174 <HAL_RCC_OscConfig+0x784>)
 800312c:	4313      	orrs	r3, r2
 800312e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003130:	4b10      	ldr	r3, [pc, #64]	; (8003174 <HAL_RCC_OscConfig+0x784>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a0f      	ldr	r2, [pc, #60]	; (8003174 <HAL_RCC_OscConfig+0x784>)
 8003136:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800313a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800313c:	4b0d      	ldr	r3, [pc, #52]	; (8003174 <HAL_RCC_OscConfig+0x784>)
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	4a0c      	ldr	r2, [pc, #48]	; (8003174 <HAL_RCC_OscConfig+0x784>)
 8003142:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003146:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003148:	f7fd fcde 	bl	8000b08 <HAL_GetTick>
 800314c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800314e:	e008      	b.n	8003162 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003150:	f7fd fcda 	bl	8000b08 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	2b02      	cmp	r3, #2
 800315c:	d901      	bls.n	8003162 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e058      	b.n	8003214 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003162:	4b04      	ldr	r3, [pc, #16]	; (8003174 <HAL_RCC_OscConfig+0x784>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d0f0      	beq.n	8003150 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800316e:	e050      	b.n	8003212 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e04f      	b.n	8003214 <HAL_RCC_OscConfig+0x824>
 8003174:	40021000 	.word	0x40021000
 8003178:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800317c:	4b27      	ldr	r3, [pc, #156]	; (800321c <HAL_RCC_OscConfig+0x82c>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d144      	bne.n	8003212 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003188:	4b24      	ldr	r3, [pc, #144]	; (800321c <HAL_RCC_OscConfig+0x82c>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a23      	ldr	r2, [pc, #140]	; (800321c <HAL_RCC_OscConfig+0x82c>)
 800318e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003192:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003194:	4b21      	ldr	r3, [pc, #132]	; (800321c <HAL_RCC_OscConfig+0x82c>)
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	4a20      	ldr	r2, [pc, #128]	; (800321c <HAL_RCC_OscConfig+0x82c>)
 800319a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800319e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80031a0:	f7fd fcb2 	bl	8000b08 <HAL_GetTick>
 80031a4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031a6:	e008      	b.n	80031ba <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031a8:	f7fd fcae 	bl	8000b08 <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d901      	bls.n	80031ba <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e02c      	b.n	8003214 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031ba:	4b18      	ldr	r3, [pc, #96]	; (800321c <HAL_RCC_OscConfig+0x82c>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d0f0      	beq.n	80031a8 <HAL_RCC_OscConfig+0x7b8>
 80031c6:	e024      	b.n	8003212 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	2b0c      	cmp	r3, #12
 80031cc:	d01f      	beq.n	800320e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031ce:	4b13      	ldr	r3, [pc, #76]	; (800321c <HAL_RCC_OscConfig+0x82c>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a12      	ldr	r2, [pc, #72]	; (800321c <HAL_RCC_OscConfig+0x82c>)
 80031d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031da:	f7fd fc95 	bl	8000b08 <HAL_GetTick>
 80031de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031e0:	e008      	b.n	80031f4 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031e2:	f7fd fc91 	bl	8000b08 <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d901      	bls.n	80031f4 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	e00f      	b.n	8003214 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031f4:	4b09      	ldr	r3, [pc, #36]	; (800321c <HAL_RCC_OscConfig+0x82c>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d1f0      	bne.n	80031e2 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003200:	4b06      	ldr	r3, [pc, #24]	; (800321c <HAL_RCC_OscConfig+0x82c>)
 8003202:	68da      	ldr	r2, [r3, #12]
 8003204:	4905      	ldr	r1, [pc, #20]	; (800321c <HAL_RCC_OscConfig+0x82c>)
 8003206:	4b06      	ldr	r3, [pc, #24]	; (8003220 <HAL_RCC_OscConfig+0x830>)
 8003208:	4013      	ands	r3, r2
 800320a:	60cb      	str	r3, [r1, #12]
 800320c:	e001      	b.n	8003212 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e000      	b.n	8003214 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8003212:	2300      	movs	r3, #0
}
 8003214:	4618      	mov	r0, r3
 8003216:	3720      	adds	r7, #32
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	40021000 	.word	0x40021000
 8003220:	feeefffc 	.word	0xfeeefffc

08003224 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b086      	sub	sp, #24
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800322e:	2300      	movs	r3, #0
 8003230:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d101      	bne.n	800323c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e11d      	b.n	8003478 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800323c:	4b90      	ldr	r3, [pc, #576]	; (8003480 <HAL_RCC_ClockConfig+0x25c>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 030f 	and.w	r3, r3, #15
 8003244:	683a      	ldr	r2, [r7, #0]
 8003246:	429a      	cmp	r2, r3
 8003248:	d910      	bls.n	800326c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800324a:	4b8d      	ldr	r3, [pc, #564]	; (8003480 <HAL_RCC_ClockConfig+0x25c>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f023 020f 	bic.w	r2, r3, #15
 8003252:	498b      	ldr	r1, [pc, #556]	; (8003480 <HAL_RCC_ClockConfig+0x25c>)
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	4313      	orrs	r3, r2
 8003258:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800325a:	4b89      	ldr	r3, [pc, #548]	; (8003480 <HAL_RCC_ClockConfig+0x25c>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 030f 	and.w	r3, r3, #15
 8003262:	683a      	ldr	r2, [r7, #0]
 8003264:	429a      	cmp	r2, r3
 8003266:	d001      	beq.n	800326c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e105      	b.n	8003478 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0302 	and.w	r3, r3, #2
 8003274:	2b00      	cmp	r3, #0
 8003276:	d010      	beq.n	800329a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	689a      	ldr	r2, [r3, #8]
 800327c:	4b81      	ldr	r3, [pc, #516]	; (8003484 <HAL_RCC_ClockConfig+0x260>)
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003284:	429a      	cmp	r2, r3
 8003286:	d908      	bls.n	800329a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003288:	4b7e      	ldr	r3, [pc, #504]	; (8003484 <HAL_RCC_ClockConfig+0x260>)
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	497b      	ldr	r1, [pc, #492]	; (8003484 <HAL_RCC_ClockConfig+0x260>)
 8003296:	4313      	orrs	r3, r2
 8003298:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0301 	and.w	r3, r3, #1
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d079      	beq.n	800339a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	2b03      	cmp	r3, #3
 80032ac:	d11e      	bne.n	80032ec <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032ae:	4b75      	ldr	r3, [pc, #468]	; (8003484 <HAL_RCC_ClockConfig+0x260>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d101      	bne.n	80032be <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e0dc      	b.n	8003478 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80032be:	f000 f9d1 	bl	8003664 <RCC_GetSysClockFreqFromPLLSource>
 80032c2:	4603      	mov	r3, r0
 80032c4:	4a70      	ldr	r2, [pc, #448]	; (8003488 <HAL_RCC_ClockConfig+0x264>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d946      	bls.n	8003358 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80032ca:	4b6e      	ldr	r3, [pc, #440]	; (8003484 <HAL_RCC_ClockConfig+0x260>)
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d140      	bne.n	8003358 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80032d6:	4b6b      	ldr	r3, [pc, #428]	; (8003484 <HAL_RCC_ClockConfig+0x260>)
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032de:	4a69      	ldr	r2, [pc, #420]	; (8003484 <HAL_RCC_ClockConfig+0x260>)
 80032e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032e4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80032e6:	2380      	movs	r3, #128	; 0x80
 80032e8:	617b      	str	r3, [r7, #20]
 80032ea:	e035      	b.n	8003358 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d107      	bne.n	8003304 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032f4:	4b63      	ldr	r3, [pc, #396]	; (8003484 <HAL_RCC_ClockConfig+0x260>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d115      	bne.n	800332c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e0b9      	b.n	8003478 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d107      	bne.n	800331c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800330c:	4b5d      	ldr	r3, [pc, #372]	; (8003484 <HAL_RCC_ClockConfig+0x260>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0302 	and.w	r3, r3, #2
 8003314:	2b00      	cmp	r3, #0
 8003316:	d109      	bne.n	800332c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e0ad      	b.n	8003478 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800331c:	4b59      	ldr	r3, [pc, #356]	; (8003484 <HAL_RCC_ClockConfig+0x260>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003324:	2b00      	cmp	r3, #0
 8003326:	d101      	bne.n	800332c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e0a5      	b.n	8003478 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800332c:	f000 f8b4 	bl	8003498 <HAL_RCC_GetSysClockFreq>
 8003330:	4603      	mov	r3, r0
 8003332:	4a55      	ldr	r2, [pc, #340]	; (8003488 <HAL_RCC_ClockConfig+0x264>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d90f      	bls.n	8003358 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003338:	4b52      	ldr	r3, [pc, #328]	; (8003484 <HAL_RCC_ClockConfig+0x260>)
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d109      	bne.n	8003358 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003344:	4b4f      	ldr	r3, [pc, #316]	; (8003484 <HAL_RCC_ClockConfig+0x260>)
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800334c:	4a4d      	ldr	r2, [pc, #308]	; (8003484 <HAL_RCC_ClockConfig+0x260>)
 800334e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003352:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003354:	2380      	movs	r3, #128	; 0x80
 8003356:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003358:	4b4a      	ldr	r3, [pc, #296]	; (8003484 <HAL_RCC_ClockConfig+0x260>)
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	f023 0203 	bic.w	r2, r3, #3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	4947      	ldr	r1, [pc, #284]	; (8003484 <HAL_RCC_ClockConfig+0x260>)
 8003366:	4313      	orrs	r3, r2
 8003368:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800336a:	f7fd fbcd 	bl	8000b08 <HAL_GetTick>
 800336e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003370:	e00a      	b.n	8003388 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003372:	f7fd fbc9 	bl	8000b08 <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003380:	4293      	cmp	r3, r2
 8003382:	d901      	bls.n	8003388 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e077      	b.n	8003478 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003388:	4b3e      	ldr	r3, [pc, #248]	; (8003484 <HAL_RCC_ClockConfig+0x260>)
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f003 020c 	and.w	r2, r3, #12
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	429a      	cmp	r2, r3
 8003398:	d1eb      	bne.n	8003372 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	2b80      	cmp	r3, #128	; 0x80
 800339e:	d105      	bne.n	80033ac <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80033a0:	4b38      	ldr	r3, [pc, #224]	; (8003484 <HAL_RCC_ClockConfig+0x260>)
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	4a37      	ldr	r2, [pc, #220]	; (8003484 <HAL_RCC_ClockConfig+0x260>)
 80033a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033aa:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0302 	and.w	r3, r3, #2
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d010      	beq.n	80033da <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	689a      	ldr	r2, [r3, #8]
 80033bc:	4b31      	ldr	r3, [pc, #196]	; (8003484 <HAL_RCC_ClockConfig+0x260>)
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d208      	bcs.n	80033da <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033c8:	4b2e      	ldr	r3, [pc, #184]	; (8003484 <HAL_RCC_ClockConfig+0x260>)
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	492b      	ldr	r1, [pc, #172]	; (8003484 <HAL_RCC_ClockConfig+0x260>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033da:	4b29      	ldr	r3, [pc, #164]	; (8003480 <HAL_RCC_ClockConfig+0x25c>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 030f 	and.w	r3, r3, #15
 80033e2:	683a      	ldr	r2, [r7, #0]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d210      	bcs.n	800340a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033e8:	4b25      	ldr	r3, [pc, #148]	; (8003480 <HAL_RCC_ClockConfig+0x25c>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f023 020f 	bic.w	r2, r3, #15
 80033f0:	4923      	ldr	r1, [pc, #140]	; (8003480 <HAL_RCC_ClockConfig+0x25c>)
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033f8:	4b21      	ldr	r3, [pc, #132]	; (8003480 <HAL_RCC_ClockConfig+0x25c>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 030f 	and.w	r3, r3, #15
 8003400:	683a      	ldr	r2, [r7, #0]
 8003402:	429a      	cmp	r2, r3
 8003404:	d001      	beq.n	800340a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e036      	b.n	8003478 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0304 	and.w	r3, r3, #4
 8003412:	2b00      	cmp	r3, #0
 8003414:	d008      	beq.n	8003428 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003416:	4b1b      	ldr	r3, [pc, #108]	; (8003484 <HAL_RCC_ClockConfig+0x260>)
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	4918      	ldr	r1, [pc, #96]	; (8003484 <HAL_RCC_ClockConfig+0x260>)
 8003424:	4313      	orrs	r3, r2
 8003426:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0308 	and.w	r3, r3, #8
 8003430:	2b00      	cmp	r3, #0
 8003432:	d009      	beq.n	8003448 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003434:	4b13      	ldr	r3, [pc, #76]	; (8003484 <HAL_RCC_ClockConfig+0x260>)
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	691b      	ldr	r3, [r3, #16]
 8003440:	00db      	lsls	r3, r3, #3
 8003442:	4910      	ldr	r1, [pc, #64]	; (8003484 <HAL_RCC_ClockConfig+0x260>)
 8003444:	4313      	orrs	r3, r2
 8003446:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003448:	f000 f826 	bl	8003498 <HAL_RCC_GetSysClockFreq>
 800344c:	4602      	mov	r2, r0
 800344e:	4b0d      	ldr	r3, [pc, #52]	; (8003484 <HAL_RCC_ClockConfig+0x260>)
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	091b      	lsrs	r3, r3, #4
 8003454:	f003 030f 	and.w	r3, r3, #15
 8003458:	490c      	ldr	r1, [pc, #48]	; (800348c <HAL_RCC_ClockConfig+0x268>)
 800345a:	5ccb      	ldrb	r3, [r1, r3]
 800345c:	f003 031f 	and.w	r3, r3, #31
 8003460:	fa22 f303 	lsr.w	r3, r2, r3
 8003464:	4a0a      	ldr	r2, [pc, #40]	; (8003490 <HAL_RCC_ClockConfig+0x26c>)
 8003466:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003468:	4b0a      	ldr	r3, [pc, #40]	; (8003494 <HAL_RCC_ClockConfig+0x270>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4618      	mov	r0, r3
 800346e:	f7fd fafb 	bl	8000a68 <HAL_InitTick>
 8003472:	4603      	mov	r3, r0
 8003474:	73fb      	strb	r3, [r7, #15]

  return status;
 8003476:	7bfb      	ldrb	r3, [r7, #15]
}
 8003478:	4618      	mov	r0, r3
 800347a:	3718      	adds	r7, #24
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}
 8003480:	40022000 	.word	0x40022000
 8003484:	40021000 	.word	0x40021000
 8003488:	04c4b400 	.word	0x04c4b400
 800348c:	08004780 	.word	0x08004780
 8003490:	20000008 	.word	0x20000008
 8003494:	20000000 	.word	0x20000000

08003498 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003498:	b480      	push	{r7}
 800349a:	b089      	sub	sp, #36	; 0x24
 800349c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800349e:	2300      	movs	r3, #0
 80034a0:	61fb      	str	r3, [r7, #28]
 80034a2:	2300      	movs	r3, #0
 80034a4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034a6:	4b3e      	ldr	r3, [pc, #248]	; (80035a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	f003 030c 	and.w	r3, r3, #12
 80034ae:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034b0:	4b3b      	ldr	r3, [pc, #236]	; (80035a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	f003 0303 	and.w	r3, r3, #3
 80034b8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d005      	beq.n	80034cc <HAL_RCC_GetSysClockFreq+0x34>
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	2b0c      	cmp	r3, #12
 80034c4:	d121      	bne.n	800350a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d11e      	bne.n	800350a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80034cc:	4b34      	ldr	r3, [pc, #208]	; (80035a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0308 	and.w	r3, r3, #8
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d107      	bne.n	80034e8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80034d8:	4b31      	ldr	r3, [pc, #196]	; (80035a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80034da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034de:	0a1b      	lsrs	r3, r3, #8
 80034e0:	f003 030f 	and.w	r3, r3, #15
 80034e4:	61fb      	str	r3, [r7, #28]
 80034e6:	e005      	b.n	80034f4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80034e8:	4b2d      	ldr	r3, [pc, #180]	; (80035a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	091b      	lsrs	r3, r3, #4
 80034ee:	f003 030f 	and.w	r3, r3, #15
 80034f2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80034f4:	4a2b      	ldr	r2, [pc, #172]	; (80035a4 <HAL_RCC_GetSysClockFreq+0x10c>)
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034fc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d10d      	bne.n	8003520 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003508:	e00a      	b.n	8003520 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	2b04      	cmp	r3, #4
 800350e:	d102      	bne.n	8003516 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003510:	4b25      	ldr	r3, [pc, #148]	; (80035a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003512:	61bb      	str	r3, [r7, #24]
 8003514:	e004      	b.n	8003520 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	2b08      	cmp	r3, #8
 800351a:	d101      	bne.n	8003520 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800351c:	4b23      	ldr	r3, [pc, #140]	; (80035ac <HAL_RCC_GetSysClockFreq+0x114>)
 800351e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	2b0c      	cmp	r3, #12
 8003524:	d134      	bne.n	8003590 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003526:	4b1e      	ldr	r3, [pc, #120]	; (80035a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	f003 0303 	and.w	r3, r3, #3
 800352e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	2b02      	cmp	r3, #2
 8003534:	d003      	beq.n	800353e <HAL_RCC_GetSysClockFreq+0xa6>
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	2b03      	cmp	r3, #3
 800353a:	d003      	beq.n	8003544 <HAL_RCC_GetSysClockFreq+0xac>
 800353c:	e005      	b.n	800354a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800353e:	4b1a      	ldr	r3, [pc, #104]	; (80035a8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003540:	617b      	str	r3, [r7, #20]
      break;
 8003542:	e005      	b.n	8003550 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003544:	4b19      	ldr	r3, [pc, #100]	; (80035ac <HAL_RCC_GetSysClockFreq+0x114>)
 8003546:	617b      	str	r3, [r7, #20]
      break;
 8003548:	e002      	b.n	8003550 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	617b      	str	r3, [r7, #20]
      break;
 800354e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003550:	4b13      	ldr	r3, [pc, #76]	; (80035a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	091b      	lsrs	r3, r3, #4
 8003556:	f003 030f 	and.w	r3, r3, #15
 800355a:	3301      	adds	r3, #1
 800355c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800355e:	4b10      	ldr	r3, [pc, #64]	; (80035a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	0a1b      	lsrs	r3, r3, #8
 8003564:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003568:	697a      	ldr	r2, [r7, #20]
 800356a:	fb03 f202 	mul.w	r2, r3, r2
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	fbb2 f3f3 	udiv	r3, r2, r3
 8003574:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003576:	4b0a      	ldr	r3, [pc, #40]	; (80035a0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	0e5b      	lsrs	r3, r3, #25
 800357c:	f003 0303 	and.w	r3, r3, #3
 8003580:	3301      	adds	r3, #1
 8003582:	005b      	lsls	r3, r3, #1
 8003584:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003586:	697a      	ldr	r2, [r7, #20]
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	fbb2 f3f3 	udiv	r3, r2, r3
 800358e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003590:	69bb      	ldr	r3, [r7, #24]
}
 8003592:	4618      	mov	r0, r3
 8003594:	3724      	adds	r7, #36	; 0x24
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr
 800359e:	bf00      	nop
 80035a0:	40021000 	.word	0x40021000
 80035a4:	08004790 	.word	0x08004790
 80035a8:	00f42400 	.word	0x00f42400
 80035ac:	007a1200 	.word	0x007a1200

080035b0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b086      	sub	sp, #24
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80035b8:	2300      	movs	r3, #0
 80035ba:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80035bc:	4b27      	ldr	r3, [pc, #156]	; (800365c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80035be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d003      	beq.n	80035d0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80035c8:	f7ff f94e 	bl	8002868 <HAL_PWREx_GetVoltageRange>
 80035cc:	6178      	str	r0, [r7, #20]
 80035ce:	e014      	b.n	80035fa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80035d0:	4b22      	ldr	r3, [pc, #136]	; (800365c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80035d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d4:	4a21      	ldr	r2, [pc, #132]	; (800365c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80035d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035da:	6593      	str	r3, [r2, #88]	; 0x58
 80035dc:	4b1f      	ldr	r3, [pc, #124]	; (800365c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80035de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035e4:	60fb      	str	r3, [r7, #12]
 80035e6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80035e8:	f7ff f93e 	bl	8002868 <HAL_PWREx_GetVoltageRange>
 80035ec:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80035ee:	4b1b      	ldr	r3, [pc, #108]	; (800365c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80035f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035f2:	4a1a      	ldr	r2, [pc, #104]	; (800365c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80035f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035f8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003600:	d10b      	bne.n	800361a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2b80      	cmp	r3, #128	; 0x80
 8003606:	d913      	bls.n	8003630 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2ba0      	cmp	r3, #160	; 0xa0
 800360c:	d902      	bls.n	8003614 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800360e:	2302      	movs	r3, #2
 8003610:	613b      	str	r3, [r7, #16]
 8003612:	e00d      	b.n	8003630 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003614:	2301      	movs	r3, #1
 8003616:	613b      	str	r3, [r7, #16]
 8003618:	e00a      	b.n	8003630 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2b7f      	cmp	r3, #127	; 0x7f
 800361e:	d902      	bls.n	8003626 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003620:	2302      	movs	r3, #2
 8003622:	613b      	str	r3, [r7, #16]
 8003624:	e004      	b.n	8003630 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2b70      	cmp	r3, #112	; 0x70
 800362a:	d101      	bne.n	8003630 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800362c:	2301      	movs	r3, #1
 800362e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003630:	4b0b      	ldr	r3, [pc, #44]	; (8003660 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f023 020f 	bic.w	r2, r3, #15
 8003638:	4909      	ldr	r1, [pc, #36]	; (8003660 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	4313      	orrs	r3, r2
 800363e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003640:	4b07      	ldr	r3, [pc, #28]	; (8003660 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 030f 	and.w	r3, r3, #15
 8003648:	693a      	ldr	r2, [r7, #16]
 800364a:	429a      	cmp	r2, r3
 800364c:	d001      	beq.n	8003652 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e000      	b.n	8003654 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003652:	2300      	movs	r3, #0
}
 8003654:	4618      	mov	r0, r3
 8003656:	3718      	adds	r7, #24
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}
 800365c:	40021000 	.word	0x40021000
 8003660:	40022000 	.word	0x40022000

08003664 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003664:	b480      	push	{r7}
 8003666:	b087      	sub	sp, #28
 8003668:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800366a:	4b2d      	ldr	r3, [pc, #180]	; (8003720 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	f003 0303 	and.w	r3, r3, #3
 8003672:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2b03      	cmp	r3, #3
 8003678:	d00b      	beq.n	8003692 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2b03      	cmp	r3, #3
 800367e:	d825      	bhi.n	80036cc <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2b01      	cmp	r3, #1
 8003684:	d008      	beq.n	8003698 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2b02      	cmp	r3, #2
 800368a:	d11f      	bne.n	80036cc <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800368c:	4b25      	ldr	r3, [pc, #148]	; (8003724 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800368e:	613b      	str	r3, [r7, #16]
    break;
 8003690:	e01f      	b.n	80036d2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003692:	4b25      	ldr	r3, [pc, #148]	; (8003728 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003694:	613b      	str	r3, [r7, #16]
    break;
 8003696:	e01c      	b.n	80036d2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003698:	4b21      	ldr	r3, [pc, #132]	; (8003720 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0308 	and.w	r3, r3, #8
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d107      	bne.n	80036b4 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80036a4:	4b1e      	ldr	r3, [pc, #120]	; (8003720 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80036a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036aa:	0a1b      	lsrs	r3, r3, #8
 80036ac:	f003 030f 	and.w	r3, r3, #15
 80036b0:	617b      	str	r3, [r7, #20]
 80036b2:	e005      	b.n	80036c0 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80036b4:	4b1a      	ldr	r3, [pc, #104]	; (8003720 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	091b      	lsrs	r3, r3, #4
 80036ba:	f003 030f 	and.w	r3, r3, #15
 80036be:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80036c0:	4a1a      	ldr	r2, [pc, #104]	; (800372c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036c8:	613b      	str	r3, [r7, #16]
    break;
 80036ca:	e002      	b.n	80036d2 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80036cc:	2300      	movs	r3, #0
 80036ce:	613b      	str	r3, [r7, #16]
    break;
 80036d0:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80036d2:	4b13      	ldr	r3, [pc, #76]	; (8003720 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	091b      	lsrs	r3, r3, #4
 80036d8:	f003 030f 	and.w	r3, r3, #15
 80036dc:	3301      	adds	r3, #1
 80036de:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80036e0:	4b0f      	ldr	r3, [pc, #60]	; (8003720 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	0a1b      	lsrs	r3, r3, #8
 80036e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036ea:	693a      	ldr	r2, [r7, #16]
 80036ec:	fb03 f202 	mul.w	r2, r3, r2
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036f6:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80036f8:	4b09      	ldr	r3, [pc, #36]	; (8003720 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	0e5b      	lsrs	r3, r3, #25
 80036fe:	f003 0303 	and.w	r3, r3, #3
 8003702:	3301      	adds	r3, #1
 8003704:	005b      	lsls	r3, r3, #1
 8003706:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003708:	693a      	ldr	r2, [r7, #16]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003710:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003712:	683b      	ldr	r3, [r7, #0]
}
 8003714:	4618      	mov	r0, r3
 8003716:	371c      	adds	r7, #28
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr
 8003720:	40021000 	.word	0x40021000
 8003724:	00f42400 	.word	0x00f42400
 8003728:	007a1200 	.word	0x007a1200
 800372c:	08004790 	.word	0x08004790

08003730 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b086      	sub	sp, #24
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003738:	2300      	movs	r3, #0
 800373a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800373c:	2300      	movs	r3, #0
 800373e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003748:	2b00      	cmp	r3, #0
 800374a:	d040      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003750:	2b80      	cmp	r3, #128	; 0x80
 8003752:	d02a      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003754:	2b80      	cmp	r3, #128	; 0x80
 8003756:	d825      	bhi.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003758:	2b60      	cmp	r3, #96	; 0x60
 800375a:	d026      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800375c:	2b60      	cmp	r3, #96	; 0x60
 800375e:	d821      	bhi.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003760:	2b40      	cmp	r3, #64	; 0x40
 8003762:	d006      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003764:	2b40      	cmp	r3, #64	; 0x40
 8003766:	d81d      	bhi.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003768:	2b00      	cmp	r3, #0
 800376a:	d009      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800376c:	2b20      	cmp	r3, #32
 800376e:	d010      	beq.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003770:	e018      	b.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003772:	4b89      	ldr	r3, [pc, #548]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	4a88      	ldr	r2, [pc, #544]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003778:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800377c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800377e:	e015      	b.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	3304      	adds	r3, #4
 8003784:	2100      	movs	r1, #0
 8003786:	4618      	mov	r0, r3
 8003788:	f000 fb02 	bl	8003d90 <RCCEx_PLLSAI1_Config>
 800378c:	4603      	mov	r3, r0
 800378e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003790:	e00c      	b.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	3320      	adds	r3, #32
 8003796:	2100      	movs	r1, #0
 8003798:	4618      	mov	r0, r3
 800379a:	f000 fbed 	bl	8003f78 <RCCEx_PLLSAI2_Config>
 800379e:	4603      	mov	r3, r0
 80037a0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80037a2:	e003      	b.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	74fb      	strb	r3, [r7, #19]
      break;
 80037a8:	e000      	b.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80037aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037ac:	7cfb      	ldrb	r3, [r7, #19]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d10b      	bne.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80037b2:	4b79      	ldr	r3, [pc, #484]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80037b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80037b8:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037c0:	4975      	ldr	r1, [pc, #468]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80037c2:	4313      	orrs	r3, r2
 80037c4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80037c8:	e001      	b.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ca:	7cfb      	ldrb	r3, [r7, #19]
 80037cc:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d047      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037e2:	d030      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80037e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037e8:	d82a      	bhi.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80037ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037ee:	d02a      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80037f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037f4:	d824      	bhi.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80037f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037fa:	d008      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0xde>
 80037fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003800:	d81e      	bhi.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003802:	2b00      	cmp	r3, #0
 8003804:	d00a      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003806:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800380a:	d010      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800380c:	e018      	b.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800380e:	4b62      	ldr	r3, [pc, #392]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	4a61      	ldr	r2, [pc, #388]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003814:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003818:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800381a:	e015      	b.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	3304      	adds	r3, #4
 8003820:	2100      	movs	r1, #0
 8003822:	4618      	mov	r0, r3
 8003824:	f000 fab4 	bl	8003d90 <RCCEx_PLLSAI1_Config>
 8003828:	4603      	mov	r3, r0
 800382a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800382c:	e00c      	b.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	3320      	adds	r3, #32
 8003832:	2100      	movs	r1, #0
 8003834:	4618      	mov	r0, r3
 8003836:	f000 fb9f 	bl	8003f78 <RCCEx_PLLSAI2_Config>
 800383a:	4603      	mov	r3, r0
 800383c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800383e:	e003      	b.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	74fb      	strb	r3, [r7, #19]
      break;
 8003844:	e000      	b.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003846:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003848:	7cfb      	ldrb	r3, [r7, #19]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d10b      	bne.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800384e:	4b52      	ldr	r3, [pc, #328]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003850:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003854:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800385c:	494e      	ldr	r1, [pc, #312]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800385e:	4313      	orrs	r3, r2
 8003860:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003864:	e001      	b.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003866:	7cfb      	ldrb	r3, [r7, #19]
 8003868:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003872:	2b00      	cmp	r3, #0
 8003874:	f000 809f 	beq.w	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003878:	2300      	movs	r3, #0
 800387a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800387c:	4b46      	ldr	r3, [pc, #280]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800387e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003880:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d101      	bne.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003888:	2301      	movs	r3, #1
 800388a:	e000      	b.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800388c:	2300      	movs	r3, #0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d00d      	beq.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003892:	4b41      	ldr	r3, [pc, #260]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003896:	4a40      	ldr	r2, [pc, #256]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800389c:	6593      	str	r3, [r2, #88]	; 0x58
 800389e:	4b3e      	ldr	r3, [pc, #248]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80038a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038a6:	60bb      	str	r3, [r7, #8]
 80038a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038aa:	2301      	movs	r3, #1
 80038ac:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038ae:	4b3b      	ldr	r3, [pc, #236]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a3a      	ldr	r2, [pc, #232]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80038b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038b8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80038ba:	f7fd f925 	bl	8000b08 <HAL_GetTick>
 80038be:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80038c0:	e009      	b.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038c2:	f7fd f921 	bl	8000b08 <HAL_GetTick>
 80038c6:	4602      	mov	r2, r0
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d902      	bls.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	74fb      	strb	r3, [r7, #19]
        break;
 80038d4:	e005      	b.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80038d6:	4b31      	ldr	r3, [pc, #196]	; (800399c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d0ef      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80038e2:	7cfb      	ldrb	r3, [r7, #19]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d15b      	bne.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80038e8:	4b2b      	ldr	r3, [pc, #172]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80038ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038f2:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d01f      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003900:	697a      	ldr	r2, [r7, #20]
 8003902:	429a      	cmp	r2, r3
 8003904:	d019      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003906:	4b24      	ldr	r3, [pc, #144]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003908:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800390c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003910:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003912:	4b21      	ldr	r3, [pc, #132]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003914:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003918:	4a1f      	ldr	r2, [pc, #124]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800391a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800391e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003922:	4b1d      	ldr	r3, [pc, #116]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003924:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003928:	4a1b      	ldr	r2, [pc, #108]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800392a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800392e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003932:	4a19      	ldr	r2, [pc, #100]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	f003 0301 	and.w	r3, r3, #1
 8003940:	2b00      	cmp	r3, #0
 8003942:	d016      	beq.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003944:	f7fd f8e0 	bl	8000b08 <HAL_GetTick>
 8003948:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800394a:	e00b      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800394c:	f7fd f8dc 	bl	8000b08 <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	f241 3288 	movw	r2, #5000	; 0x1388
 800395a:	4293      	cmp	r3, r2
 800395c:	d902      	bls.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	74fb      	strb	r3, [r7, #19]
            break;
 8003962:	e006      	b.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003964:	4b0c      	ldr	r3, [pc, #48]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003966:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800396a:	f003 0302 	and.w	r3, r3, #2
 800396e:	2b00      	cmp	r3, #0
 8003970:	d0ec      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8003972:	7cfb      	ldrb	r3, [r7, #19]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d10c      	bne.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003978:	4b07      	ldr	r3, [pc, #28]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800397a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800397e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003988:	4903      	ldr	r1, [pc, #12]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800398a:	4313      	orrs	r3, r2
 800398c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003990:	e008      	b.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003992:	7cfb      	ldrb	r3, [r7, #19]
 8003994:	74bb      	strb	r3, [r7, #18]
 8003996:	e005      	b.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003998:	40021000 	.word	0x40021000
 800399c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039a0:	7cfb      	ldrb	r3, [r7, #19]
 80039a2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039a4:	7c7b      	ldrb	r3, [r7, #17]
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d105      	bne.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039aa:	4ba0      	ldr	r3, [pc, #640]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80039ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ae:	4a9f      	ldr	r2, [pc, #636]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80039b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039b4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d00a      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80039c2:	4b9a      	ldr	r3, [pc, #616]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80039c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039c8:	f023 0203 	bic.w	r2, r3, #3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039d0:	4996      	ldr	r1, [pc, #600]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80039d2:	4313      	orrs	r3, r2
 80039d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0302 	and.w	r3, r3, #2
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d00a      	beq.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80039e4:	4b91      	ldr	r3, [pc, #580]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80039e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ea:	f023 020c 	bic.w	r2, r3, #12
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f2:	498e      	ldr	r1, [pc, #568]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80039f4:	4313      	orrs	r3, r2
 80039f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0304 	and.w	r3, r3, #4
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d00a      	beq.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003a06:	4b89      	ldr	r3, [pc, #548]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a0c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a14:	4985      	ldr	r1, [pc, #532]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a16:	4313      	orrs	r3, r2
 8003a18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0308 	and.w	r3, r3, #8
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d00a      	beq.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003a28:	4b80      	ldr	r3, [pc, #512]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a2e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a36:	497d      	ldr	r1, [pc, #500]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0310 	and.w	r3, r3, #16
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d00a      	beq.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003a4a:	4b78      	ldr	r3, [pc, #480]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a58:	4974      	ldr	r1, [pc, #464]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0320 	and.w	r3, r3, #32
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d00a      	beq.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a6c:	4b6f      	ldr	r3, [pc, #444]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a72:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a7a:	496c      	ldr	r1, [pc, #432]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d00a      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a8e:	4b67      	ldr	r3, [pc, #412]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a94:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a9c:	4963      	ldr	r1, [pc, #396]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d00a      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ab0:	4b5e      	ldr	r3, [pc, #376]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ab6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003abe:	495b      	ldr	r1, [pc, #364]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d00a      	beq.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ad2:	4b56      	ldr	r3, [pc, #344]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ad8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ae0:	4952      	ldr	r1, [pc, #328]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d00a      	beq.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003af4:	4b4d      	ldr	r3, [pc, #308]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003afa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b02:	494a      	ldr	r1, [pc, #296]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b04:	4313      	orrs	r3, r2
 8003b06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d00a      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b16:	4b45      	ldr	r3, [pc, #276]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b1c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b24:	4941      	ldr	r1, [pc, #260]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b26:	4313      	orrs	r3, r2
 8003b28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d00a      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003b38:	4b3c      	ldr	r3, [pc, #240]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b3e:	f023 0203 	bic.w	r2, r3, #3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b46:	4939      	ldr	r1, [pc, #228]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d028      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b5a:	4b34      	ldr	r3, [pc, #208]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b60:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b68:	4930      	ldr	r1, [pc, #192]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b78:	d106      	bne.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b7a:	4b2c      	ldr	r3, [pc, #176]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	4a2b      	ldr	r2, [pc, #172]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003b80:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b84:	60d3      	str	r3, [r2, #12]
 8003b86:	e011      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b8c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b90:	d10c      	bne.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	3304      	adds	r3, #4
 8003b96:	2101      	movs	r1, #1
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f000 f8f9 	bl	8003d90 <RCCEx_PLLSAI1_Config>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003ba2:	7cfb      	ldrb	r3, [r7, #19]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d001      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8003ba8:	7cfb      	ldrb	r3, [r7, #19]
 8003baa:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d04d      	beq.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bbc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003bc0:	d108      	bne.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8003bc2:	4b1a      	ldr	r3, [pc, #104]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003bc4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003bc8:	4a18      	ldr	r2, [pc, #96]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003bca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003bce:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003bd2:	e012      	b.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003bd4:	4b15      	ldr	r3, [pc, #84]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003bd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003bda:	4a14      	ldr	r2, [pc, #80]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003bdc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003be0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003be4:	4b11      	ldr	r3, [pc, #68]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bf2:	490e      	ldr	r1, [pc, #56]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bfe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c02:	d106      	bne.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c04:	4b09      	ldr	r3, [pc, #36]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	4a08      	ldr	r2, [pc, #32]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c0e:	60d3      	str	r3, [r2, #12]
 8003c10:	e020      	b.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c1a:	d109      	bne.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003c1c:	4b03      	ldr	r3, [pc, #12]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	4a02      	ldr	r2, [pc, #8]	; (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003c22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c26:	60d3      	str	r3, [r2, #12]
 8003c28:	e014      	b.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003c2a:	bf00      	nop
 8003c2c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c34:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c38:	d10c      	bne.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	3304      	adds	r3, #4
 8003c3e:	2101      	movs	r1, #1
 8003c40:	4618      	mov	r0, r3
 8003c42:	f000 f8a5 	bl	8003d90 <RCCEx_PLLSAI1_Config>
 8003c46:	4603      	mov	r3, r0
 8003c48:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c4a:	7cfb      	ldrb	r3, [r7, #19]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d001      	beq.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8003c50:	7cfb      	ldrb	r3, [r7, #19]
 8003c52:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d028      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003c60:	4b4a      	ldr	r3, [pc, #296]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c66:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c6e:	4947      	ldr	r1, [pc, #284]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c70:	4313      	orrs	r3, r2
 8003c72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c7e:	d106      	bne.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c80:	4b42      	ldr	r3, [pc, #264]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	4a41      	ldr	r2, [pc, #260]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c8a:	60d3      	str	r3, [r2, #12]
 8003c8c:	e011      	b.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c92:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c96:	d10c      	bne.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	3304      	adds	r3, #4
 8003c9c:	2101      	movs	r1, #1
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f000 f876 	bl	8003d90 <RCCEx_PLLSAI1_Config>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ca8:	7cfb      	ldrb	r3, [r7, #19]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d001      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8003cae:	7cfb      	ldrb	r3, [r7, #19]
 8003cb0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d01e      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003cbe:	4b33      	ldr	r3, [pc, #204]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cc4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cce:	492f      	ldr	r1, [pc, #188]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cdc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ce0:	d10c      	bne.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	3304      	adds	r3, #4
 8003ce6:	2102      	movs	r1, #2
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f000 f851 	bl	8003d90 <RCCEx_PLLSAI1_Config>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003cf2:	7cfb      	ldrb	r3, [r7, #19]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d001      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8003cf8:	7cfb      	ldrb	r3, [r7, #19]
 8003cfa:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d00b      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003d08:	4b20      	ldr	r3, [pc, #128]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d0e:	f023 0204 	bic.w	r2, r3, #4
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d18:	491c      	ldr	r1, [pc, #112]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d00b      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003d2c:	4b17      	ldr	r3, [pc, #92]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d32:	f023 0218 	bic.w	r2, r3, #24
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d3c:	4913      	ldr	r1, [pc, #76]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d017      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003d50:	4b0e      	ldr	r3, [pc, #56]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d52:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d56:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d60:	490a      	ldr	r1, [pc, #40]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d62:	4313      	orrs	r3, r2
 8003d64:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d72:	d105      	bne.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d74:	4b05      	ldr	r3, [pc, #20]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	4a04      	ldr	r2, [pc, #16]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d7e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003d80:	7cbb      	ldrb	r3, [r7, #18]
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3718      	adds	r7, #24
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	40021000 	.word	0x40021000

08003d90 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003d9e:	4b72      	ldr	r3, [pc, #456]	; (8003f68 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	f003 0303 	and.w	r3, r3, #3
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00e      	beq.n	8003dc8 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003daa:	4b6f      	ldr	r3, [pc, #444]	; (8003f68 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	f003 0203 	and.w	r2, r3, #3
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d103      	bne.n	8003dc2 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
       ||
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d142      	bne.n	8003e48 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	73fb      	strb	r3, [r7, #15]
 8003dc6:	e03f      	b.n	8003e48 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2b03      	cmp	r3, #3
 8003dce:	d018      	beq.n	8003e02 <RCCEx_PLLSAI1_Config+0x72>
 8003dd0:	2b03      	cmp	r3, #3
 8003dd2:	d825      	bhi.n	8003e20 <RCCEx_PLLSAI1_Config+0x90>
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d002      	beq.n	8003dde <RCCEx_PLLSAI1_Config+0x4e>
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d009      	beq.n	8003df0 <RCCEx_PLLSAI1_Config+0x60>
 8003ddc:	e020      	b.n	8003e20 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003dde:	4b62      	ldr	r3, [pc, #392]	; (8003f68 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0302 	and.w	r3, r3, #2
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d11d      	bne.n	8003e26 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dee:	e01a      	b.n	8003e26 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003df0:	4b5d      	ldr	r3, [pc, #372]	; (8003f68 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d116      	bne.n	8003e2a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e00:	e013      	b.n	8003e2a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003e02:	4b59      	ldr	r3, [pc, #356]	; (8003f68 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d10f      	bne.n	8003e2e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003e0e:	4b56      	ldr	r3, [pc, #344]	; (8003f68 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d109      	bne.n	8003e2e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003e1e:	e006      	b.n	8003e2e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	73fb      	strb	r3, [r7, #15]
      break;
 8003e24:	e004      	b.n	8003e30 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003e26:	bf00      	nop
 8003e28:	e002      	b.n	8003e30 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003e2a:	bf00      	nop
 8003e2c:	e000      	b.n	8003e30 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003e2e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003e30:	7bfb      	ldrb	r3, [r7, #15]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d108      	bne.n	8003e48 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003e36:	4b4c      	ldr	r3, [pc, #304]	; (8003f68 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	f023 0203 	bic.w	r2, r3, #3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4949      	ldr	r1, [pc, #292]	; (8003f68 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003e44:	4313      	orrs	r3, r2
 8003e46:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003e48:	7bfb      	ldrb	r3, [r7, #15]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	f040 8086 	bne.w	8003f5c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003e50:	4b45      	ldr	r3, [pc, #276]	; (8003f68 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a44      	ldr	r2, [pc, #272]	; (8003f68 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003e56:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003e5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e5c:	f7fc fe54 	bl	8000b08 <HAL_GetTick>
 8003e60:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e62:	e009      	b.n	8003e78 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e64:	f7fc fe50 	bl	8000b08 <HAL_GetTick>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d902      	bls.n	8003e78 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	73fb      	strb	r3, [r7, #15]
        break;
 8003e76:	e005      	b.n	8003e84 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e78:	4b3b      	ldr	r3, [pc, #236]	; (8003f68 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d1ef      	bne.n	8003e64 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003e84:	7bfb      	ldrb	r3, [r7, #15]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d168      	bne.n	8003f5c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d113      	bne.n	8003eb8 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e90:	4b35      	ldr	r3, [pc, #212]	; (8003f68 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003e92:	691a      	ldr	r2, [r3, #16]
 8003e94:	4b35      	ldr	r3, [pc, #212]	; (8003f6c <RCCEx_PLLSAI1_Config+0x1dc>)
 8003e96:	4013      	ands	r3, r2
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	6892      	ldr	r2, [r2, #8]
 8003e9c:	0211      	lsls	r1, r2, #8
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	68d2      	ldr	r2, [r2, #12]
 8003ea2:	06d2      	lsls	r2, r2, #27
 8003ea4:	4311      	orrs	r1, r2
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	6852      	ldr	r2, [r2, #4]
 8003eaa:	3a01      	subs	r2, #1
 8003eac:	0112      	lsls	r2, r2, #4
 8003eae:	430a      	orrs	r2, r1
 8003eb0:	492d      	ldr	r1, [pc, #180]	; (8003f68 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	610b      	str	r3, [r1, #16]
 8003eb6:	e02d      	b.n	8003f14 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d115      	bne.n	8003eea <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ebe:	4b2a      	ldr	r3, [pc, #168]	; (8003f68 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003ec0:	691a      	ldr	r2, [r3, #16]
 8003ec2:	4b2b      	ldr	r3, [pc, #172]	; (8003f70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	6892      	ldr	r2, [r2, #8]
 8003eca:	0211      	lsls	r1, r2, #8
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	6912      	ldr	r2, [r2, #16]
 8003ed0:	0852      	lsrs	r2, r2, #1
 8003ed2:	3a01      	subs	r2, #1
 8003ed4:	0552      	lsls	r2, r2, #21
 8003ed6:	4311      	orrs	r1, r2
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	6852      	ldr	r2, [r2, #4]
 8003edc:	3a01      	subs	r2, #1
 8003ede:	0112      	lsls	r2, r2, #4
 8003ee0:	430a      	orrs	r2, r1
 8003ee2:	4921      	ldr	r1, [pc, #132]	; (8003f68 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	610b      	str	r3, [r1, #16]
 8003ee8:	e014      	b.n	8003f14 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003eea:	4b1f      	ldr	r3, [pc, #124]	; (8003f68 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003eec:	691a      	ldr	r2, [r3, #16]
 8003eee:	4b21      	ldr	r3, [pc, #132]	; (8003f74 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	6892      	ldr	r2, [r2, #8]
 8003ef6:	0211      	lsls	r1, r2, #8
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	6952      	ldr	r2, [r2, #20]
 8003efc:	0852      	lsrs	r2, r2, #1
 8003efe:	3a01      	subs	r2, #1
 8003f00:	0652      	lsls	r2, r2, #25
 8003f02:	4311      	orrs	r1, r2
 8003f04:	687a      	ldr	r2, [r7, #4]
 8003f06:	6852      	ldr	r2, [r2, #4]
 8003f08:	3a01      	subs	r2, #1
 8003f0a:	0112      	lsls	r2, r2, #4
 8003f0c:	430a      	orrs	r2, r1
 8003f0e:	4916      	ldr	r1, [pc, #88]	; (8003f68 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003f10:	4313      	orrs	r3, r2
 8003f12:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003f14:	4b14      	ldr	r3, [pc, #80]	; (8003f68 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a13      	ldr	r2, [pc, #76]	; (8003f68 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003f1a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f1e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f20:	f7fc fdf2 	bl	8000b08 <HAL_GetTick>
 8003f24:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003f26:	e009      	b.n	8003f3c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f28:	f7fc fdee 	bl	8000b08 <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d902      	bls.n	8003f3c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	73fb      	strb	r3, [r7, #15]
          break;
 8003f3a:	e005      	b.n	8003f48 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003f3c:	4b0a      	ldr	r3, [pc, #40]	; (8003f68 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d0ef      	beq.n	8003f28 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003f48:	7bfb      	ldrb	r3, [r7, #15]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d106      	bne.n	8003f5c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003f4e:	4b06      	ldr	r3, [pc, #24]	; (8003f68 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003f50:	691a      	ldr	r2, [r3, #16]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	699b      	ldr	r3, [r3, #24]
 8003f56:	4904      	ldr	r1, [pc, #16]	; (8003f68 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3710      	adds	r7, #16
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	40021000 	.word	0x40021000
 8003f6c:	07ff800f 	.word	0x07ff800f
 8003f70:	ff9f800f 	.word	0xff9f800f
 8003f74:	f9ff800f 	.word	0xf9ff800f

08003f78 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f82:	2300      	movs	r3, #0
 8003f84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003f86:	4b72      	ldr	r3, [pc, #456]	; (8004150 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	f003 0303 	and.w	r3, r3, #3
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d00e      	beq.n	8003fb0 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003f92:	4b6f      	ldr	r3, [pc, #444]	; (8004150 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	f003 0203 	and.w	r2, r3, #3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d103      	bne.n	8003faa <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
       ||
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d142      	bne.n	8004030 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	73fb      	strb	r3, [r7, #15]
 8003fae:	e03f      	b.n	8004030 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2b03      	cmp	r3, #3
 8003fb6:	d018      	beq.n	8003fea <RCCEx_PLLSAI2_Config+0x72>
 8003fb8:	2b03      	cmp	r3, #3
 8003fba:	d825      	bhi.n	8004008 <RCCEx_PLLSAI2_Config+0x90>
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d002      	beq.n	8003fc6 <RCCEx_PLLSAI2_Config+0x4e>
 8003fc0:	2b02      	cmp	r3, #2
 8003fc2:	d009      	beq.n	8003fd8 <RCCEx_PLLSAI2_Config+0x60>
 8003fc4:	e020      	b.n	8004008 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003fc6:	4b62      	ldr	r3, [pc, #392]	; (8004150 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0302 	and.w	r3, r3, #2
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d11d      	bne.n	800400e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fd6:	e01a      	b.n	800400e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003fd8:	4b5d      	ldr	r3, [pc, #372]	; (8004150 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d116      	bne.n	8004012 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fe8:	e013      	b.n	8004012 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003fea:	4b59      	ldr	r3, [pc, #356]	; (8004150 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d10f      	bne.n	8004016 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003ff6:	4b56      	ldr	r3, [pc, #344]	; (8004150 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d109      	bne.n	8004016 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004006:	e006      	b.n	8004016 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	73fb      	strb	r3, [r7, #15]
      break;
 800400c:	e004      	b.n	8004018 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800400e:	bf00      	nop
 8004010:	e002      	b.n	8004018 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004012:	bf00      	nop
 8004014:	e000      	b.n	8004018 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004016:	bf00      	nop
    }

    if(status == HAL_OK)
 8004018:	7bfb      	ldrb	r3, [r7, #15]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d108      	bne.n	8004030 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800401e:	4b4c      	ldr	r3, [pc, #304]	; (8004150 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	f023 0203 	bic.w	r2, r3, #3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4949      	ldr	r1, [pc, #292]	; (8004150 <RCCEx_PLLSAI2_Config+0x1d8>)
 800402c:	4313      	orrs	r3, r2
 800402e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004030:	7bfb      	ldrb	r3, [r7, #15]
 8004032:	2b00      	cmp	r3, #0
 8004034:	f040 8086 	bne.w	8004144 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004038:	4b45      	ldr	r3, [pc, #276]	; (8004150 <RCCEx_PLLSAI2_Config+0x1d8>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a44      	ldr	r2, [pc, #272]	; (8004150 <RCCEx_PLLSAI2_Config+0x1d8>)
 800403e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004042:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004044:	f7fc fd60 	bl	8000b08 <HAL_GetTick>
 8004048:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800404a:	e009      	b.n	8004060 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800404c:	f7fc fd5c 	bl	8000b08 <HAL_GetTick>
 8004050:	4602      	mov	r2, r0
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	2b02      	cmp	r3, #2
 8004058:	d902      	bls.n	8004060 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	73fb      	strb	r3, [r7, #15]
        break;
 800405e:	e005      	b.n	800406c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004060:	4b3b      	ldr	r3, [pc, #236]	; (8004150 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d1ef      	bne.n	800404c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800406c:	7bfb      	ldrb	r3, [r7, #15]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d168      	bne.n	8004144 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d113      	bne.n	80040a0 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004078:	4b35      	ldr	r3, [pc, #212]	; (8004150 <RCCEx_PLLSAI2_Config+0x1d8>)
 800407a:	695a      	ldr	r2, [r3, #20]
 800407c:	4b35      	ldr	r3, [pc, #212]	; (8004154 <RCCEx_PLLSAI2_Config+0x1dc>)
 800407e:	4013      	ands	r3, r2
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	6892      	ldr	r2, [r2, #8]
 8004084:	0211      	lsls	r1, r2, #8
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	68d2      	ldr	r2, [r2, #12]
 800408a:	06d2      	lsls	r2, r2, #27
 800408c:	4311      	orrs	r1, r2
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	6852      	ldr	r2, [r2, #4]
 8004092:	3a01      	subs	r2, #1
 8004094:	0112      	lsls	r2, r2, #4
 8004096:	430a      	orrs	r2, r1
 8004098:	492d      	ldr	r1, [pc, #180]	; (8004150 <RCCEx_PLLSAI2_Config+0x1d8>)
 800409a:	4313      	orrs	r3, r2
 800409c:	614b      	str	r3, [r1, #20]
 800409e:	e02d      	b.n	80040fc <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d115      	bne.n	80040d2 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80040a6:	4b2a      	ldr	r3, [pc, #168]	; (8004150 <RCCEx_PLLSAI2_Config+0x1d8>)
 80040a8:	695a      	ldr	r2, [r3, #20]
 80040aa:	4b2b      	ldr	r3, [pc, #172]	; (8004158 <RCCEx_PLLSAI2_Config+0x1e0>)
 80040ac:	4013      	ands	r3, r2
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	6892      	ldr	r2, [r2, #8]
 80040b2:	0211      	lsls	r1, r2, #8
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	6912      	ldr	r2, [r2, #16]
 80040b8:	0852      	lsrs	r2, r2, #1
 80040ba:	3a01      	subs	r2, #1
 80040bc:	0552      	lsls	r2, r2, #21
 80040be:	4311      	orrs	r1, r2
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	6852      	ldr	r2, [r2, #4]
 80040c4:	3a01      	subs	r2, #1
 80040c6:	0112      	lsls	r2, r2, #4
 80040c8:	430a      	orrs	r2, r1
 80040ca:	4921      	ldr	r1, [pc, #132]	; (8004150 <RCCEx_PLLSAI2_Config+0x1d8>)
 80040cc:	4313      	orrs	r3, r2
 80040ce:	614b      	str	r3, [r1, #20]
 80040d0:	e014      	b.n	80040fc <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80040d2:	4b1f      	ldr	r3, [pc, #124]	; (8004150 <RCCEx_PLLSAI2_Config+0x1d8>)
 80040d4:	695a      	ldr	r2, [r3, #20]
 80040d6:	4b21      	ldr	r3, [pc, #132]	; (800415c <RCCEx_PLLSAI2_Config+0x1e4>)
 80040d8:	4013      	ands	r3, r2
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	6892      	ldr	r2, [r2, #8]
 80040de:	0211      	lsls	r1, r2, #8
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	6952      	ldr	r2, [r2, #20]
 80040e4:	0852      	lsrs	r2, r2, #1
 80040e6:	3a01      	subs	r2, #1
 80040e8:	0652      	lsls	r2, r2, #25
 80040ea:	4311      	orrs	r1, r2
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	6852      	ldr	r2, [r2, #4]
 80040f0:	3a01      	subs	r2, #1
 80040f2:	0112      	lsls	r2, r2, #4
 80040f4:	430a      	orrs	r2, r1
 80040f6:	4916      	ldr	r1, [pc, #88]	; (8004150 <RCCEx_PLLSAI2_Config+0x1d8>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80040fc:	4b14      	ldr	r3, [pc, #80]	; (8004150 <RCCEx_PLLSAI2_Config+0x1d8>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a13      	ldr	r2, [pc, #76]	; (8004150 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004102:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004106:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004108:	f7fc fcfe 	bl	8000b08 <HAL_GetTick>
 800410c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800410e:	e009      	b.n	8004124 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004110:	f7fc fcfa 	bl	8000b08 <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	2b02      	cmp	r3, #2
 800411c:	d902      	bls.n	8004124 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	73fb      	strb	r3, [r7, #15]
          break;
 8004122:	e005      	b.n	8004130 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004124:	4b0a      	ldr	r3, [pc, #40]	; (8004150 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800412c:	2b00      	cmp	r3, #0
 800412e:	d0ef      	beq.n	8004110 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004130:	7bfb      	ldrb	r3, [r7, #15]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d106      	bne.n	8004144 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004136:	4b06      	ldr	r3, [pc, #24]	; (8004150 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004138:	695a      	ldr	r2, [r3, #20]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	699b      	ldr	r3, [r3, #24]
 800413e:	4904      	ldr	r1, [pc, #16]	; (8004150 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004140:	4313      	orrs	r3, r2
 8004142:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004144:	7bfb      	ldrb	r3, [r7, #15]
}
 8004146:	4618      	mov	r0, r3
 8004148:	3710      	adds	r7, #16
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	40021000 	.word	0x40021000
 8004154:	07ff800f 	.word	0x07ff800f
 8004158:	ff9f800f 	.word	0xff9f800f
 800415c:	f9ff800f 	.word	0xf9ff800f

08004160 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004164:	f7fc fc68 	bl	8000a38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004168:	f000 f814 	bl	8004194 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800416c:	f000 f902 	bl	8004374 <MX_GPIO_Init>
  MX_DMA_Init();
 8004170:	f000 f8d6 	bl	8004320 <MX_DMA_Init>
  MX_ADC1_Init();
 8004174:	f000 f860 	bl	8004238 <MX_ADC1_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 HAL_ADC_Start_DMA(&hadc1, resultArray, 2 );
 8004178:	2202      	movs	r2, #2
 800417a:	4904      	ldr	r1, [pc, #16]	; (800418c <main+0x2c>)
 800417c:	4804      	ldr	r0, [pc, #16]	; (8004190 <main+0x30>)
 800417e:	f7fd f867 	bl	8001250 <HAL_ADC_Start_DMA>
	 HAL_Delay(100);
 8004182:	2064      	movs	r0, #100	; 0x64
 8004184:	f7fc fccc 	bl	8000b20 <HAL_Delay>
	 HAL_ADC_Start_DMA(&hadc1, resultArray, 2 );
 8004188:	e7f6      	b.n	8004178 <main+0x18>
 800418a:	bf00      	nop
 800418c:	20000100 	.word	0x20000100
 8004190:	2000002c 	.word	0x2000002c

08004194 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b096      	sub	sp, #88	; 0x58
 8004198:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800419a:	f107 0314 	add.w	r3, r7, #20
 800419e:	2244      	movs	r2, #68	; 0x44
 80041a0:	2100      	movs	r1, #0
 80041a2:	4618      	mov	r0, r3
 80041a4:	f000 fad8 	bl	8004758 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80041a8:	463b      	mov	r3, r7
 80041aa:	2200      	movs	r2, #0
 80041ac:	601a      	str	r2, [r3, #0]
 80041ae:	605a      	str	r2, [r3, #4]
 80041b0:	609a      	str	r2, [r3, #8]
 80041b2:	60da      	str	r2, [r3, #12]
 80041b4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80041b6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80041ba:	f7fe fb75 	bl	80028a8 <HAL_PWREx_ControlVoltageScaling>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d001      	beq.n	80041c8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80041c4:	f000 f996 	bl	80044f4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80041c8:	2310      	movs	r3, #16
 80041ca:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80041cc:	2301      	movs	r3, #1
 80041ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80041d0:	2300      	movs	r3, #0
 80041d2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80041d4:	2360      	movs	r3, #96	; 0x60
 80041d6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80041d8:	2302      	movs	r3, #2
 80041da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80041dc:	2301      	movs	r3, #1
 80041de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80041e0:	2301      	movs	r3, #1
 80041e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80041e4:	2328      	movs	r3, #40	; 0x28
 80041e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80041e8:	2302      	movs	r3, #2
 80041ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80041ec:	2302      	movs	r3, #2
 80041ee:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80041f0:	2302      	movs	r3, #2
 80041f2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80041f4:	f107 0314 	add.w	r3, r7, #20
 80041f8:	4618      	mov	r0, r3
 80041fa:	f7fe fbf9 	bl	80029f0 <HAL_RCC_OscConfig>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b00      	cmp	r3, #0
 8004202:	d001      	beq.n	8004208 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8004204:	f000 f976 	bl	80044f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004208:	230f      	movs	r3, #15
 800420a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800420c:	2303      	movs	r3, #3
 800420e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004210:	2300      	movs	r3, #0
 8004212:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004214:	2300      	movs	r3, #0
 8004216:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004218:	2300      	movs	r3, #0
 800421a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800421c:	463b      	mov	r3, r7
 800421e:	2103      	movs	r1, #3
 8004220:	4618      	mov	r0, r3
 8004222:	f7fe ffff 	bl	8003224 <HAL_RCC_ClockConfig>
 8004226:	4603      	mov	r3, r0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d001      	beq.n	8004230 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800422c:	f000 f962 	bl	80044f4 <Error_Handler>
  }
}
 8004230:	bf00      	nop
 8004232:	3758      	adds	r7, #88	; 0x58
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}

08004238 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b086      	sub	sp, #24
 800423c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800423e:	463b      	mov	r3, r7
 8004240:	2200      	movs	r2, #0
 8004242:	601a      	str	r2, [r3, #0]
 8004244:	605a      	str	r2, [r3, #4]
 8004246:	609a      	str	r2, [r3, #8]
 8004248:	60da      	str	r2, [r3, #12]
 800424a:	611a      	str	r2, [r3, #16]
 800424c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800424e:	4b30      	ldr	r3, [pc, #192]	; (8004310 <MX_ADC1_Init+0xd8>)
 8004250:	4a30      	ldr	r2, [pc, #192]	; (8004314 <MX_ADC1_Init+0xdc>)
 8004252:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8004254:	4b2e      	ldr	r3, [pc, #184]	; (8004310 <MX_ADC1_Init+0xd8>)
 8004256:	2200      	movs	r2, #0
 8004258:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800425a:	4b2d      	ldr	r3, [pc, #180]	; (8004310 <MX_ADC1_Init+0xd8>)
 800425c:	2200      	movs	r2, #0
 800425e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004260:	4b2b      	ldr	r3, [pc, #172]	; (8004310 <MX_ADC1_Init+0xd8>)
 8004262:	2200      	movs	r2, #0
 8004264:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004266:	4b2a      	ldr	r3, [pc, #168]	; (8004310 <MX_ADC1_Init+0xd8>)
 8004268:	2201      	movs	r2, #1
 800426a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800426c:	4b28      	ldr	r3, [pc, #160]	; (8004310 <MX_ADC1_Init+0xd8>)
 800426e:	2204      	movs	r2, #4
 8004270:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8004272:	4b27      	ldr	r3, [pc, #156]	; (8004310 <MX_ADC1_Init+0xd8>)
 8004274:	2200      	movs	r2, #0
 8004276:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8004278:	4b25      	ldr	r3, [pc, #148]	; (8004310 <MX_ADC1_Init+0xd8>)
 800427a:	2200      	movs	r2, #0
 800427c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 800427e:	4b24      	ldr	r3, [pc, #144]	; (8004310 <MX_ADC1_Init+0xd8>)
 8004280:	2202      	movs	r2, #2
 8004282:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004284:	4b22      	ldr	r3, [pc, #136]	; (8004310 <MX_ADC1_Init+0xd8>)
 8004286:	2200      	movs	r2, #0
 8004288:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800428c:	4b20      	ldr	r3, [pc, #128]	; (8004310 <MX_ADC1_Init+0xd8>)
 800428e:	2200      	movs	r2, #0
 8004290:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004292:	4b1f      	ldr	r3, [pc, #124]	; (8004310 <MX_ADC1_Init+0xd8>)
 8004294:	2200      	movs	r2, #0
 8004296:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8004298:	4b1d      	ldr	r3, [pc, #116]	; (8004310 <MX_ADC1_Init+0xd8>)
 800429a:	2200      	movs	r2, #0
 800429c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80042a0:	4b1b      	ldr	r3, [pc, #108]	; (8004310 <MX_ADC1_Init+0xd8>)
 80042a2:	2200      	movs	r2, #0
 80042a4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80042a6:	4b1a      	ldr	r3, [pc, #104]	; (8004310 <MX_ADC1_Init+0xd8>)
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80042ae:	4818      	ldr	r0, [pc, #96]	; (8004310 <MX_ADC1_Init+0xd8>)
 80042b0:	f7fc fe82 	bl	8000fb8 <HAL_ADC_Init>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d001      	beq.n	80042be <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80042ba:	f000 f91b 	bl	80044f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80042be:	4b16      	ldr	r3, [pc, #88]	; (8004318 <MX_ADC1_Init+0xe0>)
 80042c0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80042c2:	2306      	movs	r3, #6
 80042c4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 80042c6:	2306      	movs	r3, #6
 80042c8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80042ca:	237f      	movs	r3, #127	; 0x7f
 80042cc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80042ce:	2304      	movs	r3, #4
 80042d0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80042d2:	2300      	movs	r3, #0
 80042d4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80042d6:	463b      	mov	r3, r7
 80042d8:	4619      	mov	r1, r3
 80042da:	480d      	ldr	r0, [pc, #52]	; (8004310 <MX_ADC1_Init+0xd8>)
 80042dc:	f7fd f8b2 	bl	8001444 <HAL_ADC_ConfigChannel>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d001      	beq.n	80042ea <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80042e6:	f000 f905 	bl	80044f4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80042ea:	4b0c      	ldr	r3, [pc, #48]	; (800431c <MX_ADC1_Init+0xe4>)
 80042ec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80042ee:	230c      	movs	r3, #12
 80042f0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80042f2:	463b      	mov	r3, r7
 80042f4:	4619      	mov	r1, r3
 80042f6:	4806      	ldr	r0, [pc, #24]	; (8004310 <MX_ADC1_Init+0xd8>)
 80042f8:	f7fd f8a4 	bl	8001444 <HAL_ADC_ConfigChannel>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d001      	beq.n	8004306 <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 8004302:	f000 f8f7 	bl	80044f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004306:	bf00      	nop
 8004308:	3718      	adds	r7, #24
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	2000002c 	.word	0x2000002c
 8004314:	50040000 	.word	0x50040000
 8004318:	c7520000 	.word	0xc7520000
 800431c:	80000001 	.word	0x80000001

08004320 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b082      	sub	sp, #8
 8004324:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8004326:	4b12      	ldr	r3, [pc, #72]	; (8004370 <MX_DMA_Init+0x50>)
 8004328:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800432a:	4a11      	ldr	r2, [pc, #68]	; (8004370 <MX_DMA_Init+0x50>)
 800432c:	f043 0304 	orr.w	r3, r3, #4
 8004330:	6493      	str	r3, [r2, #72]	; 0x48
 8004332:	4b0f      	ldr	r3, [pc, #60]	; (8004370 <MX_DMA_Init+0x50>)
 8004334:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004336:	f003 0304 	and.w	r3, r3, #4
 800433a:	607b      	str	r3, [r7, #4]
 800433c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800433e:	4b0c      	ldr	r3, [pc, #48]	; (8004370 <MX_DMA_Init+0x50>)
 8004340:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004342:	4a0b      	ldr	r2, [pc, #44]	; (8004370 <MX_DMA_Init+0x50>)
 8004344:	f043 0301 	orr.w	r3, r3, #1
 8004348:	6493      	str	r3, [r2, #72]	; 0x48
 800434a:	4b09      	ldr	r3, [pc, #36]	; (8004370 <MX_DMA_Init+0x50>)
 800434c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800434e:	f003 0301 	and.w	r3, r3, #1
 8004352:	603b      	str	r3, [r7, #0]
 8004354:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004356:	2200      	movs	r2, #0
 8004358:	2100      	movs	r1, #0
 800435a:	200b      	movs	r0, #11
 800435c:	f7fd ff7f 	bl	800225e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004360:	200b      	movs	r0, #11
 8004362:	f7fd ff98 	bl	8002296 <HAL_NVIC_EnableIRQ>

}
 8004366:	bf00      	nop
 8004368:	3708      	adds	r7, #8
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	40021000 	.word	0x40021000

08004374 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800437a:	4b0f      	ldr	r3, [pc, #60]	; (80043b8 <MX_GPIO_Init+0x44>)
 800437c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800437e:	4a0e      	ldr	r2, [pc, #56]	; (80043b8 <MX_GPIO_Init+0x44>)
 8004380:	f043 0301 	orr.w	r3, r3, #1
 8004384:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004386:	4b0c      	ldr	r3, [pc, #48]	; (80043b8 <MX_GPIO_Init+0x44>)
 8004388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800438a:	f003 0301 	and.w	r3, r3, #1
 800438e:	607b      	str	r3, [r7, #4]
 8004390:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004392:	4b09      	ldr	r3, [pc, #36]	; (80043b8 <MX_GPIO_Init+0x44>)
 8004394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004396:	4a08      	ldr	r2, [pc, #32]	; (80043b8 <MX_GPIO_Init+0x44>)
 8004398:	f043 0302 	orr.w	r3, r3, #2
 800439c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800439e:	4b06      	ldr	r3, [pc, #24]	; (80043b8 <MX_GPIO_Init+0x44>)
 80043a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043a2:	f003 0302 	and.w	r3, r3, #2
 80043a6:	603b      	str	r3, [r7, #0]
 80043a8:	683b      	ldr	r3, [r7, #0]

}
 80043aa:	bf00      	nop
 80043ac:	370c      	adds	r7, #12
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr
 80043b6:	bf00      	nop
 80043b8:	40021000 	.word	0x40021000

080043bc <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

// HAL_StatusTypeDef HAL_ADC_Start_DMA
//(ADC_HandleTypeDef * hadc, uint32_t * pData, uint32_t Length)
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc1) {
 80043bc:	b5b0      	push	{r4, r5, r7, lr}
 80043be:	b088      	sub	sp, #32
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]

	// Temperature Sensor rank 1
	tempVoltage = resultArray[0];
 80043c4:	4b3f      	ldr	r3, [pc, #252]	; (80044c4 <HAL_ADC_ConvCpltCallback+0x108>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	b29a      	uxth	r2, r3
 80043ca:	4b3f      	ldr	r3, [pc, #252]	; (80044c8 <HAL_ADC_ConvCpltCallback+0x10c>)
 80043cc:	801a      	strh	r2, [r3, #0]
	// Vrefint rank 2
	refVoltage = resultArray[1];
 80043ce:	4b3d      	ldr	r3, [pc, #244]	; (80044c4 <HAL_ADC_ConvCpltCallback+0x108>)
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	b29a      	uxth	r2, r3
 80043d4:	4b3d      	ldr	r3, [pc, #244]	; (80044cc <HAL_ADC_ConvCpltCallback+0x110>)
 80043d6:	801a      	strh	r2, [r3, #0]

	HAL_ADC_Stop_DMA(&hadc1);
 80043d8:	1d3b      	adds	r3, r7, #4
 80043da:	4618      	mov	r0, r3
 80043dc:	f7fc ffbc 	bl	8001358 <HAL_ADC_Stop_DMA>

	VREFINT_CAL = (int32_t) *((uint16_t*) (0x1FFF75AAUL));
 80043e0:	4b3b      	ldr	r3, [pc, #236]	; (80044d0 <HAL_ADC_ConvCpltCallback+0x114>)
 80043e2:	881b      	ldrh	r3, [r3, #0]
 80043e4:	461a      	mov	r2, r3
 80043e6:	4b3b      	ldr	r3, [pc, #236]	; (80044d4 <HAL_ADC_ConvCpltCallback+0x118>)
 80043e8:	601a      	str	r2, [r3, #0]

	VREF = 3.0 * (float) VREFINT_CAL / ((float) refVoltage);
 80043ea:	4b3a      	ldr	r3, [pc, #232]	; (80044d4 <HAL_ADC_ConvCpltCallback+0x118>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	ee07 3a90 	vmov	s15, r3
 80043f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043f6:	ee17 0a90 	vmov	r0, s15
 80043fa:	f7fc f863 	bl	80004c4 <__aeabi_f2d>
 80043fe:	f04f 0200 	mov.w	r2, #0
 8004402:	4b35      	ldr	r3, [pc, #212]	; (80044d8 <HAL_ADC_ConvCpltCallback+0x11c>)
 8004404:	f7fc f8b6 	bl	8000574 <__aeabi_dmul>
 8004408:	4602      	mov	r2, r0
 800440a:	460b      	mov	r3, r1
 800440c:	4614      	mov	r4, r2
 800440e:	461d      	mov	r5, r3
 8004410:	4b2e      	ldr	r3, [pc, #184]	; (80044cc <HAL_ADC_ConvCpltCallback+0x110>)
 8004412:	881b      	ldrh	r3, [r3, #0]
 8004414:	ee07 3a90 	vmov	s15, r3
 8004418:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800441c:	ee17 0a90 	vmov	r0, s15
 8004420:	f7fc f850 	bl	80004c4 <__aeabi_f2d>
 8004424:	4602      	mov	r2, r0
 8004426:	460b      	mov	r3, r1
 8004428:	4620      	mov	r0, r4
 800442a:	4629      	mov	r1, r5
 800442c:	f7fc f9cc 	bl	80007c8 <__aeabi_ddiv>
 8004430:	4602      	mov	r2, r0
 8004432:	460b      	mov	r3, r1
 8004434:	4610      	mov	r0, r2
 8004436:	4619      	mov	r1, r3
 8004438:	f7fc faae 	bl	8000998 <__aeabi_d2f>
 800443c:	4603      	mov	r3, r0
 800443e:	4a27      	ldr	r2, [pc, #156]	; (80044dc <HAL_ADC_ConvCpltCallback+0x120>)
 8004440:	6013      	str	r3, [r2, #0]

	TS_CAL1 = (int32_t) *((uint16_t*) (0x1FFF75A8UL));
 8004442:	4b27      	ldr	r3, [pc, #156]	; (80044e0 <HAL_ADC_ConvCpltCallback+0x124>)
 8004444:	881b      	ldrh	r3, [r3, #0]
 8004446:	461a      	mov	r2, r3
 8004448:	4b26      	ldr	r3, [pc, #152]	; (80044e4 <HAL_ADC_ConvCpltCallback+0x128>)
 800444a:	601a      	str	r2, [r3, #0]
	TS_CAL2 = (int32_t) *((uint16_t*) (0x1FFF75CAUL));
 800444c:	4b26      	ldr	r3, [pc, #152]	; (80044e8 <HAL_ADC_ConvCpltCallback+0x12c>)
 800444e:	881b      	ldrh	r3, [r3, #0]
 8004450:	461a      	mov	r2, r3
 8004452:	4b26      	ldr	r3, [pc, #152]	; (80044ec <HAL_ADC_ConvCpltCallback+0x130>)
 8004454:	601a      	str	r2, [r3, #0]

	int32_t TS_DATA = (int32_t) tempVoltage;
 8004456:	4b1c      	ldr	r3, [pc, #112]	; (80044c8 <HAL_ADC_ConvCpltCallback+0x10c>)
 8004458:	881b      	ldrh	r3, [r3, #0]
 800445a:	61fb      	str	r3, [r7, #28]

	int32_t diff = TS_DATA - TS_CAL1;
 800445c:	4b21      	ldr	r3, [pc, #132]	; (80044e4 <HAL_ADC_ConvCpltCallback+0x128>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	69fa      	ldr	r2, [r7, #28]
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	61bb      	str	r3, [r7, #24]
	int32_t num = 130 - 30;
 8004466:	2364      	movs	r3, #100	; 0x64
 8004468:	617b      	str	r3, [r7, #20]
	int32_t den = TS_CAL2 - TS_CAL1;
 800446a:	4b20      	ldr	r3, [pc, #128]	; (80044ec <HAL_ADC_ConvCpltCallback+0x130>)
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	4b1d      	ldr	r3, [pc, #116]	; (80044e4 <HAL_ADC_ConvCpltCallback+0x128>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	613b      	str	r3, [r7, #16]

	float scal = ((float) num) / (VREF * ((float) den));
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	ee07 3a90 	vmov	s15, r3
 800447c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	ee07 3a90 	vmov	s15, r3
 8004486:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800448a:	4b14      	ldr	r3, [pc, #80]	; (80044dc <HAL_ADC_ConvCpltCallback+0x120>)
 800448c:	edd3 7a00 	vldr	s15, [r3]
 8004490:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004494:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004498:	edc7 7a03 	vstr	s15, [r7, #12]

	tempCelsius =  scal * diff + 30;
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	ee07 3a90 	vmov	s15, r3
 80044a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80044a6:	edd7 7a03 	vldr	s15, [r7, #12]
 80044aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044ae:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80044b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80044b6:	4b0e      	ldr	r3, [pc, #56]	; (80044f0 <HAL_ADC_ConvCpltCallback+0x134>)
 80044b8:	edc3 7a00 	vstr	s15, [r3]
}
 80044bc:	bf00      	nop
 80044be:	3720      	adds	r7, #32
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bdb0      	pop	{r4, r5, r7, pc}
 80044c4:	20000100 	.word	0x20000100
 80044c8:	200000fa 	.word	0x200000fa
 80044cc:	200000f8 	.word	0x200000f8
 80044d0:	1fff75aa 	.word	0x1fff75aa
 80044d4:	20000110 	.word	0x20000110
 80044d8:	40080000 	.word	0x40080000
 80044dc:	200000f4 	.word	0x200000f4
 80044e0:	1fff75a8 	.word	0x1fff75a8
 80044e4:	20000108 	.word	0x20000108
 80044e8:	1fff75ca 	.word	0x1fff75ca
 80044ec:	2000010c 	.word	0x2000010c
 80044f0:	200000fc 	.word	0x200000fc

080044f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80044f4:	b480      	push	{r7}
 80044f6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80044f8:	b672      	cpsid	i
}
 80044fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80044fc:	e7fe      	b.n	80044fc <Error_Handler+0x8>
	...

08004500 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004506:	4b0f      	ldr	r3, [pc, #60]	; (8004544 <HAL_MspInit+0x44>)
 8004508:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800450a:	4a0e      	ldr	r2, [pc, #56]	; (8004544 <HAL_MspInit+0x44>)
 800450c:	f043 0301 	orr.w	r3, r3, #1
 8004510:	6613      	str	r3, [r2, #96]	; 0x60
 8004512:	4b0c      	ldr	r3, [pc, #48]	; (8004544 <HAL_MspInit+0x44>)
 8004514:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004516:	f003 0301 	and.w	r3, r3, #1
 800451a:	607b      	str	r3, [r7, #4]
 800451c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800451e:	4b09      	ldr	r3, [pc, #36]	; (8004544 <HAL_MspInit+0x44>)
 8004520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004522:	4a08      	ldr	r2, [pc, #32]	; (8004544 <HAL_MspInit+0x44>)
 8004524:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004528:	6593      	str	r3, [r2, #88]	; 0x58
 800452a:	4b06      	ldr	r3, [pc, #24]	; (8004544 <HAL_MspInit+0x44>)
 800452c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800452e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004532:	603b      	str	r3, [r7, #0]
 8004534:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004536:	bf00      	nop
 8004538:	370c      	adds	r7, #12
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr
 8004542:	bf00      	nop
 8004544:	40021000 	.word	0x40021000

08004548 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b0a8      	sub	sp, #160	; 0xa0
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004550:	f107 030c 	add.w	r3, r7, #12
 8004554:	2294      	movs	r2, #148	; 0x94
 8004556:	2100      	movs	r1, #0
 8004558:	4618      	mov	r0, r3
 800455a:	f000 f8fd 	bl	8004758 <memset>
  if(hadc->Instance==ADC1)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a2f      	ldr	r2, [pc, #188]	; (8004620 <HAL_ADC_MspInit+0xd8>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d156      	bne.n	8004616 <HAL_ADC_MspInit+0xce>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8004568:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800456c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800456e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004572:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8004576:	2301      	movs	r3, #1
 8004578:	613b      	str	r3, [r7, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800457a:	2301      	movs	r3, #1
 800457c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800457e:	2318      	movs	r3, #24
 8004580:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8004582:	2302      	movs	r3, #2
 8004584:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8004586:	2302      	movs	r3, #2
 8004588:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800458a:	2302      	movs	r3, #2
 800458c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800458e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004592:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004594:	f107 030c 	add.w	r3, r7, #12
 8004598:	4618      	mov	r0, r3
 800459a:	f7ff f8c9 	bl	8003730 <HAL_RCCEx_PeriphCLKConfig>
 800459e:	4603      	mov	r3, r0
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d001      	beq.n	80045a8 <HAL_ADC_MspInit+0x60>
    {
      Error_Handler();
 80045a4:	f7ff ffa6 	bl	80044f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80045a8:	4b1e      	ldr	r3, [pc, #120]	; (8004624 <HAL_ADC_MspInit+0xdc>)
 80045aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045ac:	4a1d      	ldr	r2, [pc, #116]	; (8004624 <HAL_ADC_MspInit+0xdc>)
 80045ae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80045b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80045b4:	4b1b      	ldr	r3, [pc, #108]	; (8004624 <HAL_ADC_MspInit+0xdc>)
 80045b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045bc:	60bb      	str	r3, [r7, #8]
 80045be:	68bb      	ldr	r3, [r7, #8]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80045c0:	4b19      	ldr	r3, [pc, #100]	; (8004628 <HAL_ADC_MspInit+0xe0>)
 80045c2:	4a1a      	ldr	r2, [pc, #104]	; (800462c <HAL_ADC_MspInit+0xe4>)
 80045c4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80045c6:	4b18      	ldr	r3, [pc, #96]	; (8004628 <HAL_ADC_MspInit+0xe0>)
 80045c8:	2205      	movs	r2, #5
 80045ca:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80045cc:	4b16      	ldr	r3, [pc, #88]	; (8004628 <HAL_ADC_MspInit+0xe0>)
 80045ce:	2200      	movs	r2, #0
 80045d0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80045d2:	4b15      	ldr	r3, [pc, #84]	; (8004628 <HAL_ADC_MspInit+0xe0>)
 80045d4:	2200      	movs	r2, #0
 80045d6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80045d8:	4b13      	ldr	r3, [pc, #76]	; (8004628 <HAL_ADC_MspInit+0xe0>)
 80045da:	2280      	movs	r2, #128	; 0x80
 80045dc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80045de:	4b12      	ldr	r3, [pc, #72]	; (8004628 <HAL_ADC_MspInit+0xe0>)
 80045e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80045e4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80045e6:	4b10      	ldr	r3, [pc, #64]	; (8004628 <HAL_ADC_MspInit+0xe0>)
 80045e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80045ec:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80045ee:	4b0e      	ldr	r3, [pc, #56]	; (8004628 <HAL_ADC_MspInit+0xe0>)
 80045f0:	2200      	movs	r2, #0
 80045f2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80045f4:	4b0c      	ldr	r3, [pc, #48]	; (8004628 <HAL_ADC_MspInit+0xe0>)
 80045f6:	2200      	movs	r2, #0
 80045f8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80045fa:	480b      	ldr	r0, [pc, #44]	; (8004628 <HAL_ADC_MspInit+0xe0>)
 80045fc:	f7fd fe66 	bl	80022cc <HAL_DMA_Init>
 8004600:	4603      	mov	r3, r0
 8004602:	2b00      	cmp	r3, #0
 8004604:	d001      	beq.n	800460a <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 8004606:	f7ff ff75 	bl	80044f4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4a06      	ldr	r2, [pc, #24]	; (8004628 <HAL_ADC_MspInit+0xe0>)
 800460e:	651a      	str	r2, [r3, #80]	; 0x50
 8004610:	4a05      	ldr	r2, [pc, #20]	; (8004628 <HAL_ADC_MspInit+0xe0>)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004616:	bf00      	nop
 8004618:	37a0      	adds	r7, #160	; 0xa0
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	50040000 	.word	0x50040000
 8004624:	40021000 	.word	0x40021000
 8004628:	20000094 	.word	0x20000094
 800462c:	40020008 	.word	0x40020008

08004630 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004630:	b480      	push	{r7}
 8004632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004634:	e7fe      	b.n	8004634 <NMI_Handler+0x4>

08004636 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004636:	b480      	push	{r7}
 8004638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800463a:	e7fe      	b.n	800463a <HardFault_Handler+0x4>

0800463c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800463c:	b480      	push	{r7}
 800463e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004640:	e7fe      	b.n	8004640 <MemManage_Handler+0x4>

08004642 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004642:	b480      	push	{r7}
 8004644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004646:	e7fe      	b.n	8004646 <BusFault_Handler+0x4>

08004648 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004648:	b480      	push	{r7}
 800464a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800464c:	e7fe      	b.n	800464c <UsageFault_Handler+0x4>

0800464e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800464e:	b480      	push	{r7}
 8004650:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004652:	bf00      	nop
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800465c:	b480      	push	{r7}
 800465e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004660:	bf00      	nop
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr

0800466a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800466a:	b480      	push	{r7}
 800466c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800466e:	bf00      	nop
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr

08004678 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800467c:	f7fc fa30 	bl	8000ae0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004680:	bf00      	nop
 8004682:	bd80      	pop	{r7, pc}

08004684 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004688:	4802      	ldr	r0, [pc, #8]	; (8004694 <DMA1_Channel1_IRQHandler+0x10>)
 800468a:	f7fd ff9e 	bl	80025ca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800468e:	bf00      	nop
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	20000094 	.word	0x20000094

08004698 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8004698:	b480      	push	{r7}
 800469a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800469c:	4b06      	ldr	r3, [pc, #24]	; (80046b8 <SystemInit+0x20>)
 800469e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046a2:	4a05      	ldr	r2, [pc, #20]	; (80046b8 <SystemInit+0x20>)
 80046a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80046a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80046ac:	bf00      	nop
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr
 80046b6:	bf00      	nop
 80046b8:	e000ed00 	.word	0xe000ed00

080046bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80046bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80046f4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80046c0:	f7ff ffea 	bl	8004698 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80046c4:	480c      	ldr	r0, [pc, #48]	; (80046f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80046c6:	490d      	ldr	r1, [pc, #52]	; (80046fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80046c8:	4a0d      	ldr	r2, [pc, #52]	; (8004700 <LoopForever+0xe>)
  movs r3, #0
 80046ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80046cc:	e002      	b.n	80046d4 <LoopCopyDataInit>

080046ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80046ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80046d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80046d2:	3304      	adds	r3, #4

080046d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80046d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80046d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80046d8:	d3f9      	bcc.n	80046ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80046da:	4a0a      	ldr	r2, [pc, #40]	; (8004704 <LoopForever+0x12>)
  ldr r4, =_ebss
 80046dc:	4c0a      	ldr	r4, [pc, #40]	; (8004708 <LoopForever+0x16>)
  movs r3, #0
 80046de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80046e0:	e001      	b.n	80046e6 <LoopFillZerobss>

080046e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80046e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80046e4:	3204      	adds	r2, #4

080046e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80046e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80046e8:	d3fb      	bcc.n	80046e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80046ea:	f000 f811 	bl	8004710 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80046ee:	f7ff fd37 	bl	8004160 <main>

080046f2 <LoopForever>:

LoopForever:
    b LoopForever
 80046f2:	e7fe      	b.n	80046f2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80046f4:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80046f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80046fc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8004700:	080047c8 	.word	0x080047c8
  ldr r2, =_sbss
 8004704:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8004708:	20000114 	.word	0x20000114

0800470c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800470c:	e7fe      	b.n	800470c <ADC1_IRQHandler>
	...

08004710 <__libc_init_array>:
 8004710:	b570      	push	{r4, r5, r6, lr}
 8004712:	4d0d      	ldr	r5, [pc, #52]	; (8004748 <__libc_init_array+0x38>)
 8004714:	4c0d      	ldr	r4, [pc, #52]	; (800474c <__libc_init_array+0x3c>)
 8004716:	1b64      	subs	r4, r4, r5
 8004718:	10a4      	asrs	r4, r4, #2
 800471a:	2600      	movs	r6, #0
 800471c:	42a6      	cmp	r6, r4
 800471e:	d109      	bne.n	8004734 <__libc_init_array+0x24>
 8004720:	4d0b      	ldr	r5, [pc, #44]	; (8004750 <__libc_init_array+0x40>)
 8004722:	4c0c      	ldr	r4, [pc, #48]	; (8004754 <__libc_init_array+0x44>)
 8004724:	f000 f820 	bl	8004768 <_init>
 8004728:	1b64      	subs	r4, r4, r5
 800472a:	10a4      	asrs	r4, r4, #2
 800472c:	2600      	movs	r6, #0
 800472e:	42a6      	cmp	r6, r4
 8004730:	d105      	bne.n	800473e <__libc_init_array+0x2e>
 8004732:	bd70      	pop	{r4, r5, r6, pc}
 8004734:	f855 3b04 	ldr.w	r3, [r5], #4
 8004738:	4798      	blx	r3
 800473a:	3601      	adds	r6, #1
 800473c:	e7ee      	b.n	800471c <__libc_init_array+0xc>
 800473e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004742:	4798      	blx	r3
 8004744:	3601      	adds	r6, #1
 8004746:	e7f2      	b.n	800472e <__libc_init_array+0x1e>
 8004748:	080047c0 	.word	0x080047c0
 800474c:	080047c0 	.word	0x080047c0
 8004750:	080047c0 	.word	0x080047c0
 8004754:	080047c4 	.word	0x080047c4

08004758 <memset>:
 8004758:	4402      	add	r2, r0
 800475a:	4603      	mov	r3, r0
 800475c:	4293      	cmp	r3, r2
 800475e:	d100      	bne.n	8004762 <memset+0xa>
 8004760:	4770      	bx	lr
 8004762:	f803 1b01 	strb.w	r1, [r3], #1
 8004766:	e7f9      	b.n	800475c <memset+0x4>

08004768 <_init>:
 8004768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800476a:	bf00      	nop
 800476c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800476e:	bc08      	pop	{r3}
 8004770:	469e      	mov	lr, r3
 8004772:	4770      	bx	lr

08004774 <_fini>:
 8004774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004776:	bf00      	nop
 8004778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800477a:	bc08      	pop	{r3}
 800477c:	469e      	mov	lr, r3
 800477e:	4770      	bx	lr
