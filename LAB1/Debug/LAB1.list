
LAB1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003344  080001c0  080001c0  000101c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001010  08003508  08003508  00013508  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004518  08004518  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004518  08004518  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004518  08004518  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004518  08004518  00014518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800451c  0800451c  0001451c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004520  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000070  08004590  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  08004590  00020090  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005ebc  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014cd  00000000  00000000  00025f5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000618  00000000  00000000  00027430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000528  00000000  00000000  00027a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029245  00000000  00000000  00027f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006b09  00000000  00000000  000511b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fad88  00000000  00000000  00057cbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  00152a46  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a60  00000000  00000000  00152b0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000007de  00000000  00000000  0015456c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000070 	.word	0x20000070
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080034ec 	.word	0x080034ec

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000074 	.word	0x20000074
 80001fc:	080034ec 	.word	0x080034ec

08000200 <__aeabi_drsub>:
 8000200:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000204:	e002      	b.n	800020c <__adddf3>
 8000206:	bf00      	nop

08000208 <__aeabi_dsub>:
 8000208:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800020c <__adddf3>:
 800020c:	b530      	push	{r4, r5, lr}
 800020e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000212:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000216:	ea94 0f05 	teq	r4, r5
 800021a:	bf08      	it	eq
 800021c:	ea90 0f02 	teqeq	r0, r2
 8000220:	bf1f      	itttt	ne
 8000222:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000226:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000232:	f000 80e2 	beq.w	80003fa <__adddf3+0x1ee>
 8000236:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023e:	bfb8      	it	lt
 8000240:	426d      	neglt	r5, r5
 8000242:	dd0c      	ble.n	800025e <__adddf3+0x52>
 8000244:	442c      	add	r4, r5
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	ea82 0000 	eor.w	r0, r2, r0
 8000252:	ea83 0101 	eor.w	r1, r3, r1
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	2d36      	cmp	r5, #54	; 0x36
 8000260:	bf88      	it	hi
 8000262:	bd30      	pophi	{r4, r5, pc}
 8000264:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000268:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800026c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000270:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x70>
 8000276:	4240      	negs	r0, r0
 8000278:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800027c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000280:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000284:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000288:	d002      	beq.n	8000290 <__adddf3+0x84>
 800028a:	4252      	negs	r2, r2
 800028c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000290:	ea94 0f05 	teq	r4, r5
 8000294:	f000 80a7 	beq.w	80003e6 <__adddf3+0x1da>
 8000298:	f1a4 0401 	sub.w	r4, r4, #1
 800029c:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a0:	db0d      	blt.n	80002be <__adddf3+0xb2>
 80002a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a6:	fa22 f205 	lsr.w	r2, r2, r5
 80002aa:	1880      	adds	r0, r0, r2
 80002ac:	f141 0100 	adc.w	r1, r1, #0
 80002b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b4:	1880      	adds	r0, r0, r2
 80002b6:	fa43 f305 	asr.w	r3, r3, r5
 80002ba:	4159      	adcs	r1, r3
 80002bc:	e00e      	b.n	80002dc <__adddf3+0xd0>
 80002be:	f1a5 0520 	sub.w	r5, r5, #32
 80002c2:	f10e 0e20 	add.w	lr, lr, #32
 80002c6:	2a01      	cmp	r2, #1
 80002c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002cc:	bf28      	it	cs
 80002ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d2:	fa43 f305 	asr.w	r3, r3, r5
 80002d6:	18c0      	adds	r0, r0, r3
 80002d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e0:	d507      	bpl.n	80002f2 <__adddf3+0xe6>
 80002e2:	f04f 0e00 	mov.w	lr, #0
 80002e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002f6:	d31b      	bcc.n	8000330 <__adddf3+0x124>
 80002f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002fc:	d30c      	bcc.n	8000318 <__adddf3+0x10c>
 80002fe:	0849      	lsrs	r1, r1, #1
 8000300:	ea5f 0030 	movs.w	r0, r0, rrx
 8000304:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000308:	f104 0401 	add.w	r4, r4, #1
 800030c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000310:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000314:	f080 809a 	bcs.w	800044c <__adddf3+0x240>
 8000318:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800031c:	bf08      	it	eq
 800031e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000322:	f150 0000 	adcs.w	r0, r0, #0
 8000326:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032a:	ea41 0105 	orr.w	r1, r1, r5
 800032e:	bd30      	pop	{r4, r5, pc}
 8000330:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000334:	4140      	adcs	r0, r0
 8000336:	eb41 0101 	adc.w	r1, r1, r1
 800033a:	3c01      	subs	r4, #1
 800033c:	bf28      	it	cs
 800033e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000342:	d2e9      	bcs.n	8000318 <__adddf3+0x10c>
 8000344:	f091 0f00 	teq	r1, #0
 8000348:	bf04      	itt	eq
 800034a:	4601      	moveq	r1, r0
 800034c:	2000      	moveq	r0, #0
 800034e:	fab1 f381 	clz	r3, r1
 8000352:	bf08      	it	eq
 8000354:	3320      	addeq	r3, #32
 8000356:	f1a3 030b 	sub.w	r3, r3, #11
 800035a:	f1b3 0220 	subs.w	r2, r3, #32
 800035e:	da0c      	bge.n	800037a <__adddf3+0x16e>
 8000360:	320c      	adds	r2, #12
 8000362:	dd08      	ble.n	8000376 <__adddf3+0x16a>
 8000364:	f102 0c14 	add.w	ip, r2, #20
 8000368:	f1c2 020c 	rsb	r2, r2, #12
 800036c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000370:	fa21 f102 	lsr.w	r1, r1, r2
 8000374:	e00c      	b.n	8000390 <__adddf3+0x184>
 8000376:	f102 0214 	add.w	r2, r2, #20
 800037a:	bfd8      	it	le
 800037c:	f1c2 0c20 	rsble	ip, r2, #32
 8000380:	fa01 f102 	lsl.w	r1, r1, r2
 8000384:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000388:	bfdc      	itt	le
 800038a:	ea41 010c 	orrle.w	r1, r1, ip
 800038e:	4090      	lslle	r0, r2
 8000390:	1ae4      	subs	r4, r4, r3
 8000392:	bfa2      	ittt	ge
 8000394:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000398:	4329      	orrge	r1, r5
 800039a:	bd30      	popge	{r4, r5, pc}
 800039c:	ea6f 0404 	mvn.w	r4, r4
 80003a0:	3c1f      	subs	r4, #31
 80003a2:	da1c      	bge.n	80003de <__adddf3+0x1d2>
 80003a4:	340c      	adds	r4, #12
 80003a6:	dc0e      	bgt.n	80003c6 <__adddf3+0x1ba>
 80003a8:	f104 0414 	add.w	r4, r4, #20
 80003ac:	f1c4 0220 	rsb	r2, r4, #32
 80003b0:	fa20 f004 	lsr.w	r0, r0, r4
 80003b4:	fa01 f302 	lsl.w	r3, r1, r2
 80003b8:	ea40 0003 	orr.w	r0, r0, r3
 80003bc:	fa21 f304 	lsr.w	r3, r1, r4
 80003c0:	ea45 0103 	orr.w	r1, r5, r3
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f1c4 040c 	rsb	r4, r4, #12
 80003ca:	f1c4 0220 	rsb	r2, r4, #32
 80003ce:	fa20 f002 	lsr.w	r0, r0, r2
 80003d2:	fa01 f304 	lsl.w	r3, r1, r4
 80003d6:	ea40 0003 	orr.w	r0, r0, r3
 80003da:	4629      	mov	r1, r5
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	fa21 f004 	lsr.w	r0, r1, r4
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f094 0f00 	teq	r4, #0
 80003ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ee:	bf06      	itte	eq
 80003f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f4:	3401      	addeq	r4, #1
 80003f6:	3d01      	subne	r5, #1
 80003f8:	e74e      	b.n	8000298 <__adddf3+0x8c>
 80003fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fe:	bf18      	it	ne
 8000400:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000404:	d029      	beq.n	800045a <__adddf3+0x24e>
 8000406:	ea94 0f05 	teq	r4, r5
 800040a:	bf08      	it	eq
 800040c:	ea90 0f02 	teqeq	r0, r2
 8000410:	d005      	beq.n	800041e <__adddf3+0x212>
 8000412:	ea54 0c00 	orrs.w	ip, r4, r0
 8000416:	bf04      	itt	eq
 8000418:	4619      	moveq	r1, r3
 800041a:	4610      	moveq	r0, r2
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	ea91 0f03 	teq	r1, r3
 8000422:	bf1e      	ittt	ne
 8000424:	2100      	movne	r1, #0
 8000426:	2000      	movne	r0, #0
 8000428:	bd30      	popne	{r4, r5, pc}
 800042a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042e:	d105      	bne.n	800043c <__adddf3+0x230>
 8000430:	0040      	lsls	r0, r0, #1
 8000432:	4149      	adcs	r1, r1
 8000434:	bf28      	it	cs
 8000436:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043a:	bd30      	pop	{r4, r5, pc}
 800043c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000440:	bf3c      	itt	cc
 8000442:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000446:	bd30      	popcc	{r4, r5, pc}
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000450:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000454:	f04f 0000 	mov.w	r0, #0
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045e:	bf1a      	itte	ne
 8000460:	4619      	movne	r1, r3
 8000462:	4610      	movne	r0, r2
 8000464:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000468:	bf1c      	itt	ne
 800046a:	460b      	movne	r3, r1
 800046c:	4602      	movne	r2, r0
 800046e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000472:	bf06      	itte	eq
 8000474:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000478:	ea91 0f03 	teqeq	r1, r3
 800047c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	bf00      	nop

08000484 <__aeabi_ui2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f04f 0500 	mov.w	r5, #0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e750      	b.n	8000344 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_i2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004bc:	bf48      	it	mi
 80004be:	4240      	negmi	r0, r0
 80004c0:	f04f 0100 	mov.w	r1, #0
 80004c4:	e73e      	b.n	8000344 <__adddf3+0x138>
 80004c6:	bf00      	nop

080004c8 <__aeabi_f2d>:
 80004c8:	0042      	lsls	r2, r0, #1
 80004ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d6:	bf1f      	itttt	ne
 80004d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e4:	4770      	bxne	lr
 80004e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ea:	bf08      	it	eq
 80004ec:	4770      	bxeq	lr
 80004ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004f2:	bf04      	itt	eq
 80004f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e71c      	b.n	8000344 <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_ul2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	e00a      	b.n	8000532 <__aeabi_l2d+0x16>

0800051c <__aeabi_l2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800052a:	d502      	bpl.n	8000532 <__aeabi_l2d+0x16>
 800052c:	4240      	negs	r0, r0
 800052e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000532:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000536:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053e:	f43f aed8 	beq.w	80002f2 <__adddf3+0xe6>
 8000542:	f04f 0203 	mov.w	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000562:	fa20 f002 	lsr.w	r0, r0, r2
 8000566:	fa01 fe03 	lsl.w	lr, r1, r3
 800056a:	ea40 000e 	orr.w	r0, r0, lr
 800056e:	fa21 f102 	lsr.w	r1, r1, r2
 8000572:	4414      	add	r4, r2
 8000574:	e6bd      	b.n	80002f2 <__adddf3+0xe6>
 8000576:	bf00      	nop

08000578 <__aeabi_dmul>:
 8000578:	b570      	push	{r4, r5, r6, lr}
 800057a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800057e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000582:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000586:	bf1d      	ittte	ne
 8000588:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800058c:	ea94 0f0c 	teqne	r4, ip
 8000590:	ea95 0f0c 	teqne	r5, ip
 8000594:	f000 f8de 	bleq	8000754 <__aeabi_dmul+0x1dc>
 8000598:	442c      	add	r4, r5
 800059a:	ea81 0603 	eor.w	r6, r1, r3
 800059e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005aa:	bf18      	it	ne
 80005ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005b8:	d038      	beq.n	800062c <__aeabi_dmul+0xb4>
 80005ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ce:	f04f 0600 	mov.w	r6, #0
 80005d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d6:	f09c 0f00 	teq	ip, #0
 80005da:	bf18      	it	ne
 80005dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ec:	d204      	bcs.n	80005f8 <__aeabi_dmul+0x80>
 80005ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f2:	416d      	adcs	r5, r5
 80005f4:	eb46 0606 	adc.w	r6, r6, r6
 80005f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000600:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000604:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000608:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800060c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000610:	bf88      	it	hi
 8000612:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000616:	d81e      	bhi.n	8000656 <__aeabi_dmul+0xde>
 8000618:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800061c:	bf08      	it	eq
 800061e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000622:	f150 0000 	adcs.w	r0, r0, #0
 8000626:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000630:	ea46 0101 	orr.w	r1, r6, r1
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	ea81 0103 	eor.w	r1, r1, r3
 800063c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000640:	bfc2      	ittt	gt
 8000642:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000646:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064a:	bd70      	popgt	{r4, r5, r6, pc}
 800064c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000650:	f04f 0e00 	mov.w	lr, #0
 8000654:	3c01      	subs	r4, #1
 8000656:	f300 80ab 	bgt.w	80007b0 <__aeabi_dmul+0x238>
 800065a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800065e:	bfde      	ittt	le
 8000660:	2000      	movle	r0, #0
 8000662:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd70      	pople	{r4, r5, r6, pc}
 8000668:	f1c4 0400 	rsb	r4, r4, #0
 800066c:	3c20      	subs	r4, #32
 800066e:	da35      	bge.n	80006dc <__aeabi_dmul+0x164>
 8000670:	340c      	adds	r4, #12
 8000672:	dc1b      	bgt.n	80006ac <__aeabi_dmul+0x134>
 8000674:	f104 0414 	add.w	r4, r4, #20
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f305 	lsl.w	r3, r0, r5
 8000680:	fa20 f004 	lsr.w	r0, r0, r4
 8000684:	fa01 f205 	lsl.w	r2, r1, r5
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000690:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000698:	fa21 f604 	lsr.w	r6, r1, r4
 800069c:	eb42 0106 	adc.w	r1, r2, r6
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 040c 	rsb	r4, r4, #12
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f304 	lsl.w	r3, r0, r4
 80006b8:	fa20 f005 	lsr.w	r0, r0, r5
 80006bc:	fa01 f204 	lsl.w	r2, r1, r4
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006cc:	f141 0100 	adc.w	r1, r1, #0
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f205 	lsl.w	r2, r0, r5
 80006e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ec:	fa01 f205 	lsl.w	r2, r1, r5
 80006f0:	ea43 0302 	orr.w	r3, r3, r2
 80006f4:	fa21 f004 	lsr.w	r0, r1, r4
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	fa21 f204 	lsr.w	r2, r1, r4
 8000700:	ea20 0002 	bic.w	r0, r0, r2
 8000704:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f094 0f00 	teq	r4, #0
 8000718:	d10f      	bne.n	800073a <__aeabi_dmul+0x1c2>
 800071a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800071e:	0040      	lsls	r0, r0, #1
 8000720:	eb41 0101 	adc.w	r1, r1, r1
 8000724:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3c01      	subeq	r4, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1a6>
 800072e:	ea41 0106 	orr.w	r1, r1, r6
 8000732:	f095 0f00 	teq	r5, #0
 8000736:	bf18      	it	ne
 8000738:	4770      	bxne	lr
 800073a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800073e:	0052      	lsls	r2, r2, #1
 8000740:	eb43 0303 	adc.w	r3, r3, r3
 8000744:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3d01      	subeq	r5, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1c6>
 800074e:	ea43 0306 	orr.w	r3, r3, r6
 8000752:	4770      	bx	lr
 8000754:	ea94 0f0c 	teq	r4, ip
 8000758:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800075c:	bf18      	it	ne
 800075e:	ea95 0f0c 	teqne	r5, ip
 8000762:	d00c      	beq.n	800077e <__aeabi_dmul+0x206>
 8000764:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000768:	bf18      	it	ne
 800076a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076e:	d1d1      	bne.n	8000714 <__aeabi_dmul+0x19c>
 8000770:	ea81 0103 	eor.w	r1, r1, r3
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	bd70      	pop	{r4, r5, r6, pc}
 800077e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000782:	bf06      	itte	eq
 8000784:	4610      	moveq	r0, r2
 8000786:	4619      	moveq	r1, r3
 8000788:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078c:	d019      	beq.n	80007c2 <__aeabi_dmul+0x24a>
 800078e:	ea94 0f0c 	teq	r4, ip
 8000792:	d102      	bne.n	800079a <__aeabi_dmul+0x222>
 8000794:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000798:	d113      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 800079a:	ea95 0f0c 	teq	r5, ip
 800079e:	d105      	bne.n	80007ac <__aeabi_dmul+0x234>
 80007a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a4:	bf1c      	itt	ne
 80007a6:	4610      	movne	r0, r2
 80007a8:	4619      	movne	r1, r3
 80007aa:	d10a      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 80007ac:	ea81 0103 	eor.w	r1, r1, r3
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	bd70      	pop	{r4, r5, r6, pc}
 80007c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ca:	bd70      	pop	{r4, r5, r6, pc}

080007cc <__aeabi_ddiv>:
 80007cc:	b570      	push	{r4, r5, r6, lr}
 80007ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007da:	bf1d      	ittte	ne
 80007dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e0:	ea94 0f0c 	teqne	r4, ip
 80007e4:	ea95 0f0c 	teqne	r5, ip
 80007e8:	f000 f8a7 	bleq	800093a <__aeabi_ddiv+0x16e>
 80007ec:	eba4 0405 	sub.w	r4, r4, r5
 80007f0:	ea81 0e03 	eor.w	lr, r1, r3
 80007f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007fc:	f000 8088 	beq.w	8000910 <__aeabi_ddiv+0x144>
 8000800:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000804:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000808:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800080c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000810:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000814:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000818:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800081c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000820:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000824:	429d      	cmp	r5, r3
 8000826:	bf08      	it	eq
 8000828:	4296      	cmpeq	r6, r2
 800082a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800082e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000832:	d202      	bcs.n	800083a <__aeabi_ddiv+0x6e>
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	1ab6      	subs	r6, r6, r2
 800083c:	eb65 0503 	sbc.w	r5, r5, r3
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800084a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ac:	d018      	beq.n	80008e0 <__aeabi_ddiv+0x114>
 80008ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ca:	d1c0      	bne.n	800084e <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d0:	d10b      	bne.n	80008ea <__aeabi_ddiv+0x11e>
 80008d2:	ea41 0100 	orr.w	r1, r1, r0
 80008d6:	f04f 0000 	mov.w	r0, #0
 80008da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008de:	e7b6      	b.n	800084e <__aeabi_ddiv+0x82>
 80008e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e4:	bf04      	itt	eq
 80008e6:	4301      	orreq	r1, r0
 80008e8:	2000      	moveq	r0, #0
 80008ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ee:	bf88      	it	hi
 80008f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f4:	f63f aeaf 	bhi.w	8000656 <__aeabi_dmul+0xde>
 80008f8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008fc:	bf04      	itt	eq
 80008fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000902:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000906:	f150 0000 	adcs.w	r0, r0, #0
 800090a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090e:	bd70      	pop	{r4, r5, r6, pc}
 8000910:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000914:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000918:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800091c:	bfc2      	ittt	gt
 800091e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000922:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000926:	bd70      	popgt	{r4, r5, r6, pc}
 8000928:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092c:	f04f 0e00 	mov.w	lr, #0
 8000930:	3c01      	subs	r4, #1
 8000932:	e690      	b.n	8000656 <__aeabi_dmul+0xde>
 8000934:	ea45 0e06 	orr.w	lr, r5, r6
 8000938:	e68d      	b.n	8000656 <__aeabi_dmul+0xde>
 800093a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093e:	ea94 0f0c 	teq	r4, ip
 8000942:	bf08      	it	eq
 8000944:	ea95 0f0c 	teqeq	r5, ip
 8000948:	f43f af3b 	beq.w	80007c2 <__aeabi_dmul+0x24a>
 800094c:	ea94 0f0c 	teq	r4, ip
 8000950:	d10a      	bne.n	8000968 <__aeabi_ddiv+0x19c>
 8000952:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000956:	f47f af34 	bne.w	80007c2 <__aeabi_dmul+0x24a>
 800095a:	ea95 0f0c 	teq	r5, ip
 800095e:	f47f af25 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e72c      	b.n	80007c2 <__aeabi_dmul+0x24a>
 8000968:	ea95 0f0c 	teq	r5, ip
 800096c:	d106      	bne.n	800097c <__aeabi_ddiv+0x1b0>
 800096e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000972:	f43f aefd 	beq.w	8000770 <__aeabi_dmul+0x1f8>
 8000976:	4610      	mov	r0, r2
 8000978:	4619      	mov	r1, r3
 800097a:	e722      	b.n	80007c2 <__aeabi_dmul+0x24a>
 800097c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000986:	f47f aec5 	bne.w	8000714 <__aeabi_dmul+0x19c>
 800098a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098e:	f47f af0d 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000992:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000996:	f47f aeeb 	bne.w	8000770 <__aeabi_dmul+0x1f8>
 800099a:	e712      	b.n	80007c2 <__aeabi_dmul+0x24a>

0800099c <__gedf2>:
 800099c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009a0:	e006      	b.n	80009b0 <__cmpdf2+0x4>
 80009a2:	bf00      	nop

080009a4 <__ledf2>:
 80009a4:	f04f 0c01 	mov.w	ip, #1
 80009a8:	e002      	b.n	80009b0 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__cmpdf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009c6:	d01b      	beq.n	8000a00 <__cmpdf2+0x54>
 80009c8:	b001      	add	sp, #4
 80009ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ce:	bf0c      	ite	eq
 80009d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009d4:	ea91 0f03 	teqne	r1, r3
 80009d8:	bf02      	ittt	eq
 80009da:	ea90 0f02 	teqeq	r0, r2
 80009de:	2000      	moveq	r0, #0
 80009e0:	4770      	bxeq	lr
 80009e2:	f110 0f00 	cmn.w	r0, #0
 80009e6:	ea91 0f03 	teq	r1, r3
 80009ea:	bf58      	it	pl
 80009ec:	4299      	cmppl	r1, r3
 80009ee:	bf08      	it	eq
 80009f0:	4290      	cmpeq	r0, r2
 80009f2:	bf2c      	ite	cs
 80009f4:	17d8      	asrcs	r0, r3, #31
 80009f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009fa:	f040 0001 	orr.w	r0, r0, #1
 80009fe:	4770      	bx	lr
 8000a00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d102      	bne.n	8000a10 <__cmpdf2+0x64>
 8000a0a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0e:	d107      	bne.n	8000a20 <__cmpdf2+0x74>
 8000a10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a18:	d1d6      	bne.n	80009c8 <__cmpdf2+0x1c>
 8000a1a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1e:	d0d3      	beq.n	80009c8 <__cmpdf2+0x1c>
 8000a20:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdrcmple>:
 8000a28:	4684      	mov	ip, r0
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4662      	mov	r2, ip
 8000a2e:	468c      	mov	ip, r1
 8000a30:	4619      	mov	r1, r3
 8000a32:	4663      	mov	r3, ip
 8000a34:	e000      	b.n	8000a38 <__aeabi_cdcmpeq>
 8000a36:	bf00      	nop

08000a38 <__aeabi_cdcmpeq>:
 8000a38:	b501      	push	{r0, lr}
 8000a3a:	f7ff ffb7 	bl	80009ac <__cmpdf2>
 8000a3e:	2800      	cmp	r0, #0
 8000a40:	bf48      	it	mi
 8000a42:	f110 0f00 	cmnmi.w	r0, #0
 8000a46:	bd01      	pop	{r0, pc}

08000a48 <__aeabi_dcmpeq>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff fff4 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a50:	bf0c      	ite	eq
 8000a52:	2001      	moveq	r0, #1
 8000a54:	2000      	movne	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmplt>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffea 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a64:	bf34      	ite	cc
 8000a66:	2001      	movcc	r0, #1
 8000a68:	2000      	movcs	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmple>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffe0 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a78:	bf94      	ite	ls
 8000a7a:	2001      	movls	r0, #1
 8000a7c:	2000      	movhi	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpge>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffce 	bl	8000a28 <__aeabi_cdrcmple>
 8000a8c:	bf94      	ite	ls
 8000a8e:	2001      	movls	r0, #1
 8000a90:	2000      	movhi	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmpgt>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffc4 	bl	8000a28 <__aeabi_cdrcmple>
 8000aa0:	bf34      	ite	cc
 8000aa2:	2001      	movcc	r0, #1
 8000aa4:	2000      	movcs	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpun>:
 8000aac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab4:	d102      	bne.n	8000abc <__aeabi_dcmpun+0x10>
 8000ab6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aba:	d10a      	bne.n	8000ad2 <__aeabi_dcmpun+0x26>
 8000abc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac4:	d102      	bne.n	8000acc <__aeabi_dcmpun+0x20>
 8000ac6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aca:	d102      	bne.n	8000ad2 <__aeabi_dcmpun+0x26>
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	f04f 0001 	mov.w	r0, #1
 8000ad6:	4770      	bx	lr

08000ad8 <__aeabi_d2f>:
 8000ad8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000adc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae0:	bf24      	itt	cs
 8000ae2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ae6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000aea:	d90d      	bls.n	8000b08 <__aeabi_d2f+0x30>
 8000aec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000af8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000afc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b00:	bf08      	it	eq
 8000b02:	f020 0001 	biceq.w	r0, r0, #1
 8000b06:	4770      	bx	lr
 8000b08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b0c:	d121      	bne.n	8000b52 <__aeabi_d2f+0x7a>
 8000b0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b12:	bfbc      	itt	lt
 8000b14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b18:	4770      	bxlt	lr
 8000b1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b22:	f1c2 0218 	rsb	r2, r2, #24
 8000b26:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b32:	bf18      	it	ne
 8000b34:	f040 0001 	orrne.w	r0, r0, #1
 8000b38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b44:	ea40 000c 	orr.w	r0, r0, ip
 8000b48:	fa23 f302 	lsr.w	r3, r3, r2
 8000b4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b50:	e7cc      	b.n	8000aec <__aeabi_d2f+0x14>
 8000b52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b56:	d107      	bne.n	8000b68 <__aeabi_d2f+0x90>
 8000b58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b5c:	bf1e      	ittt	ne
 8000b5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b66:	4770      	bxne	lr
 8000b68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b82:	2003      	movs	r0, #3
 8000b84:	f000 f91e 	bl	8000dc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b88:	2000      	movs	r0, #0
 8000b8a:	f000 f80d 	bl	8000ba8 <HAL_InitTick>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d002      	beq.n	8000b9a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b94:	2301      	movs	r3, #1
 8000b96:	71fb      	strb	r3, [r7, #7]
 8000b98:	e001      	b.n	8000b9e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b9a:	f001 fb91 	bl	80022c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b9e:	79fb      	ldrb	r3, [r7, #7]
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3708      	adds	r7, #8
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000bb4:	4b17      	ldr	r3, [pc, #92]	; (8000c14 <HAL_InitTick+0x6c>)
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d023      	beq.n	8000c04 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000bbc:	4b16      	ldr	r3, [pc, #88]	; (8000c18 <HAL_InitTick+0x70>)
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	4b14      	ldr	r3, [pc, #80]	; (8000c14 <HAL_InitTick+0x6c>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bca:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f000 f91d 	bl	8000e12 <HAL_SYSTICK_Config>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d10f      	bne.n	8000bfe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	2b0f      	cmp	r3, #15
 8000be2:	d809      	bhi.n	8000bf8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000be4:	2200      	movs	r2, #0
 8000be6:	6879      	ldr	r1, [r7, #4]
 8000be8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bec:	f000 f8f5 	bl	8000dda <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bf0:	4a0a      	ldr	r2, [pc, #40]	; (8000c1c <HAL_InitTick+0x74>)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6013      	str	r3, [r2, #0]
 8000bf6:	e007      	b.n	8000c08 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	73fb      	strb	r3, [r7, #15]
 8000bfc:	e004      	b.n	8000c08 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	73fb      	strb	r3, [r7, #15]
 8000c02:	e001      	b.n	8000c08 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c04:	2301      	movs	r3, #1
 8000c06:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3710      	adds	r7, #16
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	20000004 	.word	0x20000004
 8000c18:	20000008 	.word	0x20000008
 8000c1c:	20000000 	.word	0x20000000

08000c20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c24:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <HAL_IncTick+0x20>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	461a      	mov	r2, r3
 8000c2a:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <HAL_IncTick+0x24>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4413      	add	r3, r2
 8000c30:	4a04      	ldr	r2, [pc, #16]	; (8000c44 <HAL_IncTick+0x24>)
 8000c32:	6013      	str	r3, [r2, #0]
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	20000004 	.word	0x20000004
 8000c44:	2000008c 	.word	0x2000008c

08000c48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c4c:	4b03      	ldr	r3, [pc, #12]	; (8000c5c <HAL_GetTick+0x14>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	2000008c 	.word	0x2000008c

08000c60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b085      	sub	sp, #20
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	f003 0307 	and.w	r3, r3, #7
 8000c6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c70:	4b0c      	ldr	r3, [pc, #48]	; (8000ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c72:	68db      	ldr	r3, [r3, #12]
 8000c74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c76:	68ba      	ldr	r2, [r7, #8]
 8000c78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c92:	4a04      	ldr	r2, [pc, #16]	; (8000ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	60d3      	str	r3, [r2, #12]
}
 8000c98:	bf00      	nop
 8000c9a:	3714      	adds	r7, #20
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cac:	4b04      	ldr	r3, [pc, #16]	; (8000cc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	0a1b      	lsrs	r3, r3, #8
 8000cb2:	f003 0307 	and.w	r3, r3, #7
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	6039      	str	r1, [r7, #0]
 8000cce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	db0a      	blt.n	8000cee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	b2da      	uxtb	r2, r3
 8000cdc:	490c      	ldr	r1, [pc, #48]	; (8000d10 <__NVIC_SetPriority+0x4c>)
 8000cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce2:	0112      	lsls	r2, r2, #4
 8000ce4:	b2d2      	uxtb	r2, r2
 8000ce6:	440b      	add	r3, r1
 8000ce8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cec:	e00a      	b.n	8000d04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	b2da      	uxtb	r2, r3
 8000cf2:	4908      	ldr	r1, [pc, #32]	; (8000d14 <__NVIC_SetPriority+0x50>)
 8000cf4:	79fb      	ldrb	r3, [r7, #7]
 8000cf6:	f003 030f 	and.w	r3, r3, #15
 8000cfa:	3b04      	subs	r3, #4
 8000cfc:	0112      	lsls	r2, r2, #4
 8000cfe:	b2d2      	uxtb	r2, r2
 8000d00:	440b      	add	r3, r1
 8000d02:	761a      	strb	r2, [r3, #24]
}
 8000d04:	bf00      	nop
 8000d06:	370c      	adds	r7, #12
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr
 8000d10:	e000e100 	.word	0xe000e100
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b089      	sub	sp, #36	; 0x24
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	60f8      	str	r0, [r7, #12]
 8000d20:	60b9      	str	r1, [r7, #8]
 8000d22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	f003 0307 	and.w	r3, r3, #7
 8000d2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d2c:	69fb      	ldr	r3, [r7, #28]
 8000d2e:	f1c3 0307 	rsb	r3, r3, #7
 8000d32:	2b04      	cmp	r3, #4
 8000d34:	bf28      	it	cs
 8000d36:	2304      	movcs	r3, #4
 8000d38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	3304      	adds	r3, #4
 8000d3e:	2b06      	cmp	r3, #6
 8000d40:	d902      	bls.n	8000d48 <NVIC_EncodePriority+0x30>
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	3b03      	subs	r3, #3
 8000d46:	e000      	b.n	8000d4a <NVIC_EncodePriority+0x32>
 8000d48:	2300      	movs	r3, #0
 8000d4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d50:	69bb      	ldr	r3, [r7, #24]
 8000d52:	fa02 f303 	lsl.w	r3, r2, r3
 8000d56:	43da      	mvns	r2, r3
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	401a      	ands	r2, r3
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d60:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	fa01 f303 	lsl.w	r3, r1, r3
 8000d6a:	43d9      	mvns	r1, r3
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d70:	4313      	orrs	r3, r2
         );
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3724      	adds	r7, #36	; 0x24
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
	...

08000d80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	3b01      	subs	r3, #1
 8000d8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d90:	d301      	bcc.n	8000d96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d92:	2301      	movs	r3, #1
 8000d94:	e00f      	b.n	8000db6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d96:	4a0a      	ldr	r2, [pc, #40]	; (8000dc0 <SysTick_Config+0x40>)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	3b01      	subs	r3, #1
 8000d9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d9e:	210f      	movs	r1, #15
 8000da0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000da4:	f7ff ff8e 	bl	8000cc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000da8:	4b05      	ldr	r3, [pc, #20]	; (8000dc0 <SysTick_Config+0x40>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dae:	4b04      	ldr	r3, [pc, #16]	; (8000dc0 <SysTick_Config+0x40>)
 8000db0:	2207      	movs	r2, #7
 8000db2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000db4:	2300      	movs	r3, #0
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	e000e010 	.word	0xe000e010

08000dc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	f7ff ff47 	bl	8000c60 <__NVIC_SetPriorityGrouping>
}
 8000dd2:	bf00      	nop
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}

08000dda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	b086      	sub	sp, #24
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	4603      	mov	r3, r0
 8000de2:	60b9      	str	r1, [r7, #8]
 8000de4:	607a      	str	r2, [r7, #4]
 8000de6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000de8:	2300      	movs	r3, #0
 8000dea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000dec:	f7ff ff5c 	bl	8000ca8 <__NVIC_GetPriorityGrouping>
 8000df0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000df2:	687a      	ldr	r2, [r7, #4]
 8000df4:	68b9      	ldr	r1, [r7, #8]
 8000df6:	6978      	ldr	r0, [r7, #20]
 8000df8:	f7ff ff8e 	bl	8000d18 <NVIC_EncodePriority>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e02:	4611      	mov	r1, r2
 8000e04:	4618      	mov	r0, r3
 8000e06:	f7ff ff5d 	bl	8000cc4 <__NVIC_SetPriority>
}
 8000e0a:	bf00      	nop
 8000e0c:	3718      	adds	r7, #24
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b082      	sub	sp, #8
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	f7ff ffb0 	bl	8000d80 <SysTick_Config>
 8000e20:	4603      	mov	r3, r0
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
	...

08000e2c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000e30:	4b0d      	ldr	r3, [pc, #52]	; (8000e68 <HAL_PWREx_GetVoltageRange+0x3c>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000e38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e3c:	d102      	bne.n	8000e44 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8000e3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e42:	e00b      	b.n	8000e5c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8000e44:	4b08      	ldr	r3, [pc, #32]	; (8000e68 <HAL_PWREx_GetVoltageRange+0x3c>)
 8000e46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e52:	d102      	bne.n	8000e5a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8000e54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e58:	e000      	b.n	8000e5c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8000e5a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	40007000 	.word	0x40007000

08000e6c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b085      	sub	sp, #20
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d141      	bne.n	8000efe <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000e7a:	4b4b      	ldr	r3, [pc, #300]	; (8000fa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000e82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e86:	d131      	bne.n	8000eec <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000e88:	4b47      	ldr	r3, [pc, #284]	; (8000fa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e8e:	4a46      	ldr	r2, [pc, #280]	; (8000fa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000e94:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e98:	4b43      	ldr	r3, [pc, #268]	; (8000fa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000ea0:	4a41      	ldr	r2, [pc, #260]	; (8000fa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ea2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ea6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8000ea8:	4b40      	ldr	r3, [pc, #256]	; (8000fac <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	2232      	movs	r2, #50	; 0x32
 8000eae:	fb02 f303 	mul.w	r3, r2, r3
 8000eb2:	4a3f      	ldr	r2, [pc, #252]	; (8000fb0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8000eb8:	0c9b      	lsrs	r3, r3, #18
 8000eba:	3301      	adds	r3, #1
 8000ebc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ebe:	e002      	b.n	8000ec6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	3b01      	subs	r3, #1
 8000ec4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000ec6:	4b38      	ldr	r3, [pc, #224]	; (8000fa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ec8:	695b      	ldr	r3, [r3, #20]
 8000eca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ece:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ed2:	d102      	bne.n	8000eda <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d1f2      	bne.n	8000ec0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000eda:	4b33      	ldr	r3, [pc, #204]	; (8000fa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000edc:	695b      	ldr	r3, [r3, #20]
 8000ede:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ee2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ee6:	d158      	bne.n	8000f9a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000ee8:	2303      	movs	r3, #3
 8000eea:	e057      	b.n	8000f9c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000eec:	4b2e      	ldr	r3, [pc, #184]	; (8000fa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000eee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000ef2:	4a2d      	ldr	r2, [pc, #180]	; (8000fa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ef4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000ef8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000efc:	e04d      	b.n	8000f9a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f04:	d141      	bne.n	8000f8a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000f06:	4b28      	ldr	r3, [pc, #160]	; (8000fa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000f0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f12:	d131      	bne.n	8000f78 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000f14:	4b24      	ldr	r3, [pc, #144]	; (8000fa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000f1a:	4a23      	ldr	r2, [pc, #140]	; (8000fa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f20:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f24:	4b20      	ldr	r3, [pc, #128]	; (8000fa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000f2c:	4a1e      	ldr	r2, [pc, #120]	; (8000fa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f32:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8000f34:	4b1d      	ldr	r3, [pc, #116]	; (8000fac <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	2232      	movs	r2, #50	; 0x32
 8000f3a:	fb02 f303 	mul.w	r3, r2, r3
 8000f3e:	4a1c      	ldr	r2, [pc, #112]	; (8000fb0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000f40:	fba2 2303 	umull	r2, r3, r2, r3
 8000f44:	0c9b      	lsrs	r3, r3, #18
 8000f46:	3301      	adds	r3, #1
 8000f48:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f4a:	e002      	b.n	8000f52 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	3b01      	subs	r3, #1
 8000f50:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f52:	4b15      	ldr	r3, [pc, #84]	; (8000fa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f54:	695b      	ldr	r3, [r3, #20]
 8000f56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f5e:	d102      	bne.n	8000f66 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d1f2      	bne.n	8000f4c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000f66:	4b10      	ldr	r3, [pc, #64]	; (8000fa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f68:	695b      	ldr	r3, [r3, #20]
 8000f6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f72:	d112      	bne.n	8000f9a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000f74:	2303      	movs	r3, #3
 8000f76:	e011      	b.n	8000f9c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000f78:	4b0b      	ldr	r3, [pc, #44]	; (8000fa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000f7e:	4a0a      	ldr	r2, [pc, #40]	; (8000fa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f84:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000f88:	e007      	b.n	8000f9a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f8a:	4b07      	ldr	r3, [pc, #28]	; (8000fa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000f92:	4a05      	ldr	r2, [pc, #20]	; (8000fa8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f94:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f98:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000f9a:	2300      	movs	r3, #0
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3714      	adds	r7, #20
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	40007000 	.word	0x40007000
 8000fac:	20000008 	.word	0x20000008
 8000fb0:	431bde83 	.word	0x431bde83

08000fb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b088      	sub	sp, #32
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d102      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	f000 bc08 	b.w	80017d8 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000fc8:	4b96      	ldr	r3, [pc, #600]	; (8001224 <HAL_RCC_OscConfig+0x270>)
 8000fca:	689b      	ldr	r3, [r3, #8]
 8000fcc:	f003 030c 	and.w	r3, r3, #12
 8000fd0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000fd2:	4b94      	ldr	r3, [pc, #592]	; (8001224 <HAL_RCC_OscConfig+0x270>)
 8000fd4:	68db      	ldr	r3, [r3, #12]
 8000fd6:	f003 0303 	and.w	r3, r3, #3
 8000fda:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f003 0310 	and.w	r3, r3, #16
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	f000 80e4 	beq.w	80011b2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000fea:	69bb      	ldr	r3, [r7, #24]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d007      	beq.n	8001000 <HAL_RCC_OscConfig+0x4c>
 8000ff0:	69bb      	ldr	r3, [r7, #24]
 8000ff2:	2b0c      	cmp	r3, #12
 8000ff4:	f040 808b 	bne.w	800110e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	f040 8087 	bne.w	800110e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001000:	4b88      	ldr	r3, [pc, #544]	; (8001224 <HAL_RCC_OscConfig+0x270>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f003 0302 	and.w	r3, r3, #2
 8001008:	2b00      	cmp	r3, #0
 800100a:	d005      	beq.n	8001018 <HAL_RCC_OscConfig+0x64>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	699b      	ldr	r3, [r3, #24]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d101      	bne.n	8001018 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001014:	2301      	movs	r3, #1
 8001016:	e3df      	b.n	80017d8 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6a1a      	ldr	r2, [r3, #32]
 800101c:	4b81      	ldr	r3, [pc, #516]	; (8001224 <HAL_RCC_OscConfig+0x270>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f003 0308 	and.w	r3, r3, #8
 8001024:	2b00      	cmp	r3, #0
 8001026:	d004      	beq.n	8001032 <HAL_RCC_OscConfig+0x7e>
 8001028:	4b7e      	ldr	r3, [pc, #504]	; (8001224 <HAL_RCC_OscConfig+0x270>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001030:	e005      	b.n	800103e <HAL_RCC_OscConfig+0x8a>
 8001032:	4b7c      	ldr	r3, [pc, #496]	; (8001224 <HAL_RCC_OscConfig+0x270>)
 8001034:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001038:	091b      	lsrs	r3, r3, #4
 800103a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800103e:	4293      	cmp	r3, r2
 8001040:	d223      	bcs.n	800108a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6a1b      	ldr	r3, [r3, #32]
 8001046:	4618      	mov	r0, r3
 8001048:	f000 fd94 	bl	8001b74 <RCC_SetFlashLatencyFromMSIRange>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	e3c0      	b.n	80017d8 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001056:	4b73      	ldr	r3, [pc, #460]	; (8001224 <HAL_RCC_OscConfig+0x270>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a72      	ldr	r2, [pc, #456]	; (8001224 <HAL_RCC_OscConfig+0x270>)
 800105c:	f043 0308 	orr.w	r3, r3, #8
 8001060:	6013      	str	r3, [r2, #0]
 8001062:	4b70      	ldr	r3, [pc, #448]	; (8001224 <HAL_RCC_OscConfig+0x270>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6a1b      	ldr	r3, [r3, #32]
 800106e:	496d      	ldr	r1, [pc, #436]	; (8001224 <HAL_RCC_OscConfig+0x270>)
 8001070:	4313      	orrs	r3, r2
 8001072:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001074:	4b6b      	ldr	r3, [pc, #428]	; (8001224 <HAL_RCC_OscConfig+0x270>)
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	69db      	ldr	r3, [r3, #28]
 8001080:	021b      	lsls	r3, r3, #8
 8001082:	4968      	ldr	r1, [pc, #416]	; (8001224 <HAL_RCC_OscConfig+0x270>)
 8001084:	4313      	orrs	r3, r2
 8001086:	604b      	str	r3, [r1, #4]
 8001088:	e025      	b.n	80010d6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800108a:	4b66      	ldr	r3, [pc, #408]	; (8001224 <HAL_RCC_OscConfig+0x270>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a65      	ldr	r2, [pc, #404]	; (8001224 <HAL_RCC_OscConfig+0x270>)
 8001090:	f043 0308 	orr.w	r3, r3, #8
 8001094:	6013      	str	r3, [r2, #0]
 8001096:	4b63      	ldr	r3, [pc, #396]	; (8001224 <HAL_RCC_OscConfig+0x270>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6a1b      	ldr	r3, [r3, #32]
 80010a2:	4960      	ldr	r1, [pc, #384]	; (8001224 <HAL_RCC_OscConfig+0x270>)
 80010a4:	4313      	orrs	r3, r2
 80010a6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010a8:	4b5e      	ldr	r3, [pc, #376]	; (8001224 <HAL_RCC_OscConfig+0x270>)
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	69db      	ldr	r3, [r3, #28]
 80010b4:	021b      	lsls	r3, r3, #8
 80010b6:	495b      	ldr	r1, [pc, #364]	; (8001224 <HAL_RCC_OscConfig+0x270>)
 80010b8:	4313      	orrs	r3, r2
 80010ba:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80010bc:	69bb      	ldr	r3, [r7, #24]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d109      	bne.n	80010d6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6a1b      	ldr	r3, [r3, #32]
 80010c6:	4618      	mov	r0, r3
 80010c8:	f000 fd54 	bl	8001b74 <RCC_SetFlashLatencyFromMSIRange>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	e380      	b.n	80017d8 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80010d6:	f000 fcc1 	bl	8001a5c <HAL_RCC_GetSysClockFreq>
 80010da:	4602      	mov	r2, r0
 80010dc:	4b51      	ldr	r3, [pc, #324]	; (8001224 <HAL_RCC_OscConfig+0x270>)
 80010de:	689b      	ldr	r3, [r3, #8]
 80010e0:	091b      	lsrs	r3, r3, #4
 80010e2:	f003 030f 	and.w	r3, r3, #15
 80010e6:	4950      	ldr	r1, [pc, #320]	; (8001228 <HAL_RCC_OscConfig+0x274>)
 80010e8:	5ccb      	ldrb	r3, [r1, r3]
 80010ea:	f003 031f 	and.w	r3, r3, #31
 80010ee:	fa22 f303 	lsr.w	r3, r2, r3
 80010f2:	4a4e      	ldr	r2, [pc, #312]	; (800122c <HAL_RCC_OscConfig+0x278>)
 80010f4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80010f6:	4b4e      	ldr	r3, [pc, #312]	; (8001230 <HAL_RCC_OscConfig+0x27c>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff fd54 	bl	8000ba8 <HAL_InitTick>
 8001100:	4603      	mov	r3, r0
 8001102:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001104:	7bfb      	ldrb	r3, [r7, #15]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d052      	beq.n	80011b0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800110a:	7bfb      	ldrb	r3, [r7, #15]
 800110c:	e364      	b.n	80017d8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	699b      	ldr	r3, [r3, #24]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d032      	beq.n	800117c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001116:	4b43      	ldr	r3, [pc, #268]	; (8001224 <HAL_RCC_OscConfig+0x270>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a42      	ldr	r2, [pc, #264]	; (8001224 <HAL_RCC_OscConfig+0x270>)
 800111c:	f043 0301 	orr.w	r3, r3, #1
 8001120:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001122:	f7ff fd91 	bl	8000c48 <HAL_GetTick>
 8001126:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001128:	e008      	b.n	800113c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800112a:	f7ff fd8d 	bl	8000c48 <HAL_GetTick>
 800112e:	4602      	mov	r2, r0
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	1ad3      	subs	r3, r2, r3
 8001134:	2b02      	cmp	r3, #2
 8001136:	d901      	bls.n	800113c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001138:	2303      	movs	r3, #3
 800113a:	e34d      	b.n	80017d8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800113c:	4b39      	ldr	r3, [pc, #228]	; (8001224 <HAL_RCC_OscConfig+0x270>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f003 0302 	and.w	r3, r3, #2
 8001144:	2b00      	cmp	r3, #0
 8001146:	d0f0      	beq.n	800112a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001148:	4b36      	ldr	r3, [pc, #216]	; (8001224 <HAL_RCC_OscConfig+0x270>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a35      	ldr	r2, [pc, #212]	; (8001224 <HAL_RCC_OscConfig+0x270>)
 800114e:	f043 0308 	orr.w	r3, r3, #8
 8001152:	6013      	str	r3, [r2, #0]
 8001154:	4b33      	ldr	r3, [pc, #204]	; (8001224 <HAL_RCC_OscConfig+0x270>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6a1b      	ldr	r3, [r3, #32]
 8001160:	4930      	ldr	r1, [pc, #192]	; (8001224 <HAL_RCC_OscConfig+0x270>)
 8001162:	4313      	orrs	r3, r2
 8001164:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001166:	4b2f      	ldr	r3, [pc, #188]	; (8001224 <HAL_RCC_OscConfig+0x270>)
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	69db      	ldr	r3, [r3, #28]
 8001172:	021b      	lsls	r3, r3, #8
 8001174:	492b      	ldr	r1, [pc, #172]	; (8001224 <HAL_RCC_OscConfig+0x270>)
 8001176:	4313      	orrs	r3, r2
 8001178:	604b      	str	r3, [r1, #4]
 800117a:	e01a      	b.n	80011b2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800117c:	4b29      	ldr	r3, [pc, #164]	; (8001224 <HAL_RCC_OscConfig+0x270>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a28      	ldr	r2, [pc, #160]	; (8001224 <HAL_RCC_OscConfig+0x270>)
 8001182:	f023 0301 	bic.w	r3, r3, #1
 8001186:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001188:	f7ff fd5e 	bl	8000c48 <HAL_GetTick>
 800118c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800118e:	e008      	b.n	80011a2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001190:	f7ff fd5a 	bl	8000c48 <HAL_GetTick>
 8001194:	4602      	mov	r2, r0
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	2b02      	cmp	r3, #2
 800119c:	d901      	bls.n	80011a2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800119e:	2303      	movs	r3, #3
 80011a0:	e31a      	b.n	80017d8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80011a2:	4b20      	ldr	r3, [pc, #128]	; (8001224 <HAL_RCC_OscConfig+0x270>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d1f0      	bne.n	8001190 <HAL_RCC_OscConfig+0x1dc>
 80011ae:	e000      	b.n	80011b2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011b0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d073      	beq.n	80012a6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80011be:	69bb      	ldr	r3, [r7, #24]
 80011c0:	2b08      	cmp	r3, #8
 80011c2:	d005      	beq.n	80011d0 <HAL_RCC_OscConfig+0x21c>
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	2b0c      	cmp	r3, #12
 80011c8:	d10e      	bne.n	80011e8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	2b03      	cmp	r3, #3
 80011ce:	d10b      	bne.n	80011e8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011d0:	4b14      	ldr	r3, [pc, #80]	; (8001224 <HAL_RCC_OscConfig+0x270>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d063      	beq.n	80012a4 <HAL_RCC_OscConfig+0x2f0>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d15f      	bne.n	80012a4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80011e4:	2301      	movs	r3, #1
 80011e6:	e2f7      	b.n	80017d8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011f0:	d106      	bne.n	8001200 <HAL_RCC_OscConfig+0x24c>
 80011f2:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <HAL_RCC_OscConfig+0x270>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a0b      	ldr	r2, [pc, #44]	; (8001224 <HAL_RCC_OscConfig+0x270>)
 80011f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011fc:	6013      	str	r3, [r2, #0]
 80011fe:	e025      	b.n	800124c <HAL_RCC_OscConfig+0x298>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001208:	d114      	bne.n	8001234 <HAL_RCC_OscConfig+0x280>
 800120a:	4b06      	ldr	r3, [pc, #24]	; (8001224 <HAL_RCC_OscConfig+0x270>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a05      	ldr	r2, [pc, #20]	; (8001224 <HAL_RCC_OscConfig+0x270>)
 8001210:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001214:	6013      	str	r3, [r2, #0]
 8001216:	4b03      	ldr	r3, [pc, #12]	; (8001224 <HAL_RCC_OscConfig+0x270>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a02      	ldr	r2, [pc, #8]	; (8001224 <HAL_RCC_OscConfig+0x270>)
 800121c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001220:	6013      	str	r3, [r2, #0]
 8001222:	e013      	b.n	800124c <HAL_RCC_OscConfig+0x298>
 8001224:	40021000 	.word	0x40021000
 8001228:	080044a8 	.word	0x080044a8
 800122c:	20000008 	.word	0x20000008
 8001230:	20000000 	.word	0x20000000
 8001234:	4ba0      	ldr	r3, [pc, #640]	; (80014b8 <HAL_RCC_OscConfig+0x504>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a9f      	ldr	r2, [pc, #636]	; (80014b8 <HAL_RCC_OscConfig+0x504>)
 800123a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800123e:	6013      	str	r3, [r2, #0]
 8001240:	4b9d      	ldr	r3, [pc, #628]	; (80014b8 <HAL_RCC_OscConfig+0x504>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a9c      	ldr	r2, [pc, #624]	; (80014b8 <HAL_RCC_OscConfig+0x504>)
 8001246:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800124a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d013      	beq.n	800127c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001254:	f7ff fcf8 	bl	8000c48 <HAL_GetTick>
 8001258:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800125a:	e008      	b.n	800126e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800125c:	f7ff fcf4 	bl	8000c48 <HAL_GetTick>
 8001260:	4602      	mov	r2, r0
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	2b64      	cmp	r3, #100	; 0x64
 8001268:	d901      	bls.n	800126e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800126a:	2303      	movs	r3, #3
 800126c:	e2b4      	b.n	80017d8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800126e:	4b92      	ldr	r3, [pc, #584]	; (80014b8 <HAL_RCC_OscConfig+0x504>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d0f0      	beq.n	800125c <HAL_RCC_OscConfig+0x2a8>
 800127a:	e014      	b.n	80012a6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800127c:	f7ff fce4 	bl	8000c48 <HAL_GetTick>
 8001280:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001282:	e008      	b.n	8001296 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001284:	f7ff fce0 	bl	8000c48 <HAL_GetTick>
 8001288:	4602      	mov	r2, r0
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	2b64      	cmp	r3, #100	; 0x64
 8001290:	d901      	bls.n	8001296 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001292:	2303      	movs	r3, #3
 8001294:	e2a0      	b.n	80017d8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001296:	4b88      	ldr	r3, [pc, #544]	; (80014b8 <HAL_RCC_OscConfig+0x504>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d1f0      	bne.n	8001284 <HAL_RCC_OscConfig+0x2d0>
 80012a2:	e000      	b.n	80012a6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f003 0302 	and.w	r3, r3, #2
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d060      	beq.n	8001374 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80012b2:	69bb      	ldr	r3, [r7, #24]
 80012b4:	2b04      	cmp	r3, #4
 80012b6:	d005      	beq.n	80012c4 <HAL_RCC_OscConfig+0x310>
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	2b0c      	cmp	r3, #12
 80012bc:	d119      	bne.n	80012f2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	d116      	bne.n	80012f2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012c4:	4b7c      	ldr	r3, [pc, #496]	; (80014b8 <HAL_RCC_OscConfig+0x504>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d005      	beq.n	80012dc <HAL_RCC_OscConfig+0x328>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d101      	bne.n	80012dc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80012d8:	2301      	movs	r3, #1
 80012da:	e27d      	b.n	80017d8 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012dc:	4b76      	ldr	r3, [pc, #472]	; (80014b8 <HAL_RCC_OscConfig+0x504>)
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	691b      	ldr	r3, [r3, #16]
 80012e8:	061b      	lsls	r3, r3, #24
 80012ea:	4973      	ldr	r1, [pc, #460]	; (80014b8 <HAL_RCC_OscConfig+0x504>)
 80012ec:	4313      	orrs	r3, r2
 80012ee:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012f0:	e040      	b.n	8001374 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	68db      	ldr	r3, [r3, #12]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d023      	beq.n	8001342 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012fa:	4b6f      	ldr	r3, [pc, #444]	; (80014b8 <HAL_RCC_OscConfig+0x504>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a6e      	ldr	r2, [pc, #440]	; (80014b8 <HAL_RCC_OscConfig+0x504>)
 8001300:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001304:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001306:	f7ff fc9f 	bl	8000c48 <HAL_GetTick>
 800130a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800130c:	e008      	b.n	8001320 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800130e:	f7ff fc9b 	bl	8000c48 <HAL_GetTick>
 8001312:	4602      	mov	r2, r0
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	2b02      	cmp	r3, #2
 800131a:	d901      	bls.n	8001320 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800131c:	2303      	movs	r3, #3
 800131e:	e25b      	b.n	80017d8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001320:	4b65      	ldr	r3, [pc, #404]	; (80014b8 <HAL_RCC_OscConfig+0x504>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001328:	2b00      	cmp	r3, #0
 800132a:	d0f0      	beq.n	800130e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800132c:	4b62      	ldr	r3, [pc, #392]	; (80014b8 <HAL_RCC_OscConfig+0x504>)
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	691b      	ldr	r3, [r3, #16]
 8001338:	061b      	lsls	r3, r3, #24
 800133a:	495f      	ldr	r1, [pc, #380]	; (80014b8 <HAL_RCC_OscConfig+0x504>)
 800133c:	4313      	orrs	r3, r2
 800133e:	604b      	str	r3, [r1, #4]
 8001340:	e018      	b.n	8001374 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001342:	4b5d      	ldr	r3, [pc, #372]	; (80014b8 <HAL_RCC_OscConfig+0x504>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a5c      	ldr	r2, [pc, #368]	; (80014b8 <HAL_RCC_OscConfig+0x504>)
 8001348:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800134c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800134e:	f7ff fc7b 	bl	8000c48 <HAL_GetTick>
 8001352:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001354:	e008      	b.n	8001368 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001356:	f7ff fc77 	bl	8000c48 <HAL_GetTick>
 800135a:	4602      	mov	r2, r0
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	2b02      	cmp	r3, #2
 8001362:	d901      	bls.n	8001368 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001364:	2303      	movs	r3, #3
 8001366:	e237      	b.n	80017d8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001368:	4b53      	ldr	r3, [pc, #332]	; (80014b8 <HAL_RCC_OscConfig+0x504>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001370:	2b00      	cmp	r3, #0
 8001372:	d1f0      	bne.n	8001356 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f003 0308 	and.w	r3, r3, #8
 800137c:	2b00      	cmp	r3, #0
 800137e:	d03c      	beq.n	80013fa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	695b      	ldr	r3, [r3, #20]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d01c      	beq.n	80013c2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001388:	4b4b      	ldr	r3, [pc, #300]	; (80014b8 <HAL_RCC_OscConfig+0x504>)
 800138a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800138e:	4a4a      	ldr	r2, [pc, #296]	; (80014b8 <HAL_RCC_OscConfig+0x504>)
 8001390:	f043 0301 	orr.w	r3, r3, #1
 8001394:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001398:	f7ff fc56 	bl	8000c48 <HAL_GetTick>
 800139c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800139e:	e008      	b.n	80013b2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013a0:	f7ff fc52 	bl	8000c48 <HAL_GetTick>
 80013a4:	4602      	mov	r2, r0
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d901      	bls.n	80013b2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e212      	b.n	80017d8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013b2:	4b41      	ldr	r3, [pc, #260]	; (80014b8 <HAL_RCC_OscConfig+0x504>)
 80013b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013b8:	f003 0302 	and.w	r3, r3, #2
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d0ef      	beq.n	80013a0 <HAL_RCC_OscConfig+0x3ec>
 80013c0:	e01b      	b.n	80013fa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013c2:	4b3d      	ldr	r3, [pc, #244]	; (80014b8 <HAL_RCC_OscConfig+0x504>)
 80013c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013c8:	4a3b      	ldr	r2, [pc, #236]	; (80014b8 <HAL_RCC_OscConfig+0x504>)
 80013ca:	f023 0301 	bic.w	r3, r3, #1
 80013ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013d2:	f7ff fc39 	bl	8000c48 <HAL_GetTick>
 80013d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013d8:	e008      	b.n	80013ec <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013da:	f7ff fc35 	bl	8000c48 <HAL_GetTick>
 80013de:	4602      	mov	r2, r0
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d901      	bls.n	80013ec <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80013e8:	2303      	movs	r3, #3
 80013ea:	e1f5      	b.n	80017d8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013ec:	4b32      	ldr	r3, [pc, #200]	; (80014b8 <HAL_RCC_OscConfig+0x504>)
 80013ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d1ef      	bne.n	80013da <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 0304 	and.w	r3, r3, #4
 8001402:	2b00      	cmp	r3, #0
 8001404:	f000 80a6 	beq.w	8001554 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001408:	2300      	movs	r3, #0
 800140a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800140c:	4b2a      	ldr	r3, [pc, #168]	; (80014b8 <HAL_RCC_OscConfig+0x504>)
 800140e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001410:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d10d      	bne.n	8001434 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001418:	4b27      	ldr	r3, [pc, #156]	; (80014b8 <HAL_RCC_OscConfig+0x504>)
 800141a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800141c:	4a26      	ldr	r2, [pc, #152]	; (80014b8 <HAL_RCC_OscConfig+0x504>)
 800141e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001422:	6593      	str	r3, [r2, #88]	; 0x58
 8001424:	4b24      	ldr	r3, [pc, #144]	; (80014b8 <HAL_RCC_OscConfig+0x504>)
 8001426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001428:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800142c:	60bb      	str	r3, [r7, #8]
 800142e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001430:	2301      	movs	r3, #1
 8001432:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001434:	4b21      	ldr	r3, [pc, #132]	; (80014bc <HAL_RCC_OscConfig+0x508>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800143c:	2b00      	cmp	r3, #0
 800143e:	d118      	bne.n	8001472 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001440:	4b1e      	ldr	r3, [pc, #120]	; (80014bc <HAL_RCC_OscConfig+0x508>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a1d      	ldr	r2, [pc, #116]	; (80014bc <HAL_RCC_OscConfig+0x508>)
 8001446:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800144a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800144c:	f7ff fbfc 	bl	8000c48 <HAL_GetTick>
 8001450:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001452:	e008      	b.n	8001466 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001454:	f7ff fbf8 	bl	8000c48 <HAL_GetTick>
 8001458:	4602      	mov	r2, r0
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	2b02      	cmp	r3, #2
 8001460:	d901      	bls.n	8001466 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001462:	2303      	movs	r3, #3
 8001464:	e1b8      	b.n	80017d8 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001466:	4b15      	ldr	r3, [pc, #84]	; (80014bc <HAL_RCC_OscConfig+0x508>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800146e:	2b00      	cmp	r3, #0
 8001470:	d0f0      	beq.n	8001454 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	2b01      	cmp	r3, #1
 8001478:	d108      	bne.n	800148c <HAL_RCC_OscConfig+0x4d8>
 800147a:	4b0f      	ldr	r3, [pc, #60]	; (80014b8 <HAL_RCC_OscConfig+0x504>)
 800147c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001480:	4a0d      	ldr	r2, [pc, #52]	; (80014b8 <HAL_RCC_OscConfig+0x504>)
 8001482:	f043 0301 	orr.w	r3, r3, #1
 8001486:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800148a:	e029      	b.n	80014e0 <HAL_RCC_OscConfig+0x52c>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	2b05      	cmp	r3, #5
 8001492:	d115      	bne.n	80014c0 <HAL_RCC_OscConfig+0x50c>
 8001494:	4b08      	ldr	r3, [pc, #32]	; (80014b8 <HAL_RCC_OscConfig+0x504>)
 8001496:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800149a:	4a07      	ldr	r2, [pc, #28]	; (80014b8 <HAL_RCC_OscConfig+0x504>)
 800149c:	f043 0304 	orr.w	r3, r3, #4
 80014a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014a4:	4b04      	ldr	r3, [pc, #16]	; (80014b8 <HAL_RCC_OscConfig+0x504>)
 80014a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014aa:	4a03      	ldr	r2, [pc, #12]	; (80014b8 <HAL_RCC_OscConfig+0x504>)
 80014ac:	f043 0301 	orr.w	r3, r3, #1
 80014b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014b4:	e014      	b.n	80014e0 <HAL_RCC_OscConfig+0x52c>
 80014b6:	bf00      	nop
 80014b8:	40021000 	.word	0x40021000
 80014bc:	40007000 	.word	0x40007000
 80014c0:	4b9d      	ldr	r3, [pc, #628]	; (8001738 <HAL_RCC_OscConfig+0x784>)
 80014c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014c6:	4a9c      	ldr	r2, [pc, #624]	; (8001738 <HAL_RCC_OscConfig+0x784>)
 80014c8:	f023 0301 	bic.w	r3, r3, #1
 80014cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014d0:	4b99      	ldr	r3, [pc, #612]	; (8001738 <HAL_RCC_OscConfig+0x784>)
 80014d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014d6:	4a98      	ldr	r2, [pc, #608]	; (8001738 <HAL_RCC_OscConfig+0x784>)
 80014d8:	f023 0304 	bic.w	r3, r3, #4
 80014dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d016      	beq.n	8001516 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014e8:	f7ff fbae 	bl	8000c48 <HAL_GetTick>
 80014ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80014ee:	e00a      	b.n	8001506 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014f0:	f7ff fbaa 	bl	8000c48 <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80014fe:	4293      	cmp	r3, r2
 8001500:	d901      	bls.n	8001506 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e168      	b.n	80017d8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001506:	4b8c      	ldr	r3, [pc, #560]	; (8001738 <HAL_RCC_OscConfig+0x784>)
 8001508:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800150c:	f003 0302 	and.w	r3, r3, #2
 8001510:	2b00      	cmp	r3, #0
 8001512:	d0ed      	beq.n	80014f0 <HAL_RCC_OscConfig+0x53c>
 8001514:	e015      	b.n	8001542 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001516:	f7ff fb97 	bl	8000c48 <HAL_GetTick>
 800151a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800151c:	e00a      	b.n	8001534 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800151e:	f7ff fb93 	bl	8000c48 <HAL_GetTick>
 8001522:	4602      	mov	r2, r0
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	f241 3288 	movw	r2, #5000	; 0x1388
 800152c:	4293      	cmp	r3, r2
 800152e:	d901      	bls.n	8001534 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001530:	2303      	movs	r3, #3
 8001532:	e151      	b.n	80017d8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001534:	4b80      	ldr	r3, [pc, #512]	; (8001738 <HAL_RCC_OscConfig+0x784>)
 8001536:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800153a:	f003 0302 	and.w	r3, r3, #2
 800153e:	2b00      	cmp	r3, #0
 8001540:	d1ed      	bne.n	800151e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001542:	7ffb      	ldrb	r3, [r7, #31]
 8001544:	2b01      	cmp	r3, #1
 8001546:	d105      	bne.n	8001554 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001548:	4b7b      	ldr	r3, [pc, #492]	; (8001738 <HAL_RCC_OscConfig+0x784>)
 800154a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800154c:	4a7a      	ldr	r2, [pc, #488]	; (8001738 <HAL_RCC_OscConfig+0x784>)
 800154e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001552:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 0320 	and.w	r3, r3, #32
 800155c:	2b00      	cmp	r3, #0
 800155e:	d03c      	beq.n	80015da <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001564:	2b00      	cmp	r3, #0
 8001566:	d01c      	beq.n	80015a2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001568:	4b73      	ldr	r3, [pc, #460]	; (8001738 <HAL_RCC_OscConfig+0x784>)
 800156a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800156e:	4a72      	ldr	r2, [pc, #456]	; (8001738 <HAL_RCC_OscConfig+0x784>)
 8001570:	f043 0301 	orr.w	r3, r3, #1
 8001574:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001578:	f7ff fb66 	bl	8000c48 <HAL_GetTick>
 800157c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800157e:	e008      	b.n	8001592 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001580:	f7ff fb62 	bl	8000c48 <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	2b02      	cmp	r3, #2
 800158c:	d901      	bls.n	8001592 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e122      	b.n	80017d8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001592:	4b69      	ldr	r3, [pc, #420]	; (8001738 <HAL_RCC_OscConfig+0x784>)
 8001594:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001598:	f003 0302 	and.w	r3, r3, #2
 800159c:	2b00      	cmp	r3, #0
 800159e:	d0ef      	beq.n	8001580 <HAL_RCC_OscConfig+0x5cc>
 80015a0:	e01b      	b.n	80015da <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80015a2:	4b65      	ldr	r3, [pc, #404]	; (8001738 <HAL_RCC_OscConfig+0x784>)
 80015a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80015a8:	4a63      	ldr	r2, [pc, #396]	; (8001738 <HAL_RCC_OscConfig+0x784>)
 80015aa:	f023 0301 	bic.w	r3, r3, #1
 80015ae:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015b2:	f7ff fb49 	bl	8000c48 <HAL_GetTick>
 80015b6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80015b8:	e008      	b.n	80015cc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015ba:	f7ff fb45 	bl	8000c48 <HAL_GetTick>
 80015be:	4602      	mov	r2, r0
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d901      	bls.n	80015cc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80015c8:	2303      	movs	r3, #3
 80015ca:	e105      	b.n	80017d8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80015cc:	4b5a      	ldr	r3, [pc, #360]	; (8001738 <HAL_RCC_OscConfig+0x784>)
 80015ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80015d2:	f003 0302 	and.w	r3, r3, #2
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d1ef      	bne.n	80015ba <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015de:	2b00      	cmp	r3, #0
 80015e0:	f000 80f9 	beq.w	80017d6 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	f040 80cf 	bne.w	800178c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80015ee:	4b52      	ldr	r3, [pc, #328]	; (8001738 <HAL_RCC_OscConfig+0x784>)
 80015f0:	68db      	ldr	r3, [r3, #12]
 80015f2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	f003 0203 	and.w	r2, r3, #3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015fe:	429a      	cmp	r2, r3
 8001600:	d12c      	bne.n	800165c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160c:	3b01      	subs	r3, #1
 800160e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001610:	429a      	cmp	r2, r3
 8001612:	d123      	bne.n	800165c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800161e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001620:	429a      	cmp	r2, r3
 8001622:	d11b      	bne.n	800165c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800162e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001630:	429a      	cmp	r2, r3
 8001632:	d113      	bne.n	800165c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800163e:	085b      	lsrs	r3, r3, #1
 8001640:	3b01      	subs	r3, #1
 8001642:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001644:	429a      	cmp	r2, r3
 8001646:	d109      	bne.n	800165c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001652:	085b      	lsrs	r3, r3, #1
 8001654:	3b01      	subs	r3, #1
 8001656:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001658:	429a      	cmp	r2, r3
 800165a:	d071      	beq.n	8001740 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	2b0c      	cmp	r3, #12
 8001660:	d068      	beq.n	8001734 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001662:	4b35      	ldr	r3, [pc, #212]	; (8001738 <HAL_RCC_OscConfig+0x784>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d105      	bne.n	800167a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800166e:	4b32      	ldr	r3, [pc, #200]	; (8001738 <HAL_RCC_OscConfig+0x784>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e0ac      	b.n	80017d8 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800167e:	4b2e      	ldr	r3, [pc, #184]	; (8001738 <HAL_RCC_OscConfig+0x784>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a2d      	ldr	r2, [pc, #180]	; (8001738 <HAL_RCC_OscConfig+0x784>)
 8001684:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001688:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800168a:	f7ff fadd 	bl	8000c48 <HAL_GetTick>
 800168e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001690:	e008      	b.n	80016a4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001692:	f7ff fad9 	bl	8000c48 <HAL_GetTick>
 8001696:	4602      	mov	r2, r0
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	2b02      	cmp	r3, #2
 800169e:	d901      	bls.n	80016a4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80016a0:	2303      	movs	r3, #3
 80016a2:	e099      	b.n	80017d8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016a4:	4b24      	ldr	r3, [pc, #144]	; (8001738 <HAL_RCC_OscConfig+0x784>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d1f0      	bne.n	8001692 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016b0:	4b21      	ldr	r3, [pc, #132]	; (8001738 <HAL_RCC_OscConfig+0x784>)
 80016b2:	68da      	ldr	r2, [r3, #12]
 80016b4:	4b21      	ldr	r3, [pc, #132]	; (800173c <HAL_RCC_OscConfig+0x788>)
 80016b6:	4013      	ands	r3, r2
 80016b8:	687a      	ldr	r2, [r7, #4]
 80016ba:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80016c0:	3a01      	subs	r2, #1
 80016c2:	0112      	lsls	r2, r2, #4
 80016c4:	4311      	orrs	r1, r2
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80016ca:	0212      	lsls	r2, r2, #8
 80016cc:	4311      	orrs	r1, r2
 80016ce:	687a      	ldr	r2, [r7, #4]
 80016d0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80016d2:	0852      	lsrs	r2, r2, #1
 80016d4:	3a01      	subs	r2, #1
 80016d6:	0552      	lsls	r2, r2, #21
 80016d8:	4311      	orrs	r1, r2
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80016de:	0852      	lsrs	r2, r2, #1
 80016e0:	3a01      	subs	r2, #1
 80016e2:	0652      	lsls	r2, r2, #25
 80016e4:	4311      	orrs	r1, r2
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80016ea:	06d2      	lsls	r2, r2, #27
 80016ec:	430a      	orrs	r2, r1
 80016ee:	4912      	ldr	r1, [pc, #72]	; (8001738 <HAL_RCC_OscConfig+0x784>)
 80016f0:	4313      	orrs	r3, r2
 80016f2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80016f4:	4b10      	ldr	r3, [pc, #64]	; (8001738 <HAL_RCC_OscConfig+0x784>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a0f      	ldr	r2, [pc, #60]	; (8001738 <HAL_RCC_OscConfig+0x784>)
 80016fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016fe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001700:	4b0d      	ldr	r3, [pc, #52]	; (8001738 <HAL_RCC_OscConfig+0x784>)
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	4a0c      	ldr	r2, [pc, #48]	; (8001738 <HAL_RCC_OscConfig+0x784>)
 8001706:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800170a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800170c:	f7ff fa9c 	bl	8000c48 <HAL_GetTick>
 8001710:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001712:	e008      	b.n	8001726 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001714:	f7ff fa98 	bl	8000c48 <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	2b02      	cmp	r3, #2
 8001720:	d901      	bls.n	8001726 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e058      	b.n	80017d8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001726:	4b04      	ldr	r3, [pc, #16]	; (8001738 <HAL_RCC_OscConfig+0x784>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d0f0      	beq.n	8001714 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001732:	e050      	b.n	80017d6 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e04f      	b.n	80017d8 <HAL_RCC_OscConfig+0x824>
 8001738:	40021000 	.word	0x40021000
 800173c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001740:	4b27      	ldr	r3, [pc, #156]	; (80017e0 <HAL_RCC_OscConfig+0x82c>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001748:	2b00      	cmp	r3, #0
 800174a:	d144      	bne.n	80017d6 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800174c:	4b24      	ldr	r3, [pc, #144]	; (80017e0 <HAL_RCC_OscConfig+0x82c>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a23      	ldr	r2, [pc, #140]	; (80017e0 <HAL_RCC_OscConfig+0x82c>)
 8001752:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001756:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001758:	4b21      	ldr	r3, [pc, #132]	; (80017e0 <HAL_RCC_OscConfig+0x82c>)
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	4a20      	ldr	r2, [pc, #128]	; (80017e0 <HAL_RCC_OscConfig+0x82c>)
 800175e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001762:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001764:	f7ff fa70 	bl	8000c48 <HAL_GetTick>
 8001768:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800176a:	e008      	b.n	800177e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800176c:	f7ff fa6c 	bl	8000c48 <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	2b02      	cmp	r3, #2
 8001778:	d901      	bls.n	800177e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e02c      	b.n	80017d8 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800177e:	4b18      	ldr	r3, [pc, #96]	; (80017e0 <HAL_RCC_OscConfig+0x82c>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d0f0      	beq.n	800176c <HAL_RCC_OscConfig+0x7b8>
 800178a:	e024      	b.n	80017d6 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	2b0c      	cmp	r3, #12
 8001790:	d01f      	beq.n	80017d2 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001792:	4b13      	ldr	r3, [pc, #76]	; (80017e0 <HAL_RCC_OscConfig+0x82c>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a12      	ldr	r2, [pc, #72]	; (80017e0 <HAL_RCC_OscConfig+0x82c>)
 8001798:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800179c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800179e:	f7ff fa53 	bl	8000c48 <HAL_GetTick>
 80017a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017a4:	e008      	b.n	80017b8 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017a6:	f7ff fa4f 	bl	8000c48 <HAL_GetTick>
 80017aa:	4602      	mov	r2, r0
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d901      	bls.n	80017b8 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80017b4:	2303      	movs	r3, #3
 80017b6:	e00f      	b.n	80017d8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017b8:	4b09      	ldr	r3, [pc, #36]	; (80017e0 <HAL_RCC_OscConfig+0x82c>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d1f0      	bne.n	80017a6 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80017c4:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <HAL_RCC_OscConfig+0x82c>)
 80017c6:	68da      	ldr	r2, [r3, #12]
 80017c8:	4905      	ldr	r1, [pc, #20]	; (80017e0 <HAL_RCC_OscConfig+0x82c>)
 80017ca:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <HAL_RCC_OscConfig+0x830>)
 80017cc:	4013      	ands	r3, r2
 80017ce:	60cb      	str	r3, [r1, #12]
 80017d0:	e001      	b.n	80017d6 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e000      	b.n	80017d8 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80017d6:	2300      	movs	r3, #0
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3720      	adds	r7, #32
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	40021000 	.word	0x40021000
 80017e4:	feeefffc 	.word	0xfeeefffc

080017e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b086      	sub	sp, #24
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80017f2:	2300      	movs	r3, #0
 80017f4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d101      	bne.n	8001800 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e11d      	b.n	8001a3c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001800:	4b90      	ldr	r3, [pc, #576]	; (8001a44 <HAL_RCC_ClockConfig+0x25c>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 030f 	and.w	r3, r3, #15
 8001808:	683a      	ldr	r2, [r7, #0]
 800180a:	429a      	cmp	r2, r3
 800180c:	d910      	bls.n	8001830 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800180e:	4b8d      	ldr	r3, [pc, #564]	; (8001a44 <HAL_RCC_ClockConfig+0x25c>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f023 020f 	bic.w	r2, r3, #15
 8001816:	498b      	ldr	r1, [pc, #556]	; (8001a44 <HAL_RCC_ClockConfig+0x25c>)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	4313      	orrs	r3, r2
 800181c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800181e:	4b89      	ldr	r3, [pc, #548]	; (8001a44 <HAL_RCC_ClockConfig+0x25c>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 030f 	and.w	r3, r3, #15
 8001826:	683a      	ldr	r2, [r7, #0]
 8001828:	429a      	cmp	r2, r3
 800182a:	d001      	beq.n	8001830 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e105      	b.n	8001a3c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 0302 	and.w	r3, r3, #2
 8001838:	2b00      	cmp	r3, #0
 800183a:	d010      	beq.n	800185e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	689a      	ldr	r2, [r3, #8]
 8001840:	4b81      	ldr	r3, [pc, #516]	; (8001a48 <HAL_RCC_ClockConfig+0x260>)
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001848:	429a      	cmp	r2, r3
 800184a:	d908      	bls.n	800185e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800184c:	4b7e      	ldr	r3, [pc, #504]	; (8001a48 <HAL_RCC_ClockConfig+0x260>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	497b      	ldr	r1, [pc, #492]	; (8001a48 <HAL_RCC_ClockConfig+0x260>)
 800185a:	4313      	orrs	r3, r2
 800185c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0301 	and.w	r3, r3, #1
 8001866:	2b00      	cmp	r3, #0
 8001868:	d079      	beq.n	800195e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	2b03      	cmp	r3, #3
 8001870:	d11e      	bne.n	80018b0 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001872:	4b75      	ldr	r3, [pc, #468]	; (8001a48 <HAL_RCC_ClockConfig+0x260>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d101      	bne.n	8001882 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e0dc      	b.n	8001a3c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8001882:	f000 f9d1 	bl	8001c28 <RCC_GetSysClockFreqFromPLLSource>
 8001886:	4603      	mov	r3, r0
 8001888:	4a70      	ldr	r2, [pc, #448]	; (8001a4c <HAL_RCC_ClockConfig+0x264>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d946      	bls.n	800191c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800188e:	4b6e      	ldr	r3, [pc, #440]	; (8001a48 <HAL_RCC_ClockConfig+0x260>)
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d140      	bne.n	800191c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800189a:	4b6b      	ldr	r3, [pc, #428]	; (8001a48 <HAL_RCC_ClockConfig+0x260>)
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80018a2:	4a69      	ldr	r2, [pc, #420]	; (8001a48 <HAL_RCC_ClockConfig+0x260>)
 80018a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018a8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80018aa:	2380      	movs	r3, #128	; 0x80
 80018ac:	617b      	str	r3, [r7, #20]
 80018ae:	e035      	b.n	800191c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d107      	bne.n	80018c8 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018b8:	4b63      	ldr	r3, [pc, #396]	; (8001a48 <HAL_RCC_ClockConfig+0x260>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d115      	bne.n	80018f0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e0b9      	b.n	8001a3c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d107      	bne.n	80018e0 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018d0:	4b5d      	ldr	r3, [pc, #372]	; (8001a48 <HAL_RCC_ClockConfig+0x260>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0302 	and.w	r3, r3, #2
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d109      	bne.n	80018f0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e0ad      	b.n	8001a3c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018e0:	4b59      	ldr	r3, [pc, #356]	; (8001a48 <HAL_RCC_ClockConfig+0x260>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d101      	bne.n	80018f0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e0a5      	b.n	8001a3c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80018f0:	f000 f8b4 	bl	8001a5c <HAL_RCC_GetSysClockFreq>
 80018f4:	4603      	mov	r3, r0
 80018f6:	4a55      	ldr	r2, [pc, #340]	; (8001a4c <HAL_RCC_ClockConfig+0x264>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d90f      	bls.n	800191c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80018fc:	4b52      	ldr	r3, [pc, #328]	; (8001a48 <HAL_RCC_ClockConfig+0x260>)
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d109      	bne.n	800191c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001908:	4b4f      	ldr	r3, [pc, #316]	; (8001a48 <HAL_RCC_ClockConfig+0x260>)
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001910:	4a4d      	ldr	r2, [pc, #308]	; (8001a48 <HAL_RCC_ClockConfig+0x260>)
 8001912:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001916:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001918:	2380      	movs	r3, #128	; 0x80
 800191a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800191c:	4b4a      	ldr	r3, [pc, #296]	; (8001a48 <HAL_RCC_ClockConfig+0x260>)
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	f023 0203 	bic.w	r2, r3, #3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	4947      	ldr	r1, [pc, #284]	; (8001a48 <HAL_RCC_ClockConfig+0x260>)
 800192a:	4313      	orrs	r3, r2
 800192c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800192e:	f7ff f98b 	bl	8000c48 <HAL_GetTick>
 8001932:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001934:	e00a      	b.n	800194c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001936:	f7ff f987 	bl	8000c48 <HAL_GetTick>
 800193a:	4602      	mov	r2, r0
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	f241 3288 	movw	r2, #5000	; 0x1388
 8001944:	4293      	cmp	r3, r2
 8001946:	d901      	bls.n	800194c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8001948:	2303      	movs	r3, #3
 800194a:	e077      	b.n	8001a3c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800194c:	4b3e      	ldr	r3, [pc, #248]	; (8001a48 <HAL_RCC_ClockConfig+0x260>)
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	f003 020c 	and.w	r2, r3, #12
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	429a      	cmp	r2, r3
 800195c:	d1eb      	bne.n	8001936 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	2b80      	cmp	r3, #128	; 0x80
 8001962:	d105      	bne.n	8001970 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001964:	4b38      	ldr	r3, [pc, #224]	; (8001a48 <HAL_RCC_ClockConfig+0x260>)
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	4a37      	ldr	r2, [pc, #220]	; (8001a48 <HAL_RCC_ClockConfig+0x260>)
 800196a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800196e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0302 	and.w	r3, r3, #2
 8001978:	2b00      	cmp	r3, #0
 800197a:	d010      	beq.n	800199e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	689a      	ldr	r2, [r3, #8]
 8001980:	4b31      	ldr	r3, [pc, #196]	; (8001a48 <HAL_RCC_ClockConfig+0x260>)
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001988:	429a      	cmp	r2, r3
 800198a:	d208      	bcs.n	800199e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800198c:	4b2e      	ldr	r3, [pc, #184]	; (8001a48 <HAL_RCC_ClockConfig+0x260>)
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	492b      	ldr	r1, [pc, #172]	; (8001a48 <HAL_RCC_ClockConfig+0x260>)
 800199a:	4313      	orrs	r3, r2
 800199c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800199e:	4b29      	ldr	r3, [pc, #164]	; (8001a44 <HAL_RCC_ClockConfig+0x25c>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 030f 	and.w	r3, r3, #15
 80019a6:	683a      	ldr	r2, [r7, #0]
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d210      	bcs.n	80019ce <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ac:	4b25      	ldr	r3, [pc, #148]	; (8001a44 <HAL_RCC_ClockConfig+0x25c>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f023 020f 	bic.w	r2, r3, #15
 80019b4:	4923      	ldr	r1, [pc, #140]	; (8001a44 <HAL_RCC_ClockConfig+0x25c>)
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019bc:	4b21      	ldr	r3, [pc, #132]	; (8001a44 <HAL_RCC_ClockConfig+0x25c>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 030f 	and.w	r3, r3, #15
 80019c4:	683a      	ldr	r2, [r7, #0]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d001      	beq.n	80019ce <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e036      	b.n	8001a3c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0304 	and.w	r3, r3, #4
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d008      	beq.n	80019ec <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019da:	4b1b      	ldr	r3, [pc, #108]	; (8001a48 <HAL_RCC_ClockConfig+0x260>)
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	4918      	ldr	r1, [pc, #96]	; (8001a48 <HAL_RCC_ClockConfig+0x260>)
 80019e8:	4313      	orrs	r3, r2
 80019ea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0308 	and.w	r3, r3, #8
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d009      	beq.n	8001a0c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019f8:	4b13      	ldr	r3, [pc, #76]	; (8001a48 <HAL_RCC_ClockConfig+0x260>)
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	691b      	ldr	r3, [r3, #16]
 8001a04:	00db      	lsls	r3, r3, #3
 8001a06:	4910      	ldr	r1, [pc, #64]	; (8001a48 <HAL_RCC_ClockConfig+0x260>)
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a0c:	f000 f826 	bl	8001a5c <HAL_RCC_GetSysClockFreq>
 8001a10:	4602      	mov	r2, r0
 8001a12:	4b0d      	ldr	r3, [pc, #52]	; (8001a48 <HAL_RCC_ClockConfig+0x260>)
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	091b      	lsrs	r3, r3, #4
 8001a18:	f003 030f 	and.w	r3, r3, #15
 8001a1c:	490c      	ldr	r1, [pc, #48]	; (8001a50 <HAL_RCC_ClockConfig+0x268>)
 8001a1e:	5ccb      	ldrb	r3, [r1, r3]
 8001a20:	f003 031f 	and.w	r3, r3, #31
 8001a24:	fa22 f303 	lsr.w	r3, r2, r3
 8001a28:	4a0a      	ldr	r2, [pc, #40]	; (8001a54 <HAL_RCC_ClockConfig+0x26c>)
 8001a2a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001a2c:	4b0a      	ldr	r3, [pc, #40]	; (8001a58 <HAL_RCC_ClockConfig+0x270>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff f8b9 	bl	8000ba8 <HAL_InitTick>
 8001a36:	4603      	mov	r3, r0
 8001a38:	73fb      	strb	r3, [r7, #15]

  return status;
 8001a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3718      	adds	r7, #24
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	40022000 	.word	0x40022000
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	04c4b400 	.word	0x04c4b400
 8001a50:	080044a8 	.word	0x080044a8
 8001a54:	20000008 	.word	0x20000008
 8001a58:	20000000 	.word	0x20000000

08001a5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b089      	sub	sp, #36	; 0x24
 8001a60:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001a62:	2300      	movs	r3, #0
 8001a64:	61fb      	str	r3, [r7, #28]
 8001a66:	2300      	movs	r3, #0
 8001a68:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a6a:	4b3e      	ldr	r3, [pc, #248]	; (8001b64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	f003 030c 	and.w	r3, r3, #12
 8001a72:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a74:	4b3b      	ldr	r3, [pc, #236]	; (8001b64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	f003 0303 	and.w	r3, r3, #3
 8001a7c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d005      	beq.n	8001a90 <HAL_RCC_GetSysClockFreq+0x34>
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	2b0c      	cmp	r3, #12
 8001a88:	d121      	bne.n	8001ace <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d11e      	bne.n	8001ace <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001a90:	4b34      	ldr	r3, [pc, #208]	; (8001b64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0308 	and.w	r3, r3, #8
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d107      	bne.n	8001aac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001a9c:	4b31      	ldr	r3, [pc, #196]	; (8001b64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001aa2:	0a1b      	lsrs	r3, r3, #8
 8001aa4:	f003 030f 	and.w	r3, r3, #15
 8001aa8:	61fb      	str	r3, [r7, #28]
 8001aaa:	e005      	b.n	8001ab8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001aac:	4b2d      	ldr	r3, [pc, #180]	; (8001b64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	091b      	lsrs	r3, r3, #4
 8001ab2:	f003 030f 	and.w	r3, r3, #15
 8001ab6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001ab8:	4a2b      	ldr	r2, [pc, #172]	; (8001b68 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ac0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d10d      	bne.n	8001ae4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001acc:	e00a      	b.n	8001ae4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	2b04      	cmp	r3, #4
 8001ad2:	d102      	bne.n	8001ada <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ad4:	4b25      	ldr	r3, [pc, #148]	; (8001b6c <HAL_RCC_GetSysClockFreq+0x110>)
 8001ad6:	61bb      	str	r3, [r7, #24]
 8001ad8:	e004      	b.n	8001ae4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	2b08      	cmp	r3, #8
 8001ade:	d101      	bne.n	8001ae4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ae0:	4b23      	ldr	r3, [pc, #140]	; (8001b70 <HAL_RCC_GetSysClockFreq+0x114>)
 8001ae2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	2b0c      	cmp	r3, #12
 8001ae8:	d134      	bne.n	8001b54 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001aea:	4b1e      	ldr	r3, [pc, #120]	; (8001b64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	f003 0303 	and.w	r3, r3, #3
 8001af2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d003      	beq.n	8001b02 <HAL_RCC_GetSysClockFreq+0xa6>
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	2b03      	cmp	r3, #3
 8001afe:	d003      	beq.n	8001b08 <HAL_RCC_GetSysClockFreq+0xac>
 8001b00:	e005      	b.n	8001b0e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001b02:	4b1a      	ldr	r3, [pc, #104]	; (8001b6c <HAL_RCC_GetSysClockFreq+0x110>)
 8001b04:	617b      	str	r3, [r7, #20]
      break;
 8001b06:	e005      	b.n	8001b14 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001b08:	4b19      	ldr	r3, [pc, #100]	; (8001b70 <HAL_RCC_GetSysClockFreq+0x114>)
 8001b0a:	617b      	str	r3, [r7, #20]
      break;
 8001b0c:	e002      	b.n	8001b14 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	617b      	str	r3, [r7, #20]
      break;
 8001b12:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b14:	4b13      	ldr	r3, [pc, #76]	; (8001b64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	091b      	lsrs	r3, r3, #4
 8001b1a:	f003 030f 	and.w	r3, r3, #15
 8001b1e:	3301      	adds	r3, #1
 8001b20:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001b22:	4b10      	ldr	r3, [pc, #64]	; (8001b64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	0a1b      	lsrs	r3, r3, #8
 8001b28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b2c:	697a      	ldr	r2, [r7, #20]
 8001b2e:	fb03 f202 	mul.w	r2, r3, r2
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b38:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001b3a:	4b0a      	ldr	r3, [pc, #40]	; (8001b64 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b3c:	68db      	ldr	r3, [r3, #12]
 8001b3e:	0e5b      	lsrs	r3, r3, #25
 8001b40:	f003 0303 	and.w	r3, r3, #3
 8001b44:	3301      	adds	r3, #1
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001b4a:	697a      	ldr	r2, [r7, #20]
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b52:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001b54:	69bb      	ldr	r3, [r7, #24]
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3724      	adds	r7, #36	; 0x24
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	40021000 	.word	0x40021000
 8001b68:	080044b8 	.word	0x080044b8
 8001b6c:	00f42400 	.word	0x00f42400
 8001b70:	007a1200 	.word	0x007a1200

08001b74 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b086      	sub	sp, #24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001b80:	4b27      	ldr	r3, [pc, #156]	; (8001c20 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d003      	beq.n	8001b94 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001b8c:	f7ff f94e 	bl	8000e2c <HAL_PWREx_GetVoltageRange>
 8001b90:	6178      	str	r0, [r7, #20]
 8001b92:	e014      	b.n	8001bbe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001b94:	4b22      	ldr	r3, [pc, #136]	; (8001c20 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b98:	4a21      	ldr	r2, [pc, #132]	; (8001c20 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001b9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b9e:	6593      	str	r3, [r2, #88]	; 0x58
 8001ba0:	4b1f      	ldr	r3, [pc, #124]	; (8001c20 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba8:	60fb      	str	r3, [r7, #12]
 8001baa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001bac:	f7ff f93e 	bl	8000e2c <HAL_PWREx_GetVoltageRange>
 8001bb0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001bb2:	4b1b      	ldr	r3, [pc, #108]	; (8001c20 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bb6:	4a1a      	ldr	r2, [pc, #104]	; (8001c20 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001bb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bbc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bc4:	d10b      	bne.n	8001bde <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2b80      	cmp	r3, #128	; 0x80
 8001bca:	d913      	bls.n	8001bf4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2ba0      	cmp	r3, #160	; 0xa0
 8001bd0:	d902      	bls.n	8001bd8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	613b      	str	r3, [r7, #16]
 8001bd6:	e00d      	b.n	8001bf4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001bd8:	2301      	movs	r3, #1
 8001bda:	613b      	str	r3, [r7, #16]
 8001bdc:	e00a      	b.n	8001bf4 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2b7f      	cmp	r3, #127	; 0x7f
 8001be2:	d902      	bls.n	8001bea <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8001be4:	2302      	movs	r3, #2
 8001be6:	613b      	str	r3, [r7, #16]
 8001be8:	e004      	b.n	8001bf4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2b70      	cmp	r3, #112	; 0x70
 8001bee:	d101      	bne.n	8001bf4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001bf4:	4b0b      	ldr	r3, [pc, #44]	; (8001c24 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f023 020f 	bic.w	r2, r3, #15
 8001bfc:	4909      	ldr	r1, [pc, #36]	; (8001c24 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001c04:	4b07      	ldr	r3, [pc, #28]	; (8001c24 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 030f 	and.w	r3, r3, #15
 8001c0c:	693a      	ldr	r2, [r7, #16]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d001      	beq.n	8001c16 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e000      	b.n	8001c18 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8001c16:	2300      	movs	r3, #0
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3718      	adds	r7, #24
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	40021000 	.word	0x40021000
 8001c24:	40022000 	.word	0x40022000

08001c28 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b087      	sub	sp, #28
 8001c2c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c2e:	4b2d      	ldr	r3, [pc, #180]	; (8001ce4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	f003 0303 	and.w	r3, r3, #3
 8001c36:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2b03      	cmp	r3, #3
 8001c3c:	d00b      	beq.n	8001c56 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2b03      	cmp	r3, #3
 8001c42:	d825      	bhi.n	8001c90 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d008      	beq.n	8001c5c <RCC_GetSysClockFreqFromPLLSource+0x34>
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d11f      	bne.n	8001c90 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8001c50:	4b25      	ldr	r3, [pc, #148]	; (8001ce8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001c52:	613b      	str	r3, [r7, #16]
    break;
 8001c54:	e01f      	b.n	8001c96 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8001c56:	4b25      	ldr	r3, [pc, #148]	; (8001cec <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8001c58:	613b      	str	r3, [r7, #16]
    break;
 8001c5a:	e01c      	b.n	8001c96 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001c5c:	4b21      	ldr	r3, [pc, #132]	; (8001ce4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0308 	and.w	r3, r3, #8
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d107      	bne.n	8001c78 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c68:	4b1e      	ldr	r3, [pc, #120]	; (8001ce4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001c6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c6e:	0a1b      	lsrs	r3, r3, #8
 8001c70:	f003 030f 	and.w	r3, r3, #15
 8001c74:	617b      	str	r3, [r7, #20]
 8001c76:	e005      	b.n	8001c84 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c78:	4b1a      	ldr	r3, [pc, #104]	; (8001ce4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	091b      	lsrs	r3, r3, #4
 8001c7e:	f003 030f 	and.w	r3, r3, #15
 8001c82:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8001c84:	4a1a      	ldr	r2, [pc, #104]	; (8001cf0 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c8c:	613b      	str	r3, [r7, #16]
    break;
 8001c8e:	e002      	b.n	8001c96 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8001c90:	2300      	movs	r3, #0
 8001c92:	613b      	str	r3, [r7, #16]
    break;
 8001c94:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c96:	4b13      	ldr	r3, [pc, #76]	; (8001ce4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	091b      	lsrs	r3, r3, #4
 8001c9c:	f003 030f 	and.w	r3, r3, #15
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001ca4:	4b0f      	ldr	r3, [pc, #60]	; (8001ce4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	0a1b      	lsrs	r3, r3, #8
 8001caa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	fb03 f202 	mul.w	r2, r3, r2
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cba:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001cbc:	4b09      	ldr	r3, [pc, #36]	; (8001ce4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	0e5b      	lsrs	r3, r3, #25
 8001cc2:	f003 0303 	and.w	r3, r3, #3
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8001ccc:	693a      	ldr	r2, [r7, #16]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8001cd6:	683b      	ldr	r3, [r7, #0]
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	371c      	adds	r7, #28
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr
 8001ce4:	40021000 	.word	0x40021000
 8001ce8:	00f42400 	.word	0x00f42400
 8001cec:	007a1200 	.word	0x007a1200
 8001cf0:	080044b8 	.word	0x080044b8

08001cf4 <asmMultiply>:
*/

//.f32 -> precision of floating point (32bits)
// When FPU is activated, use registers S0, S1 ... for .f32
 asmMultiply:
	PUSH {R4, R5} 	//saving R4 and R5 according to calling convention
 8001cf4:	b430      	push	{r4, r5}

08001cf6 <loop>:

 loop:
	 SUBS 		R2, R2, #1			// decrement by 1 size
 8001cf6:	3a01      	subs	r2, #1
	 BLT 		done				// loop finishes when R1<0
 8001cf8:	db0e      	blt.n	8001d18 <done>
	 ADD		R4, R0, R2, LSL #2	// calculate base address (in R4) for array1 element
 8001cfa:	eb00 0482 	add.w	r4, r0, r2, lsl #2
	 ADD 		R5, R1, R2, LSL #2	// calculate base address (in R5) for array2 element
 8001cfe:	eb01 0582 	add.w	r5, r1, r2, lsl #2
	 VLDR.f32	S0, [R4]			// load element into fp register S0 (from address in R4)
 8001d02:	ed94 0a00 	vldr	s0, [r4]
	 VLDR.f32	S1, [R5]			// load element into fp register S1 (from address in R5)
 8001d06:	edd5 0a00 	vldr	s1, [r5]
	 VMUL.f32	S2, S0, S1			// multiply two array elements
 8001d0a:	ee20 1a20 	vmul.f32	s2, s0, s1
	 ADD		R5, R3, R2, LSL #2	// calculate base address (in R5) for products elements
 8001d0e:	eb03 0582 	add.w	r5, r3, r2, lsl #2
	 VSTR.f32	S2, [R5]			// store product in products
 8001d12:	ed85 1a00 	vstr	s2, [r5]

08001d16 <continue>:

 continue:
 	 B			loop				// branch to loop for next iteration
 8001d16:	e7ee      	b.n	8001cf6 <loop>

08001d18 <done>:

 done:
	 POP		{R4, R5}			// restrore context
 8001d18:	bc30      	pop	{r4, r5}
	 BX 		LR					// return
 8001d1a:	4770      	bx	lr

08001d1c <asmstd>:
* R1 = size
* R2 = pointer to std (result)
*/

asmstd:
	PUSH 			{R4, R5}			// saving R4 and R5 according to calling convention
 8001d1c:	b430      	push	{r4, r5}
	MOV				R4, R1				// copying size to R4
 8001d1e:	460c      	mov	r4, r1
	MOV				R5, #0				// put 0 in R5
 8001d20:	f04f 0500 	mov.w	r5, #0
	VMOV			S0, R5				// move 0 to S0
 8001d24:	ee00 5a10 	vmov	s0, r5
	VCVT.f32.u32	S0, S0				// initialize S0 for sum to 0 in S0
 8001d28:	eeb8 0a40 	vcvt.f32.u32	s0, s0

08001d2c <sumLoop>:

sumLoop:
	SUBS			R4, R4, #1			// decrement by 1 size
 8001d2c:	3c01      	subs	r4, #1
	BLT				avg
 8001d2e:	db06      	blt.n	8001d3e <avg>
	ADD				R5, R0, R4, LSL #2	// calculate base address (in R5) for array element
 8001d30:	eb00 0584 	add.w	r5, r0, r4, lsl #2
	VLDR.f32		S1, [R5]			// load element into fp register S1 (from address in R5)
 8001d34:	edd5 0a00 	vldr	s1, [r5]
	VADD.f32		S0, S0, S1			// SUM += array[i]
 8001d38:	ee30 0a20 	vadd.f32	s0, s0, s1

08001d3c <continueSum>:

continueSum:
	B				sumLoop				// next iteration
 8001d3c:	e7f6      	b.n	8001d2c <sumLoop>

08001d3e <avg>:

avg:
	VMOV			S1, R1				// move size to S1
 8001d3e:	ee00 1a90 	vmov	s1, r1
	VCVT.f32.u32	S1, S1				//convert size to fp
 8001d42:	eef8 0a60 	vcvt.f32.u32	s1, s1
	VDIV.f32		S0, S0, S1			//avg = sum/size
 8001d46:	ee80 0a20 	vdiv.f32	s0, s0, s1
	MOV				R4, R1				// copy size to R4
 8001d4a:	460c      	mov	r4, r1
	SUB				R5, R4, #1			// take size - 1 in R5 (to use in division)
 8001d4c:	f1a4 0501 	sub.w	r5, r4, #1
	VMOV			S4, R5				// move (size - 1) to S4
 8001d50:	ee02 5a10 	vmov	s4, r5
	VCVT.f32.u32	S4, S4				// convert (size - 1) to fp
 8001d54:	eeb8 2a42 	vcvt.f32.u32	s4, s4
	MOV				R5, #0				// put 0 in R5
 8001d58:	f04f 0500 	mov.w	r5, #0
	VMOV			S2, R5				// move 0 to S2
 8001d5c:	ee01 5a10 	vmov	s2, r5
	VCVT.f32.u32	S2, S2				// initialize variance to 0 in S2
 8001d60:	eeb8 1a41 	vcvt.f32.u32	s2, s2

08001d64 <varianceLoop>:

varianceLoop:
	SUBS			R4, R4, #1			// size = size - 1
 8001d64:	3c01      	subs	r4, #1
	BLT				done				// loop finishes when R1 < 0
 8001d66:	db0c      	blt.n	8001d82 <done>
	ADD				R5, R0, R4, LSL #2	// calculate base address (in R5) for array element
 8001d68:	eb00 0584 	add.w	r5, r0, r4, lsl #2
	VLDR.f32		S3, [R5]			// load element from array
 8001d6c:	edd5 1a00 	vldr	s3, [r5]
	VSUB.f32		S3, S3, S0			// subtract avg from element
 8001d70:	ee71 1ac0 	vsub.f32	s3, s3, s0
	VMUL.f32		S3, S3, S3			// (element - avg)^2
 8001d74:	ee61 1aa1 	vmul.f32	s3, s3, s3
	VDIV.f32		S3, S3, S4			// ((element - avg)^2) / (size - 1)
 8001d78:	eec1 1a82 	vdiv.f32	s3, s3, s4
	VADD.f32		S2, S2, S3			// variance += ((element - avg)^2) / (size - 1)
 8001d7c:	ee31 1a21 	vadd.f32	s2, s2, s3

08001d80 <continueVariance>:

continueVariance:
	B				varianceLoop		// next iteration
 8001d80:	e7f0      	b.n	8001d64 <varianceLoop>

08001d82 <done>:

done:
	VSQRT.f32		S2, S2				// std = sqrt(variance)
 8001d82:	eeb1 1ac1 	vsqrt.f32	s2, s2
	VSTR.f32		S2, [R2]			// store std in R2
 8001d86:	ed82 1a00 	vstr	s2, [r2]
	POP				{R4, R5}			// restore context
 8001d8a:	bc30      	pop	{r4, r5}
	BX				LR					// return
 8001d8c:	4770      	bx	lr

08001d8e <cMultiply>:
 */

#include "main.h"
#include "lab1math.h"

void cMultiply(float *array1, float *array2, uint32_t size, float *y) {
 8001d8e:	b480      	push	{r7}
 8001d90:	b087      	sub	sp, #28
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	60f8      	str	r0, [r7, #12]
 8001d96:	60b9      	str	r1, [r7, #8]
 8001d98:	607a      	str	r2, [r7, #4]
 8001d9a:	603b      	str	r3, [r7, #0]
	for (uint32_t i = 0 ; i < size; i++) {
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	617b      	str	r3, [r7, #20]
 8001da0:	e016      	b.n	8001dd0 <cMultiply+0x42>
		y[i] = array1[i] * array2[i];
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	68fa      	ldr	r2, [r7, #12]
 8001da8:	4413      	add	r3, r2
 8001daa:	ed93 7a00 	vldr	s14, [r3]
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	68ba      	ldr	r2, [r7, #8]
 8001db4:	4413      	add	r3, r2
 8001db6:	edd3 7a00 	vldr	s15, [r3]
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	683a      	ldr	r2, [r7, #0]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dc6:	edc3 7a00 	vstr	s15, [r3]
	for (uint32_t i = 0 ; i < size; i++) {
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	3301      	adds	r3, #1
 8001dce:	617b      	str	r3, [r7, #20]
 8001dd0:	697a      	ldr	r2, [r7, #20]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d3e4      	bcc.n	8001da2 <cMultiply+0x14>
	}
}
 8001dd8:	bf00      	nop
 8001dda:	bf00      	nop
 8001ddc:	371c      	adds	r7, #28
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
	...

08001de8 <cstd>:

#include "main.h"
#include <math.h>
#include "lab1math.h"

void cstd(float *array, uint32_t size, float *std) {
 8001de8:	b5b0      	push	{r4, r5, r7, lr}
 8001dea:	b088      	sub	sp, #32
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	60f8      	str	r0, [r7, #12]
 8001df0:	60b9      	str	r1, [r7, #8]
 8001df2:	607a      	str	r2, [r7, #4]
	float avg = 0;
 8001df4:	f04f 0300 	mov.w	r3, #0
 8001df8:	61fb      	str	r3, [r7, #28]
	float sum = 0 ;
 8001dfa:	f04f 0300 	mov.w	r3, #0
 8001dfe:	61bb      	str	r3, [r7, #24]

	for(uint32_t i = 0; i < size; i++) {
 8001e00:	2300      	movs	r3, #0
 8001e02:	617b      	str	r3, [r7, #20]
 8001e04:	e00e      	b.n	8001e24 <cstd+0x3c>
		avg += array[i];
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	68fa      	ldr	r2, [r7, #12]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	edd3 7a00 	vldr	s15, [r3]
 8001e12:	ed97 7a07 	vldr	s14, [r7, #28]
 8001e16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e1a:	edc7 7a07 	vstr	s15, [r7, #28]
	for(uint32_t i = 0; i < size; i++) {
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	3301      	adds	r3, #1
 8001e22:	617b      	str	r3, [r7, #20]
 8001e24:	697a      	ldr	r2, [r7, #20]
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d3ec      	bcc.n	8001e06 <cstd+0x1e>
	}
	avg/= size;
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	ee07 3a90 	vmov	s15, r3
 8001e32:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e36:	edd7 6a07 	vldr	s13, [r7, #28]
 8001e3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e3e:	edc7 7a07 	vstr	s15, [r7, #28]

	for(uint32_t i = 0 ; i < size; i++) {
 8001e42:	2300      	movs	r3, #0
 8001e44:	613b      	str	r3, [r7, #16]
 8001e46:	e02b      	b.n	8001ea0 <cstd+0xb8>
		sum += pow((array[i] - avg),2);
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	68fa      	ldr	r2, [r7, #12]
 8001e4e:	4413      	add	r3, r2
 8001e50:	ed93 7a00 	vldr	s14, [r3]
 8001e54:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e5c:	ee17 0a90 	vmov	r0, s15
 8001e60:	f7fe fb32 	bl	80004c8 <__aeabi_f2d>
 8001e64:	4602      	mov	r2, r0
 8001e66:	460b      	mov	r3, r1
 8001e68:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8001ef0 <cstd+0x108>
 8001e6c:	ec43 2b10 	vmov	d0, r2, r3
 8001e70:	f000 fbd4 	bl	800261c <pow>
 8001e74:	ec55 4b10 	vmov	r4, r5, d0
 8001e78:	69b8      	ldr	r0, [r7, #24]
 8001e7a:	f7fe fb25 	bl	80004c8 <__aeabi_f2d>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	460b      	mov	r3, r1
 8001e82:	4620      	mov	r0, r4
 8001e84:	4629      	mov	r1, r5
 8001e86:	f7fe f9c1 	bl	800020c <__adddf3>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	4610      	mov	r0, r2
 8001e90:	4619      	mov	r1, r3
 8001e92:	f7fe fe21 	bl	8000ad8 <__aeabi_d2f>
 8001e96:	4603      	mov	r3, r0
 8001e98:	61bb      	str	r3, [r7, #24]
	for(uint32_t i = 0 ; i < size; i++) {
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	613b      	str	r3, [r7, #16]
 8001ea0:	693a      	ldr	r2, [r7, #16]
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d3cf      	bcc.n	8001e48 <cstd+0x60>
	}

	sum/= (size-1);
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	3b01      	subs	r3, #1
 8001eac:	ee07 3a90 	vmov	s15, r3
 8001eb0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001eb4:	edd7 6a06 	vldr	s13, [r7, #24]
 8001eb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ebc:	edc7 7a06 	vstr	s15, [r7, #24]
	(*std) = sqrt(sum);
 8001ec0:	69b8      	ldr	r0, [r7, #24]
 8001ec2:	f7fe fb01 	bl	80004c8 <__aeabi_f2d>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	460b      	mov	r3, r1
 8001eca:	ec43 2b10 	vmov	d0, r2, r3
 8001ece:	f000 fc15 	bl	80026fc <sqrt>
 8001ed2:	ec53 2b10 	vmov	r2, r3, d0
 8001ed6:	4610      	mov	r0, r2
 8001ed8:	4619      	mov	r1, r3
 8001eda:	f7fe fdfd 	bl	8000ad8 <__aeabi_d2f>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	601a      	str	r2, [r3, #0]
}
 8001ee4:	bf00      	nop
 8001ee6:	3720      	adds	r7, #32
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bdb0      	pop	{r4, r5, r7, pc}
 8001eec:	f3af 8000 	nop.w
 8001ef0:	00000000 	.word	0x00000000
 8001ef4:	40000000 	.word	0x40000000

08001ef8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ef8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001efc:	f6ad 7df8 	subw	sp, sp, #4088	; 0xff8
 8001f00:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f02:	f7fe fe39 	bl	8000b78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f06:	f000 f95f 	bl	80021c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f0a:	f000 f9af 	bl	800226c <MX_GPIO_Init>
//  // the max is 88.49 at index 5
//  float array[10] = {48.21, 79.48, 24.27, 28.82, 78.24, 88.49, 31.19, 5.52,
//		  82.70, 77.73};

  //part 1 - Element-wise multiplication
  int N = 1000;
 8001f0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f12:	f8c7 3fdc 	str.w	r3, [r7, #4060]	; 0xfdc
  float array1[1000] = {3.83,44.16,43.78,20.26,26,12.37,34.84,49.82,38.97,28.07,13.7,4.72,5.15,15.15,34.5,22.44,26.27,44.91,49.37,33.52,7.21,41.77,18.49,1.41,35.97,18.59,36.31,13.98,23.12,48.48,18.11,24.04,24.63,20.94,14.32,21.03,40.94,45.53,46.01,27.7,38.91,18.19,35.75,40.33,43.3,46.39,18.29,32.68,45.77,12.49,22.33,22.48,23.12,4.73,9.99,48.5,21.86,10.82,15.61,10.92,29.54,39.16,32.54,46.7,9.18,38.22,2.86,11.13,14.46,29.25,17.17,12.69,34.84,21.24,37.97,33.15,48.37,17.14,41.52,2.54,38.33,6.51,40.02,43.94,5.84,18.31,47.79,16.38,17.92,14.42,23.37,15.07,10.55,13.76,32.94,17.04,10.81,20.36,43.68,22.13,38.49,19.52,37.96,46.59,21.77,29.58,7.14,49.07,24.53,13.21,21.43,19.05,20.54,9.48,44.92,38.6,23.65,32.46,31.19,9.5,18.1,3.57,31.64,30.35,10.46,27.99,9.78,43.72,4.48,48.96,9.47,6.1,42.38,24.55,25.72,3.67,1.27,38.12,23.04,11.81,31.17,13.94,27.32,2.21,1.1,37.42,4,18.36,44.17,25.95,28.24,46.87,19.76,5.56,18.43,25.73,10.72,37.59,7.63,38.2,6.27,41.09,23.35,18.76,40.02,39.1,13.95,11.16,37.52,3.85,38.97,47.94,44.67,39.95,40.46,14.84,16.81,37.15,21.64,27.47,35.18,5.44,32.35,39.35,10.63,1.47,9.85,20.18,24.71,24.99,5.47,27.72,34.12,46.67,34.88,49.35,2.03,5.13,23.24,31.23, 3.83,44.16,43.78,20.26,26,12.37,34.84,49.82,38.97,28.07,13.7,4.72,5.15,15.15,34.5,22.44,26.27,44.91,49.37,33.52,7.21,41.77,18.49,1.41,35.97,18.59,36.31,13.98,23.12,48.48,18.11,24.04,24.63,20.94,14.32,21.03,40.94,45.53,46.01,27.7,38.91,18.19,35.75,40.33,43.3,46.39,18.29,32.68,45.77,12.49,22.33,22.48,23.12,4.73,9.99,48.5,21.86,10.82,15.61,10.92,29.54,39.16,32.54,46.7,9.18,38.22,2.86,11.13,14.46,29.25,17.17,12.69,34.84,21.24,37.97,33.15,48.37,17.14,41.52,2.54,38.33,6.51,40.02,43.94,5.84,18.31,47.79,16.38,17.92,14.42,23.37,15.07,10.55,13.76,32.94,17.04,10.81,20.36,43.68,22.13,38.49,19.52,37.96,46.59,21.77,29.58,7.14,49.07,24.53,13.21,21.43,19.05,20.54,9.48,44.92,38.6,23.65,32.46,31.19,9.5,18.1,3.57,31.64,30.35,10.46,27.99,9.78,43.72,4.48,48.96,9.47,6.1,42.38,24.55,25.72,3.67,1.27,38.12,23.04,11.81,31.17,13.94,27.32,2.21,1.1,37.42,4,18.36,44.17,25.95,28.24,46.87,19.76,5.56,18.43,25.73,10.72,37.59,7.63,38.2,6.27,41.09,23.35,18.76,40.02,39.1,13.95,11.16,37.52,3.85,38.97,47.94,44.67,39.95,40.46,14.84,16.81,37.15,21.64,27.47,35.18,5.44,32.35,39.35,10.63,1.47,9.85,20.18,24.71,24.99,5.47,27.72,34.12,46.67,34.88,49.35,2.03,5.13,23.24,31.23, 3.83,44.16,43.78,20.26,26,12.37,34.84,49.82,38.97,28.07,13.7,4.72,5.15,15.15,34.5,22.44,26.27,44.91,49.37,33.52,7.21,41.77,18.49,1.41,35.97,18.59,36.31,13.98,23.12,48.48,18.11,24.04,24.63,20.94,14.32,21.03,40.94,45.53,46.01,27.7,38.91,18.19,35.75,40.33,43.3,46.39,18.29,32.68,45.77,12.49,22.33,22.48,23.12,4.73,9.99,48.5,21.86,10.82,15.61,10.92,29.54,39.16,32.54,46.7,9.18,38.22,2.86,11.13,14.46,29.25,17.17,12.69,34.84,21.24,37.97,33.15,48.37,17.14,41.52,2.54,38.33,6.51,40.02,43.94,5.84,18.31,47.79,16.38,17.92,14.42,23.37,15.07,10.55,13.76,32.94,17.04,10.81,20.36,43.68,22.13,38.49,19.52,37.96,46.59,21.77,29.58,7.14,49.07,24.53,13.21,21.43,19.05,20.54,9.48,44.92,38.6,23.65,32.46,31.19,9.5,18.1,3.57,31.64,30.35,10.46,27.99,9.78,43.72,4.48,
 8001f16:	f607 73f8 	addw	r3, r7, #4088	; 0xff8
 8001f1a:	f6a3 73d4 	subw	r3, r3, #4052	; 0xfd4
 8001f1e:	4aa8      	ldr	r2, [pc, #672]	; (80021c0 <main+0x2c8>)
 8001f20:	4618      	mov	r0, r3
 8001f22:	4611      	mov	r1, r2
 8001f24:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8001f28:	461a      	mov	r2, r3
 8001f2a:	f000 fb61 	bl	80025f0 <memcpy>
		  48.96,9.47,6.1,42.38,24.55,25.72,3.67,1.27,38.12,23.04,11.81,31.17,13.94,27.32,2.21,1.1,37.42,4,18.36,44.17,25.95,28.24,46.87,19.76,5.56,18.43,25.73,10.72,37.59,7.63,38.2,6.27,41.09,23.35,18.76,40.02,39.1,13.95,11.16,37.52,3.85,38.97,47.94,44.67,39.95,40.46,14.84,16.81,37.15,21.64,27.47,35.18,5.44,32.35,39.35,10.63,1.47,9.85,20.18,24.71,24.99,5.47,27.72,34.12,46.67,34.88,49.35,2.03,5.13,23.24,31.23, 3.83,44.16,43.78,20.26,26,12.37,34.84,49.82,38.97,28.07,13.7,4.72,5.15,15.15,34.5,22.44,26.27,44.91,49.37,33.52,7.21,41.77,18.49,1.41,35.97,18.59,36.31,13.98,23.12,48.48,18.11,24.04,24.63,20.94,14.32,21.03,40.94,45.53,46.01,27.7,38.91,18.19,35.75,40.33,43.3,46.39,18.29,32.68,45.77,12.49,22.33,22.48,23.12,4.73,9.99,48.5,21.86,10.82,15.61,10.92,29.54,39.16,32.54,46.7,9.18,38.22,2.86,11.13,14.46,29.25,17.17,12.69,34.84,21.24,37.97,33.15,48.37,17.14,41.52,2.54,38.33,6.51,40.02,43.94,5.84,18.31,47.79,16.38,17.92,14.42,23.37,15.07,10.55,13.76,32.94,17.04,10.81,20.36,43.68,22.13,38.49,19.52,37.96,46.59,21.77,29.58,7.14,49.07,24.53,13.21,21.43,19.05,20.54,9.48,44.92,38.6,23.65,32.46,31.19,9.5,18.1,3.57,31.64,30.35,10.46,27.99,9.78,43.72,4.48,48.96,9.47,6.1,42.38,24.55,25.72,3.67,1.27,38.12,23.04,11.81,31.17,13.94,27.32,2.21,1.1,37.42,4,18.36,44.17,25.95,28.24,46.87,19.76,5.56,18.43,25.73,10.72,37.59,7.63,38.2,6.27,41.09,23.35,18.76,40.02,39.1,13.95,11.16,37.52,3.85,38.97,47.94,44.67,39.95,40.46,14.84,16.81,37.15,21.64,27.47,35.18,5.44,32.35,39.35,10.63,1.47,9.85,20.18,24.71,24.99,5.47,27.72,34.12,46.67,34.88,49.35,2.03,5.13,23.24,31.23, 3.83,44.16,43.78,20.26,26,12.37,34.84,49.82,38.97,28.07,13.7,4.72,5.15,15.15,34.5,22.44,26.27,44.91,49.37,33.52,7.21,41.77,18.49,1.41,35.97,18.59,36.31,13.98,23.12,48.48,18.11,24.04,24.63,20.94,14.32,21.03,40.94,45.53,46.01,27.7,38.91,18.19,35.75,40.33,43.3,46.39,18.29,32.68,45.77,12.49,22.33,22.48,23.12,4.73,9.99,48.5,21.86,10.82,15.61,10.92,29.54,39.16,32.54,46.7,9.18,38.22,2.86,11.13,14.46,29.25,17.17,12.69,34.84,21.24,37.97,33.15,48.37,17.14,41.52,2.54,38.33,6.51,40.02,43.94,5.84,18.31,47.79,16.38,17.92,14.42,23.37,15.07,10.55,13.76,32.94,17.04,10.81,20.36,43.68,22.13,38.49,19.52,37.96,46.59,21.77,29.58,7.14,49.07,24.53,13.21,21.43,19.05,20.54,9.48,44.92,38.6,23.65,32.46,31.19,9.5,18.1,3.57,31.64,30.35,10.46,27.99,9.78,43.72,4.48,48.96,9.47,6.1,42.38,24.55,25.72,3.67,1.27,38.12,23.04,11.81,31.17,13.94,27.32,2.21,1.1,37.42,4,18.36,44.17,25.95,28.24,46.87,19.76,5.56,18.43,25.73,10.72,37.59,7.63,38.2,6.27,41.09,23.35,18.76,40.02,39.1,13.95,11.16,37.52,3.85,38.97,47.94,44.67,39.95,40.46,14.84,16.81,37.15,21.64,27.47,35.18,5.44,32.35,39.35,10.63,1.47,9.85,20.18,24.71,24.99,5.47,27.72,34.12,46.67,34.88,49.35,2.03,5.13,23.24,31.23};
  float productsC[N];
 8001f2e:	f8d7 1fdc 	ldr.w	r1, [r7, #4060]	; 0xfdc
 8001f32:	1e4b      	subs	r3, r1, #1
 8001f34:	f8c7 3fd8 	str.w	r3, [r7, #4056]	; 0xfd8
 8001f38:	460a      	mov	r2, r1
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	4614      	mov	r4, r2
 8001f3e:	461d      	mov	r5, r3
 8001f40:	f04f 0200 	mov.w	r2, #0
 8001f44:	f04f 0300 	mov.w	r3, #0
 8001f48:	016b      	lsls	r3, r5, #5
 8001f4a:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8001f4e:	0162      	lsls	r2, r4, #5
 8001f50:	460a      	mov	r2, r1
 8001f52:	2300      	movs	r3, #0
 8001f54:	613a      	str	r2, [r7, #16]
 8001f56:	617b      	str	r3, [r7, #20]
 8001f58:	f04f 0200 	mov.w	r2, #0
 8001f5c:	f04f 0300 	mov.w	r3, #0
 8001f60:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001f64:	4628      	mov	r0, r5
 8001f66:	0143      	lsls	r3, r0, #5
 8001f68:	4620      	mov	r0, r4
 8001f6a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001f6e:	4620      	mov	r0, r4
 8001f70:	0142      	lsls	r2, r0, #5
 8001f72:	460b      	mov	r3, r1
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	3307      	adds	r3, #7
 8001f78:	08db      	lsrs	r3, r3, #3
 8001f7a:	00db      	lsls	r3, r3, #3
 8001f7c:	ebad 0d03 	sub.w	sp, sp, r3
 8001f80:	466b      	mov	r3, sp
 8001f82:	3303      	adds	r3, #3
 8001f84:	089b      	lsrs	r3, r3, #2
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	f8c7 3fd4 	str.w	r3, [r7, #4052]	; 0xfd4
  float productsAsm[N];
 8001f8c:	f8d7 1fdc 	ldr.w	r1, [r7, #4060]	; 0xfdc
 8001f90:	1e4b      	subs	r3, r1, #1
 8001f92:	f8c7 3fd0 	str.w	r3, [r7, #4048]	; 0xfd0
 8001f96:	460a      	mov	r2, r1
 8001f98:	2300      	movs	r3, #0
 8001f9a:	60ba      	str	r2, [r7, #8]
 8001f9c:	60fb      	str	r3, [r7, #12]
 8001f9e:	f04f 0200 	mov.w	r2, #0
 8001fa2:	f04f 0300 	mov.w	r3, #0
 8001fa6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001faa:	4628      	mov	r0, r5
 8001fac:	0143      	lsls	r3, r0, #5
 8001fae:	4620      	mov	r0, r4
 8001fb0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001fb4:	4620      	mov	r0, r4
 8001fb6:	0142      	lsls	r2, r0, #5
 8001fb8:	460a      	mov	r2, r1
 8001fba:	2300      	movs	r3, #0
 8001fbc:	603a      	str	r2, [r7, #0]
 8001fbe:	607b      	str	r3, [r7, #4]
 8001fc0:	f04f 0200 	mov.w	r2, #0
 8001fc4:	f04f 0300 	mov.w	r3, #0
 8001fc8:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001fcc:	4628      	mov	r0, r5
 8001fce:	0143      	lsls	r3, r0, #5
 8001fd0:	4620      	mov	r0, r4
 8001fd2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001fd6:	4620      	mov	r0, r4
 8001fd8:	0142      	lsls	r2, r0, #5
 8001fda:	460b      	mov	r3, r1
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	3307      	adds	r3, #7
 8001fe0:	08db      	lsrs	r3, r3, #3
 8001fe2:	00db      	lsls	r3, r3, #3
 8001fe4:	ebad 0d03 	sub.w	sp, sp, r3
 8001fe8:	466b      	mov	r3, sp
 8001fea:	3303      	adds	r3, #3
 8001fec:	089b      	lsrs	r3, r3, #2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	f8c7 3fcc 	str.w	r3, [r7, #4044]	; 0xfcc
  float productsCMSIS[N];
 8001ff4:	f8d7 1fdc 	ldr.w	r1, [r7, #4060]	; 0xfdc
 8001ff8:	1e4b      	subs	r3, r1, #1
 8001ffa:	f8c7 3fc8 	str.w	r3, [r7, #4040]	; 0xfc8
 8001ffe:	460a      	mov	r2, r1
 8002000:	2300      	movs	r3, #0
 8002002:	4692      	mov	sl, r2
 8002004:	469b      	mov	fp, r3
 8002006:	f04f 0200 	mov.w	r2, #0
 800200a:	f04f 0300 	mov.w	r3, #0
 800200e:	ea4f 134b 	mov.w	r3, fp, lsl #5
 8002012:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8002016:	ea4f 124a 	mov.w	r2, sl, lsl #5
 800201a:	460a      	mov	r2, r1
 800201c:	2300      	movs	r3, #0
 800201e:	4690      	mov	r8, r2
 8002020:	4699      	mov	r9, r3
 8002022:	f04f 0200 	mov.w	r2, #0
 8002026:	f04f 0300 	mov.w	r3, #0
 800202a:	ea4f 1349 	mov.w	r3, r9, lsl #5
 800202e:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8002032:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8002036:	460b      	mov	r3, r1
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	3307      	adds	r3, #7
 800203c:	08db      	lsrs	r3, r3, #3
 800203e:	00db      	lsls	r3, r3, #3
 8002040:	ebad 0d03 	sub.w	sp, sp, r3
 8002044:	466b      	mov	r3, sp
 8002046:	3303      	adds	r3, #3
 8002048:	089b      	lsrs	r3, r3, #2
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	f8c7 3fc4 	str.w	r3, [r7, #4036]	; 0xfc4

  //part 2 - Standard Deviation
  float stdC = 0;
 8002050:	f607 73f8 	addw	r3, r7, #4088	; 0xff8
 8002054:	f6a3 73d8 	subw	r3, r3, #4056	; 0xfd8
 8002058:	f04f 0200 	mov.w	r2, #0
 800205c:	601a      	str	r2, [r3, #0]
  float stdASM = 0;
 800205e:	f607 73f8 	addw	r3, r7, #4088	; 0xff8
 8002062:	f6a3 73dc 	subw	r3, r3, #4060	; 0xfdc
 8002066:	f04f 0200 	mov.w	r2, #0
 800206a:	601a      	str	r2, [r3, #0]
  float stdCMSIS = 0;
 800206c:	f607 73f8 	addw	r3, r7, #4088	; 0xff8
 8002070:	f5a3 637e 	sub.w	r3, r3, #4064	; 0xfe0
 8002074:	f04f 0200 	mov.w	r2, #0
 8002078:	601a      	str	r2, [r3, #0]
//		  asmMax(&array, 10, &maxAsm, &maxIndexAsm);
//	  ITM_Port32(31) = 3; // sends data value 2 to ITM port 31
//	  for (uint32_t i=0; i<1000; i++)
//		  arm_max_f32(&array, 10, &maxCMSIS, &maxIndexCMSIS);

	  ITM_Port32(31) = 1;
 800207a:	4b52      	ldr	r3, [pc, #328]	; (80021c4 <main+0x2cc>)
 800207c:	2201      	movs	r2, #1
 800207e:	601a      	str	r2, [r3, #0]
	  for (uint32_t i=0; i<1000; i++)
 8002080:	2300      	movs	r3, #0
 8002082:	f8c7 3fe0 	str.w	r3, [r7, #4064]	; 0xfe0
 8002086:	e00e      	b.n	80020a6 <main+0x1ae>
		  cMultiply(&array1, &array1, N, &productsC);
 8002088:	f8d7 2fdc 	ldr.w	r2, [r7, #4060]	; 0xfdc
 800208c:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8002090:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002094:	f8d7 3fd4 	ldr.w	r3, [r7, #4052]	; 0xfd4
 8002098:	f7ff fe79 	bl	8001d8e <cMultiply>
	  for (uint32_t i=0; i<1000; i++)
 800209c:	f8d7 3fe0 	ldr.w	r3, [r7, #4064]	; 0xfe0
 80020a0:	3301      	adds	r3, #1
 80020a2:	f8c7 3fe0 	str.w	r3, [r7, #4064]	; 0xfe0
 80020a6:	f8d7 3fe0 	ldr.w	r3, [r7, #4064]	; 0xfe0
 80020aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80020ae:	d3eb      	bcc.n	8002088 <main+0x190>
	  ITM_Port32(31) = 2;
 80020b0:	4b44      	ldr	r3, [pc, #272]	; (80021c4 <main+0x2cc>)
 80020b2:	2202      	movs	r2, #2
 80020b4:	601a      	str	r2, [r3, #0]
	  for (uint32_t i=0; i<1000; i++)
 80020b6:	2300      	movs	r3, #0
 80020b8:	f8c7 3fe4 	str.w	r3, [r7, #4068]	; 0xfe4
 80020bc:	e00d      	b.n	80020da <main+0x1e2>
		  arm_mult_f32(&array1, &array1, &productsCMSIS, 10);
 80020be:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80020c2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80020c6:	230a      	movs	r3, #10
 80020c8:	f8d7 2fc4 	ldr.w	r2, [r7, #4036]	; 0xfc4
 80020cc:	f000 fa0c 	bl	80024e8 <arm_mult_f32>
	  for (uint32_t i=0; i<1000; i++)
 80020d0:	f8d7 3fe4 	ldr.w	r3, [r7, #4068]	; 0xfe4
 80020d4:	3301      	adds	r3, #1
 80020d6:	f8c7 3fe4 	str.w	r3, [r7, #4068]	; 0xfe4
 80020da:	f8d7 3fe4 	ldr.w	r3, [r7, #4068]	; 0xfe4
 80020de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80020e2:	d3ec      	bcc.n	80020be <main+0x1c6>
	  ITM_Port32(31) = 3;
 80020e4:	4b37      	ldr	r3, [pc, #220]	; (80021c4 <main+0x2cc>)
 80020e6:	2203      	movs	r2, #3
 80020e8:	601a      	str	r2, [r3, #0]
	  for (uint32_t i=0; i<1000; i++)
 80020ea:	2300      	movs	r3, #0
 80020ec:	f8c7 3fe8 	str.w	r3, [r7, #4072]	; 0xfe8
 80020f0:	e00e      	b.n	8002110 <main+0x218>
		  asmMultiply(&array1, &array1, N, &productsAsm);
 80020f2:	f8d7 2fdc 	ldr.w	r2, [r7, #4060]	; 0xfdc
 80020f6:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80020fa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80020fe:	f8d7 3fcc 	ldr.w	r3, [r7, #4044]	; 0xfcc
 8002102:	f7ff fdf7 	bl	8001cf4 <asmMultiply>
	  for (uint32_t i=0; i<1000; i++)
 8002106:	f8d7 3fe8 	ldr.w	r3, [r7, #4072]	; 0xfe8
 800210a:	3301      	adds	r3, #1
 800210c:	f8c7 3fe8 	str.w	r3, [r7, #4072]	; 0xfe8
 8002110:	f8d7 3fe8 	ldr.w	r3, [r7, #4072]	; 0xfe8
 8002114:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002118:	d3eb      	bcc.n	80020f2 <main+0x1fa>
	  ITM_Port32(31) = 4;
 800211a:	4b2a      	ldr	r3, [pc, #168]	; (80021c4 <main+0x2cc>)
 800211c:	2204      	movs	r2, #4
 800211e:	601a      	str	r2, [r3, #0]
	  for (uint32_t i=0; i<1000; i++)
 8002120:	2300      	movs	r3, #0
 8002122:	f8c7 3fec 	str.w	r3, [r7, #4076]	; 0xfec
 8002126:	e00d      	b.n	8002144 <main+0x24c>
		  cstd(&array1, N, &stdC);
 8002128:	f8d7 1fdc 	ldr.w	r1, [r7, #4060]	; 0xfdc
 800212c:	f107 0220 	add.w	r2, r7, #32
 8002130:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002134:	4618      	mov	r0, r3
 8002136:	f7ff fe57 	bl	8001de8 <cstd>
	  for (uint32_t i=0; i<1000; i++)
 800213a:	f8d7 3fec 	ldr.w	r3, [r7, #4076]	; 0xfec
 800213e:	3301      	adds	r3, #1
 8002140:	f8c7 3fec 	str.w	r3, [r7, #4076]	; 0xfec
 8002144:	f8d7 3fec 	ldr.w	r3, [r7, #4076]	; 0xfec
 8002148:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800214c:	d3ec      	bcc.n	8002128 <main+0x230>
	  ITM_Port32(31) = 5;
 800214e:	4b1d      	ldr	r3, [pc, #116]	; (80021c4 <main+0x2cc>)
 8002150:	2205      	movs	r2, #5
 8002152:	601a      	str	r2, [r3, #0]
	  for (uint32_t i=0; i<1000; i++)
 8002154:	2300      	movs	r3, #0
 8002156:	f8c7 3ff0 	str.w	r3, [r7, #4080]	; 0xff0
 800215a:	e00d      	b.n	8002178 <main+0x280>
		  arm_std_f32(&array1, N, &stdCMSIS);
 800215c:	f8d7 1fdc 	ldr.w	r1, [r7, #4060]	; 0xfdc
 8002160:	f107 0218 	add.w	r2, r7, #24
 8002164:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002168:	4618      	mov	r0, r3
 800216a:	f000 f933 	bl	80023d4 <arm_std_f32>
	  for (uint32_t i=0; i<1000; i++)
 800216e:	f8d7 3ff0 	ldr.w	r3, [r7, #4080]	; 0xff0
 8002172:	3301      	adds	r3, #1
 8002174:	f8c7 3ff0 	str.w	r3, [r7, #4080]	; 0xff0
 8002178:	f8d7 3ff0 	ldr.w	r3, [r7, #4080]	; 0xff0
 800217c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002180:	d3ec      	bcc.n	800215c <main+0x264>
	  ITM_Port32(31) = 6;
 8002182:	4b10      	ldr	r3, [pc, #64]	; (80021c4 <main+0x2cc>)
 8002184:	2206      	movs	r2, #6
 8002186:	601a      	str	r2, [r3, #0]
	  for (uint32_t i=0; i<1000; i++)
 8002188:	2300      	movs	r3, #0
 800218a:	f8c7 3ff4 	str.w	r3, [r7, #4084]	; 0xff4
 800218e:	e00d      	b.n	80021ac <main+0x2b4>
	 		asmstd(&array1, N, &stdASM);
 8002190:	f8d7 1fdc 	ldr.w	r1, [r7, #4060]	; 0xfdc
 8002194:	f107 021c 	add.w	r2, r7, #28
 8002198:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800219c:	4618      	mov	r0, r3
 800219e:	f7ff fdbd 	bl	8001d1c <asmstd>
	  for (uint32_t i=0; i<1000; i++)
 80021a2:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 80021a6:	3301      	adds	r3, #1
 80021a8:	f8c7 3ff4 	str.w	r3, [r7, #4084]	; 0xff4
 80021ac:	f8d7 3ff4 	ldr.w	r3, [r7, #4084]	; 0xff4
 80021b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021b4:	d3ec      	bcc.n	8002190 <main+0x298>
	  ITM_Port32(31) = 7;
 80021b6:	4b03      	ldr	r3, [pc, #12]	; (80021c4 <main+0x2cc>)
 80021b8:	2207      	movs	r2, #7
 80021ba:	601a      	str	r2, [r3, #0]
	  ITM_Port32(31) = 1;
 80021bc:	e75d      	b.n	800207a <main+0x182>
 80021be:	bf00      	nop
 80021c0:	08003508 	.word	0x08003508
 80021c4:	e000007c 	.word	0xe000007c

080021c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b096      	sub	sp, #88	; 0x58
 80021cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021ce:	f107 0314 	add.w	r3, r7, #20
 80021d2:	2244      	movs	r2, #68	; 0x44
 80021d4:	2100      	movs	r1, #0
 80021d6:	4618      	mov	r0, r3
 80021d8:	f000 fa18 	bl	800260c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021dc:	463b      	mov	r3, r7
 80021de:	2200      	movs	r2, #0
 80021e0:	601a      	str	r2, [r3, #0]
 80021e2:	605a      	str	r2, [r3, #4]
 80021e4:	609a      	str	r2, [r3, #8]
 80021e6:	60da      	str	r2, [r3, #12]
 80021e8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80021ea:	f44f 7000 	mov.w	r0, #512	; 0x200
 80021ee:	f7fe fe3d 	bl	8000e6c <HAL_PWREx_ControlVoltageScaling>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d001      	beq.n	80021fc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80021f8:	f000 f85c 	bl	80022b4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80021fc:	2310      	movs	r3, #16
 80021fe:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002200:	2301      	movs	r3, #1
 8002202:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002204:	2300      	movs	r3, #0
 8002206:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002208:	2360      	movs	r3, #96	; 0x60
 800220a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800220c:	2302      	movs	r3, #2
 800220e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002210:	2301      	movs	r3, #1
 8002212:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002214:	2301      	movs	r3, #1
 8002216:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8002218:	2328      	movs	r3, #40	; 0x28
 800221a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800221c:	2302      	movs	r3, #2
 800221e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002220:	2302      	movs	r3, #2
 8002222:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002224:	2302      	movs	r3, #2
 8002226:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002228:	f107 0314 	add.w	r3, r7, #20
 800222c:	4618      	mov	r0, r3
 800222e:	f7fe fec1 	bl	8000fb4 <HAL_RCC_OscConfig>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8002238:	f000 f83c 	bl	80022b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800223c:	230f      	movs	r3, #15
 800223e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002240:	2303      	movs	r3, #3
 8002242:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002244:	2300      	movs	r3, #0
 8002246:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002248:	2300      	movs	r3, #0
 800224a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800224c:	2300      	movs	r3, #0
 800224e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002250:	463b      	mov	r3, r7
 8002252:	2103      	movs	r1, #3
 8002254:	4618      	mov	r0, r3
 8002256:	f7ff fac7 	bl	80017e8 <HAL_RCC_ClockConfig>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d001      	beq.n	8002264 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8002260:	f000 f828 	bl	80022b4 <Error_Handler>
  }
}
 8002264:	bf00      	nop
 8002266:	3758      	adds	r7, #88	; 0x58
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002272:	4b0f      	ldr	r3, [pc, #60]	; (80022b0 <MX_GPIO_Init+0x44>)
 8002274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002276:	4a0e      	ldr	r2, [pc, #56]	; (80022b0 <MX_GPIO_Init+0x44>)
 8002278:	f043 0301 	orr.w	r3, r3, #1
 800227c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800227e:	4b0c      	ldr	r3, [pc, #48]	; (80022b0 <MX_GPIO_Init+0x44>)
 8002280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	607b      	str	r3, [r7, #4]
 8002288:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800228a:	4b09      	ldr	r3, [pc, #36]	; (80022b0 <MX_GPIO_Init+0x44>)
 800228c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800228e:	4a08      	ldr	r2, [pc, #32]	; (80022b0 <MX_GPIO_Init+0x44>)
 8002290:	f043 0302 	orr.w	r3, r3, #2
 8002294:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002296:	4b06      	ldr	r3, [pc, #24]	; (80022b0 <MX_GPIO_Init+0x44>)
 8002298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	603b      	str	r3, [r7, #0]
 80022a0:	683b      	ldr	r3, [r7, #0]

}
 80022a2:	bf00      	nop
 80022a4:	370c      	adds	r7, #12
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	40021000 	.word	0x40021000

080022b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022b8:	b672      	cpsid	i
}
 80022ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022bc:	e7fe      	b.n	80022bc <Error_Handler+0x8>
	...

080022c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022c6:	4b0f      	ldr	r3, [pc, #60]	; (8002304 <HAL_MspInit+0x44>)
 80022c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022ca:	4a0e      	ldr	r2, [pc, #56]	; (8002304 <HAL_MspInit+0x44>)
 80022cc:	f043 0301 	orr.w	r3, r3, #1
 80022d0:	6613      	str	r3, [r2, #96]	; 0x60
 80022d2:	4b0c      	ldr	r3, [pc, #48]	; (8002304 <HAL_MspInit+0x44>)
 80022d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	607b      	str	r3, [r7, #4]
 80022dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022de:	4b09      	ldr	r3, [pc, #36]	; (8002304 <HAL_MspInit+0x44>)
 80022e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022e2:	4a08      	ldr	r2, [pc, #32]	; (8002304 <HAL_MspInit+0x44>)
 80022e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022e8:	6593      	str	r3, [r2, #88]	; 0x58
 80022ea:	4b06      	ldr	r3, [pc, #24]	; (8002304 <HAL_MspInit+0x44>)
 80022ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f2:	603b      	str	r3, [r7, #0]
 80022f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022f6:	bf00      	nop
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	40021000 	.word	0x40021000

08002308 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800230c:	e7fe      	b.n	800230c <NMI_Handler+0x4>

0800230e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800230e:	b480      	push	{r7}
 8002310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002312:	e7fe      	b.n	8002312 <HardFault_Handler+0x4>

08002314 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002318:	e7fe      	b.n	8002318 <MemManage_Handler+0x4>

0800231a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800231a:	b480      	push	{r7}
 800231c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800231e:	e7fe      	b.n	800231e <BusFault_Handler+0x4>

08002320 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002324:	e7fe      	b.n	8002324 <UsageFault_Handler+0x4>

08002326 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002326:	b480      	push	{r7}
 8002328:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800232a:	bf00      	nop
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002338:	bf00      	nop
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr

08002342 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002342:	b480      	push	{r7}
 8002344:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002346:	bf00      	nop
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002354:	f7fe fc64 	bl	8000c20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002358:	bf00      	nop
 800235a:	bd80      	pop	{r7, pc}

0800235c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002360:	4b06      	ldr	r3, [pc, #24]	; (800237c <SystemInit+0x20>)
 8002362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002366:	4a05      	ldr	r2, [pc, #20]	; (800237c <SystemInit+0x20>)
 8002368:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800236c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002370:	bf00      	nop
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	e000ed00 	.word	0xe000ed00

08002380 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002380:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023b8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002384:	f7ff ffea 	bl	800235c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002388:	480c      	ldr	r0, [pc, #48]	; (80023bc <LoopForever+0x6>)
  ldr r1, =_edata
 800238a:	490d      	ldr	r1, [pc, #52]	; (80023c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800238c:	4a0d      	ldr	r2, [pc, #52]	; (80023c4 <LoopForever+0xe>)
  movs r3, #0
 800238e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002390:	e002      	b.n	8002398 <LoopCopyDataInit>

08002392 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002392:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002394:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002396:	3304      	adds	r3, #4

08002398 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002398:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800239a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800239c:	d3f9      	bcc.n	8002392 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800239e:	4a0a      	ldr	r2, [pc, #40]	; (80023c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80023a0:	4c0a      	ldr	r4, [pc, #40]	; (80023cc <LoopForever+0x16>)
  movs r3, #0
 80023a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023a4:	e001      	b.n	80023aa <LoopFillZerobss>

080023a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023a8:	3204      	adds	r2, #4

080023aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023ac:	d3fb      	bcc.n	80023a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023ae:	f000 f8fb 	bl	80025a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80023b2:	f7ff fda1 	bl	8001ef8 <main>

080023b6 <LoopForever>:

LoopForever:
    b LoopForever
 80023b6:	e7fe      	b.n	80023b6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80023b8:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80023bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023c0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80023c4:	08004520 	.word	0x08004520
  ldr r2, =_sbss
 80023c8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80023cc:	20000090 	.word	0x20000090

080023d0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80023d0:	e7fe      	b.n	80023d0 <ADC1_IRQHandler>
	...

080023d4 <arm_std_f32>:
 80023d4:	2901      	cmp	r1, #1
 80023d6:	d97d      	bls.n	80024d4 <arm_std_f32+0x100>
 80023d8:	b530      	push	{r4, r5, lr}
 80023da:	ed2d 8b02 	vpush	{d8}
 80023de:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80024e4 <arm_std_f32+0x110>
 80023e2:	088d      	lsrs	r5, r1, #2
 80023e4:	b083      	sub	sp, #12
 80023e6:	eef0 4a47 	vmov.f32	s9, s14
 80023ea:	d028      	beq.n	800243e <arm_std_f32+0x6a>
 80023ec:	f100 0310 	add.w	r3, r0, #16
 80023f0:	462c      	mov	r4, r5
 80023f2:	ed53 7a04 	vldr	s15, [r3, #-16]
 80023f6:	ed13 5a03 	vldr	s10, [r3, #-12]
 80023fa:	ed53 5a02 	vldr	s11, [r3, #-8]
 80023fe:	ed13 6a01 	vldr	s12, [r3, #-4]
 8002402:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8002406:	ee77 7aa4 	vadd.f32	s15, s15, s9
 800240a:	ee36 7a87 	vadd.f32	s14, s13, s14
 800240e:	ee65 6a05 	vmul.f32	s13, s10, s10
 8002412:	ee77 7a85 	vadd.f32	s15, s15, s10
 8002416:	ee76 6a87 	vadd.f32	s13, s13, s14
 800241a:	ee25 7aa5 	vmul.f32	s14, s11, s11
 800241e:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8002422:	ee77 6a26 	vadd.f32	s13, s14, s13
 8002426:	ee26 7a06 	vmul.f32	s14, s12, s12
 800242a:	3c01      	subs	r4, #1
 800242c:	ee77 4a86 	vadd.f32	s9, s15, s12
 8002430:	ee37 7a26 	vadd.f32	s14, s14, s13
 8002434:	f103 0310 	add.w	r3, r3, #16
 8002438:	d1db      	bne.n	80023f2 <arm_std_f32+0x1e>
 800243a:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 800243e:	f011 0303 	ands.w	r3, r1, #3
 8002442:	d01b      	beq.n	800247c <arm_std_f32+0xa8>
 8002444:	edd0 7a00 	vldr	s15, [r0]
 8002448:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800244c:	3b01      	subs	r3, #1
 800244e:	ee74 4aa7 	vadd.f32	s9, s9, s15
 8002452:	ee37 7a26 	vadd.f32	s14, s14, s13
 8002456:	d011      	beq.n	800247c <arm_std_f32+0xa8>
 8002458:	edd0 7a01 	vldr	s15, [r0, #4]
 800245c:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8002460:	2b01      	cmp	r3, #1
 8002462:	ee74 4aa7 	vadd.f32	s9, s9, s15
 8002466:	ee37 7a26 	vadd.f32	s14, s14, s13
 800246a:	d007      	beq.n	800247c <arm_std_f32+0xa8>
 800246c:	edd0 7a02 	vldr	s15, [r0, #8]
 8002470:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8002474:	ee74 4aa7 	vadd.f32	s9, s9, s15
 8002478:	ee37 7a26 	vadd.f32	s14, s14, s13
 800247c:	ee07 1a90 	vmov	s15, r1
 8002480:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002484:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002488:	ee37 6ac6 	vsub.f32	s12, s15, s12
 800248c:	eec4 6aa7 	vdiv.f32	s13, s9, s15
 8002490:	eec7 5a86 	vdiv.f32	s11, s15, s12
 8002494:	ee87 0a06 	vdiv.f32	s0, s14, s12
 8002498:	ee66 6aa6 	vmul.f32	s13, s13, s13
 800249c:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80024a0:	ee30 0a66 	vsub.f32	s0, s0, s13
 80024a4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80024a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ac:	db0c      	blt.n	80024c8 <arm_std_f32+0xf4>
 80024ae:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80024b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024b6:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80024ba:	d40e      	bmi.n	80024da <arm_std_f32+0x106>
 80024bc:	ed82 8a00 	vstr	s16, [r2]
 80024c0:	b003      	add	sp, #12
 80024c2:	ecbd 8b02 	vpop	{d8}
 80024c6:	bd30      	pop	{r4, r5, pc}
 80024c8:	2300      	movs	r3, #0
 80024ca:	6013      	str	r3, [r2, #0]
 80024cc:	b003      	add	sp, #12
 80024ce:	ecbd 8b02 	vpop	{d8}
 80024d2:	bd30      	pop	{r4, r5, pc}
 80024d4:	2300      	movs	r3, #0
 80024d6:	6013      	str	r3, [r2, #0]
 80024d8:	4770      	bx	lr
 80024da:	9201      	str	r2, [sp, #4]
 80024dc:	f000 f93a 	bl	8002754 <sqrtf>
 80024e0:	9a01      	ldr	r2, [sp, #4]
 80024e2:	e7eb      	b.n	80024bc <arm_std_f32+0xe8>
 80024e4:	00000000 	.word	0x00000000

080024e8 <arm_mult_f32>:
 80024e8:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 80024ec:	b4f0      	push	{r4, r5, r6, r7}
 80024ee:	d033      	beq.n	8002558 <arm_mult_f32+0x70>
 80024f0:	f100 0610 	add.w	r6, r0, #16
 80024f4:	f101 0510 	add.w	r5, r1, #16
 80024f8:	f102 0410 	add.w	r4, r2, #16
 80024fc:	4667      	mov	r7, ip
 80024fe:	ed15 7a04 	vldr	s14, [r5, #-16]
 8002502:	ed56 7a04 	vldr	s15, [r6, #-16]
 8002506:	ee67 7a87 	vmul.f32	s15, s15, s14
 800250a:	3f01      	subs	r7, #1
 800250c:	ed44 7a04 	vstr	s15, [r4, #-16]
 8002510:	ed15 7a03 	vldr	s14, [r5, #-12]
 8002514:	ed56 7a03 	vldr	s15, [r6, #-12]
 8002518:	ee67 7a87 	vmul.f32	s15, s15, s14
 800251c:	f106 0610 	add.w	r6, r6, #16
 8002520:	ed44 7a03 	vstr	s15, [r4, #-12]
 8002524:	ed15 7a02 	vldr	s14, [r5, #-8]
 8002528:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 800252c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002530:	f105 0510 	add.w	r5, r5, #16
 8002534:	ed44 7a02 	vstr	s15, [r4, #-8]
 8002538:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 800253c:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 8002540:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002544:	f104 0410 	add.w	r4, r4, #16
 8002548:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 800254c:	d1d7      	bne.n	80024fe <arm_mult_f32+0x16>
 800254e:	ea4f 140c 	mov.w	r4, ip, lsl #4
 8002552:	4420      	add	r0, r4
 8002554:	4421      	add	r1, r4
 8002556:	4422      	add	r2, r4
 8002558:	f013 0303 	ands.w	r3, r3, #3
 800255c:	d01b      	beq.n	8002596 <arm_mult_f32+0xae>
 800255e:	edd1 7a00 	vldr	s15, [r1]
 8002562:	ed90 7a00 	vldr	s14, [r0]
 8002566:	ee67 7a87 	vmul.f32	s15, s15, s14
 800256a:	3b01      	subs	r3, #1
 800256c:	edc2 7a00 	vstr	s15, [r2]
 8002570:	d011      	beq.n	8002596 <arm_mult_f32+0xae>
 8002572:	edd0 7a01 	vldr	s15, [r0, #4]
 8002576:	ed91 7a01 	vldr	s14, [r1, #4]
 800257a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800257e:	2b01      	cmp	r3, #1
 8002580:	edc2 7a01 	vstr	s15, [r2, #4]
 8002584:	d007      	beq.n	8002596 <arm_mult_f32+0xae>
 8002586:	edd0 7a02 	vldr	s15, [r0, #8]
 800258a:	ed91 7a02 	vldr	s14, [r1, #8]
 800258e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002592:	edc2 7a02 	vstr	s15, [r2, #8]
 8002596:	bcf0      	pop	{r4, r5, r6, r7}
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop

0800259c <__errno>:
 800259c:	4b01      	ldr	r3, [pc, #4]	; (80025a4 <__errno+0x8>)
 800259e:	6818      	ldr	r0, [r3, #0]
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	2000000c 	.word	0x2000000c

080025a8 <__libc_init_array>:
 80025a8:	b570      	push	{r4, r5, r6, lr}
 80025aa:	4d0d      	ldr	r5, [pc, #52]	; (80025e0 <__libc_init_array+0x38>)
 80025ac:	4c0d      	ldr	r4, [pc, #52]	; (80025e4 <__libc_init_array+0x3c>)
 80025ae:	1b64      	subs	r4, r4, r5
 80025b0:	10a4      	asrs	r4, r4, #2
 80025b2:	2600      	movs	r6, #0
 80025b4:	42a6      	cmp	r6, r4
 80025b6:	d109      	bne.n	80025cc <__libc_init_array+0x24>
 80025b8:	4d0b      	ldr	r5, [pc, #44]	; (80025e8 <__libc_init_array+0x40>)
 80025ba:	4c0c      	ldr	r4, [pc, #48]	; (80025ec <__libc_init_array+0x44>)
 80025bc:	f000 ff96 	bl	80034ec <_init>
 80025c0:	1b64      	subs	r4, r4, r5
 80025c2:	10a4      	asrs	r4, r4, #2
 80025c4:	2600      	movs	r6, #0
 80025c6:	42a6      	cmp	r6, r4
 80025c8:	d105      	bne.n	80025d6 <__libc_init_array+0x2e>
 80025ca:	bd70      	pop	{r4, r5, r6, pc}
 80025cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80025d0:	4798      	blx	r3
 80025d2:	3601      	adds	r6, #1
 80025d4:	e7ee      	b.n	80025b4 <__libc_init_array+0xc>
 80025d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80025da:	4798      	blx	r3
 80025dc:	3601      	adds	r6, #1
 80025de:	e7f2      	b.n	80025c6 <__libc_init_array+0x1e>
 80025e0:	08004518 	.word	0x08004518
 80025e4:	08004518 	.word	0x08004518
 80025e8:	08004518 	.word	0x08004518
 80025ec:	0800451c 	.word	0x0800451c

080025f0 <memcpy>:
 80025f0:	440a      	add	r2, r1
 80025f2:	4291      	cmp	r1, r2
 80025f4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80025f8:	d100      	bne.n	80025fc <memcpy+0xc>
 80025fa:	4770      	bx	lr
 80025fc:	b510      	push	{r4, lr}
 80025fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002602:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002606:	4291      	cmp	r1, r2
 8002608:	d1f9      	bne.n	80025fe <memcpy+0xe>
 800260a:	bd10      	pop	{r4, pc}

0800260c <memset>:
 800260c:	4402      	add	r2, r0
 800260e:	4603      	mov	r3, r0
 8002610:	4293      	cmp	r3, r2
 8002612:	d100      	bne.n	8002616 <memset+0xa>
 8002614:	4770      	bx	lr
 8002616:	f803 1b01 	strb.w	r1, [r3], #1
 800261a:	e7f9      	b.n	8002610 <memset+0x4>

0800261c <pow>:
 800261c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800261e:	ed2d 8b02 	vpush	{d8}
 8002622:	eeb0 8a40 	vmov.f32	s16, s0
 8002626:	eef0 8a60 	vmov.f32	s17, s1
 800262a:	ec55 4b11 	vmov	r4, r5, d1
 800262e:	f000 f8af 	bl	8002790 <__ieee754_pow>
 8002632:	4622      	mov	r2, r4
 8002634:	462b      	mov	r3, r5
 8002636:	4620      	mov	r0, r4
 8002638:	4629      	mov	r1, r5
 800263a:	ec57 6b10 	vmov	r6, r7, d0
 800263e:	f7fe fa35 	bl	8000aac <__aeabi_dcmpun>
 8002642:	2800      	cmp	r0, #0
 8002644:	d13b      	bne.n	80026be <pow+0xa2>
 8002646:	ec51 0b18 	vmov	r0, r1, d8
 800264a:	2200      	movs	r2, #0
 800264c:	2300      	movs	r3, #0
 800264e:	f7fe f9fb 	bl	8000a48 <__aeabi_dcmpeq>
 8002652:	b1b8      	cbz	r0, 8002684 <pow+0x68>
 8002654:	2200      	movs	r2, #0
 8002656:	2300      	movs	r3, #0
 8002658:	4620      	mov	r0, r4
 800265a:	4629      	mov	r1, r5
 800265c:	f7fe f9f4 	bl	8000a48 <__aeabi_dcmpeq>
 8002660:	2800      	cmp	r0, #0
 8002662:	d146      	bne.n	80026f2 <pow+0xd6>
 8002664:	ec45 4b10 	vmov	d0, r4, r5
 8002668:	f000 feae 	bl	80033c8 <finite>
 800266c:	b338      	cbz	r0, 80026be <pow+0xa2>
 800266e:	2200      	movs	r2, #0
 8002670:	2300      	movs	r3, #0
 8002672:	4620      	mov	r0, r4
 8002674:	4629      	mov	r1, r5
 8002676:	f7fe f9f1 	bl	8000a5c <__aeabi_dcmplt>
 800267a:	b300      	cbz	r0, 80026be <pow+0xa2>
 800267c:	f7ff ff8e 	bl	800259c <__errno>
 8002680:	2322      	movs	r3, #34	; 0x22
 8002682:	e01b      	b.n	80026bc <pow+0xa0>
 8002684:	ec47 6b10 	vmov	d0, r6, r7
 8002688:	f000 fe9e 	bl	80033c8 <finite>
 800268c:	b9e0      	cbnz	r0, 80026c8 <pow+0xac>
 800268e:	eeb0 0a48 	vmov.f32	s0, s16
 8002692:	eef0 0a68 	vmov.f32	s1, s17
 8002696:	f000 fe97 	bl	80033c8 <finite>
 800269a:	b1a8      	cbz	r0, 80026c8 <pow+0xac>
 800269c:	ec45 4b10 	vmov	d0, r4, r5
 80026a0:	f000 fe92 	bl	80033c8 <finite>
 80026a4:	b180      	cbz	r0, 80026c8 <pow+0xac>
 80026a6:	4632      	mov	r2, r6
 80026a8:	463b      	mov	r3, r7
 80026aa:	4630      	mov	r0, r6
 80026ac:	4639      	mov	r1, r7
 80026ae:	f7fe f9fd 	bl	8000aac <__aeabi_dcmpun>
 80026b2:	2800      	cmp	r0, #0
 80026b4:	d0e2      	beq.n	800267c <pow+0x60>
 80026b6:	f7ff ff71 	bl	800259c <__errno>
 80026ba:	2321      	movs	r3, #33	; 0x21
 80026bc:	6003      	str	r3, [r0, #0]
 80026be:	ecbd 8b02 	vpop	{d8}
 80026c2:	ec47 6b10 	vmov	d0, r6, r7
 80026c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80026c8:	2200      	movs	r2, #0
 80026ca:	2300      	movs	r3, #0
 80026cc:	4630      	mov	r0, r6
 80026ce:	4639      	mov	r1, r7
 80026d0:	f7fe f9ba 	bl	8000a48 <__aeabi_dcmpeq>
 80026d4:	2800      	cmp	r0, #0
 80026d6:	d0f2      	beq.n	80026be <pow+0xa2>
 80026d8:	eeb0 0a48 	vmov.f32	s0, s16
 80026dc:	eef0 0a68 	vmov.f32	s1, s17
 80026e0:	f000 fe72 	bl	80033c8 <finite>
 80026e4:	2800      	cmp	r0, #0
 80026e6:	d0ea      	beq.n	80026be <pow+0xa2>
 80026e8:	ec45 4b10 	vmov	d0, r4, r5
 80026ec:	f000 fe6c 	bl	80033c8 <finite>
 80026f0:	e7c3      	b.n	800267a <pow+0x5e>
 80026f2:	4f01      	ldr	r7, [pc, #4]	; (80026f8 <pow+0xdc>)
 80026f4:	2600      	movs	r6, #0
 80026f6:	e7e2      	b.n	80026be <pow+0xa2>
 80026f8:	3ff00000 	.word	0x3ff00000

080026fc <sqrt>:
 80026fc:	b538      	push	{r3, r4, r5, lr}
 80026fe:	ed2d 8b02 	vpush	{d8}
 8002702:	ec55 4b10 	vmov	r4, r5, d0
 8002706:	f000 fd71 	bl	80031ec <__ieee754_sqrt>
 800270a:	4622      	mov	r2, r4
 800270c:	462b      	mov	r3, r5
 800270e:	4620      	mov	r0, r4
 8002710:	4629      	mov	r1, r5
 8002712:	eeb0 8a40 	vmov.f32	s16, s0
 8002716:	eef0 8a60 	vmov.f32	s17, s1
 800271a:	f7fe f9c7 	bl	8000aac <__aeabi_dcmpun>
 800271e:	b990      	cbnz	r0, 8002746 <sqrt+0x4a>
 8002720:	2200      	movs	r2, #0
 8002722:	2300      	movs	r3, #0
 8002724:	4620      	mov	r0, r4
 8002726:	4629      	mov	r1, r5
 8002728:	f7fe f998 	bl	8000a5c <__aeabi_dcmplt>
 800272c:	b158      	cbz	r0, 8002746 <sqrt+0x4a>
 800272e:	f7ff ff35 	bl	800259c <__errno>
 8002732:	2321      	movs	r3, #33	; 0x21
 8002734:	6003      	str	r3, [r0, #0]
 8002736:	2200      	movs	r2, #0
 8002738:	2300      	movs	r3, #0
 800273a:	4610      	mov	r0, r2
 800273c:	4619      	mov	r1, r3
 800273e:	f7fe f845 	bl	80007cc <__aeabi_ddiv>
 8002742:	ec41 0b18 	vmov	d8, r0, r1
 8002746:	eeb0 0a48 	vmov.f32	s0, s16
 800274a:	eef0 0a68 	vmov.f32	s1, s17
 800274e:	ecbd 8b02 	vpop	{d8}
 8002752:	bd38      	pop	{r3, r4, r5, pc}

08002754 <sqrtf>:
 8002754:	b508      	push	{r3, lr}
 8002756:	ed2d 8b02 	vpush	{d8}
 800275a:	eeb0 8a40 	vmov.f32	s16, s0
 800275e:	f000 fdf7 	bl	8003350 <__ieee754_sqrtf>
 8002762:	eeb4 8a48 	vcmp.f32	s16, s16
 8002766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800276a:	d60c      	bvs.n	8002786 <sqrtf+0x32>
 800276c:	eddf 8a07 	vldr	s17, [pc, #28]	; 800278c <sqrtf+0x38>
 8002770:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8002774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002778:	d505      	bpl.n	8002786 <sqrtf+0x32>
 800277a:	f7ff ff0f 	bl	800259c <__errno>
 800277e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8002782:	2321      	movs	r3, #33	; 0x21
 8002784:	6003      	str	r3, [r0, #0]
 8002786:	ecbd 8b02 	vpop	{d8}
 800278a:	bd08      	pop	{r3, pc}
 800278c:	00000000 	.word	0x00000000

08002790 <__ieee754_pow>:
 8002790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002794:	ed2d 8b06 	vpush	{d8-d10}
 8002798:	b089      	sub	sp, #36	; 0x24
 800279a:	ed8d 1b00 	vstr	d1, [sp]
 800279e:	e9dd 2900 	ldrd	r2, r9, [sp]
 80027a2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80027a6:	ea58 0102 	orrs.w	r1, r8, r2
 80027aa:	ec57 6b10 	vmov	r6, r7, d0
 80027ae:	d115      	bne.n	80027dc <__ieee754_pow+0x4c>
 80027b0:	19b3      	adds	r3, r6, r6
 80027b2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80027b6:	4152      	adcs	r2, r2
 80027b8:	4299      	cmp	r1, r3
 80027ba:	4b89      	ldr	r3, [pc, #548]	; (80029e0 <__ieee754_pow+0x250>)
 80027bc:	4193      	sbcs	r3, r2
 80027be:	f080 84d2 	bcs.w	8003166 <__ieee754_pow+0x9d6>
 80027c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80027c6:	4630      	mov	r0, r6
 80027c8:	4639      	mov	r1, r7
 80027ca:	f7fd fd1f 	bl	800020c <__adddf3>
 80027ce:	ec41 0b10 	vmov	d0, r0, r1
 80027d2:	b009      	add	sp, #36	; 0x24
 80027d4:	ecbd 8b06 	vpop	{d8-d10}
 80027d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80027dc:	4b81      	ldr	r3, [pc, #516]	; (80029e4 <__ieee754_pow+0x254>)
 80027de:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80027e2:	429c      	cmp	r4, r3
 80027e4:	ee10 aa10 	vmov	sl, s0
 80027e8:	463d      	mov	r5, r7
 80027ea:	dc06      	bgt.n	80027fa <__ieee754_pow+0x6a>
 80027ec:	d101      	bne.n	80027f2 <__ieee754_pow+0x62>
 80027ee:	2e00      	cmp	r6, #0
 80027f0:	d1e7      	bne.n	80027c2 <__ieee754_pow+0x32>
 80027f2:	4598      	cmp	r8, r3
 80027f4:	dc01      	bgt.n	80027fa <__ieee754_pow+0x6a>
 80027f6:	d10f      	bne.n	8002818 <__ieee754_pow+0x88>
 80027f8:	b172      	cbz	r2, 8002818 <__ieee754_pow+0x88>
 80027fa:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80027fe:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8002802:	ea55 050a 	orrs.w	r5, r5, sl
 8002806:	d1dc      	bne.n	80027c2 <__ieee754_pow+0x32>
 8002808:	e9dd 3200 	ldrd	r3, r2, [sp]
 800280c:	18db      	adds	r3, r3, r3
 800280e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8002812:	4152      	adcs	r2, r2
 8002814:	429d      	cmp	r5, r3
 8002816:	e7d0      	b.n	80027ba <__ieee754_pow+0x2a>
 8002818:	2d00      	cmp	r5, #0
 800281a:	da3b      	bge.n	8002894 <__ieee754_pow+0x104>
 800281c:	4b72      	ldr	r3, [pc, #456]	; (80029e8 <__ieee754_pow+0x258>)
 800281e:	4598      	cmp	r8, r3
 8002820:	dc51      	bgt.n	80028c6 <__ieee754_pow+0x136>
 8002822:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8002826:	4598      	cmp	r8, r3
 8002828:	f340 84ac 	ble.w	8003184 <__ieee754_pow+0x9f4>
 800282c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8002830:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8002834:	2b14      	cmp	r3, #20
 8002836:	dd0f      	ble.n	8002858 <__ieee754_pow+0xc8>
 8002838:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800283c:	fa22 f103 	lsr.w	r1, r2, r3
 8002840:	fa01 f303 	lsl.w	r3, r1, r3
 8002844:	4293      	cmp	r3, r2
 8002846:	f040 849d 	bne.w	8003184 <__ieee754_pow+0x9f4>
 800284a:	f001 0101 	and.w	r1, r1, #1
 800284e:	f1c1 0302 	rsb	r3, r1, #2
 8002852:	9304      	str	r3, [sp, #16]
 8002854:	b182      	cbz	r2, 8002878 <__ieee754_pow+0xe8>
 8002856:	e05f      	b.n	8002918 <__ieee754_pow+0x188>
 8002858:	2a00      	cmp	r2, #0
 800285a:	d15b      	bne.n	8002914 <__ieee754_pow+0x184>
 800285c:	f1c3 0314 	rsb	r3, r3, #20
 8002860:	fa48 f103 	asr.w	r1, r8, r3
 8002864:	fa01 f303 	lsl.w	r3, r1, r3
 8002868:	4543      	cmp	r3, r8
 800286a:	f040 8488 	bne.w	800317e <__ieee754_pow+0x9ee>
 800286e:	f001 0101 	and.w	r1, r1, #1
 8002872:	f1c1 0302 	rsb	r3, r1, #2
 8002876:	9304      	str	r3, [sp, #16]
 8002878:	4b5c      	ldr	r3, [pc, #368]	; (80029ec <__ieee754_pow+0x25c>)
 800287a:	4598      	cmp	r8, r3
 800287c:	d132      	bne.n	80028e4 <__ieee754_pow+0x154>
 800287e:	f1b9 0f00 	cmp.w	r9, #0
 8002882:	f280 8478 	bge.w	8003176 <__ieee754_pow+0x9e6>
 8002886:	4959      	ldr	r1, [pc, #356]	; (80029ec <__ieee754_pow+0x25c>)
 8002888:	4632      	mov	r2, r6
 800288a:	463b      	mov	r3, r7
 800288c:	2000      	movs	r0, #0
 800288e:	f7fd ff9d 	bl	80007cc <__aeabi_ddiv>
 8002892:	e79c      	b.n	80027ce <__ieee754_pow+0x3e>
 8002894:	2300      	movs	r3, #0
 8002896:	9304      	str	r3, [sp, #16]
 8002898:	2a00      	cmp	r2, #0
 800289a:	d13d      	bne.n	8002918 <__ieee754_pow+0x188>
 800289c:	4b51      	ldr	r3, [pc, #324]	; (80029e4 <__ieee754_pow+0x254>)
 800289e:	4598      	cmp	r8, r3
 80028a0:	d1ea      	bne.n	8002878 <__ieee754_pow+0xe8>
 80028a2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80028a6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80028aa:	ea53 030a 	orrs.w	r3, r3, sl
 80028ae:	f000 845a 	beq.w	8003166 <__ieee754_pow+0x9d6>
 80028b2:	4b4f      	ldr	r3, [pc, #316]	; (80029f0 <__ieee754_pow+0x260>)
 80028b4:	429c      	cmp	r4, r3
 80028b6:	dd08      	ble.n	80028ca <__ieee754_pow+0x13a>
 80028b8:	f1b9 0f00 	cmp.w	r9, #0
 80028bc:	f2c0 8457 	blt.w	800316e <__ieee754_pow+0x9de>
 80028c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80028c4:	e783      	b.n	80027ce <__ieee754_pow+0x3e>
 80028c6:	2302      	movs	r3, #2
 80028c8:	e7e5      	b.n	8002896 <__ieee754_pow+0x106>
 80028ca:	f1b9 0f00 	cmp.w	r9, #0
 80028ce:	f04f 0000 	mov.w	r0, #0
 80028d2:	f04f 0100 	mov.w	r1, #0
 80028d6:	f6bf af7a 	bge.w	80027ce <__ieee754_pow+0x3e>
 80028da:	e9dd 0300 	ldrd	r0, r3, [sp]
 80028de:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80028e2:	e774      	b.n	80027ce <__ieee754_pow+0x3e>
 80028e4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80028e8:	d106      	bne.n	80028f8 <__ieee754_pow+0x168>
 80028ea:	4632      	mov	r2, r6
 80028ec:	463b      	mov	r3, r7
 80028ee:	4630      	mov	r0, r6
 80028f0:	4639      	mov	r1, r7
 80028f2:	f7fd fe41 	bl	8000578 <__aeabi_dmul>
 80028f6:	e76a      	b.n	80027ce <__ieee754_pow+0x3e>
 80028f8:	4b3e      	ldr	r3, [pc, #248]	; (80029f4 <__ieee754_pow+0x264>)
 80028fa:	4599      	cmp	r9, r3
 80028fc:	d10c      	bne.n	8002918 <__ieee754_pow+0x188>
 80028fe:	2d00      	cmp	r5, #0
 8002900:	db0a      	blt.n	8002918 <__ieee754_pow+0x188>
 8002902:	ec47 6b10 	vmov	d0, r6, r7
 8002906:	b009      	add	sp, #36	; 0x24
 8002908:	ecbd 8b06 	vpop	{d8-d10}
 800290c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002910:	f000 bc6c 	b.w	80031ec <__ieee754_sqrt>
 8002914:	2300      	movs	r3, #0
 8002916:	9304      	str	r3, [sp, #16]
 8002918:	ec47 6b10 	vmov	d0, r6, r7
 800291c:	f000 fd4b 	bl	80033b6 <fabs>
 8002920:	ec51 0b10 	vmov	r0, r1, d0
 8002924:	f1ba 0f00 	cmp.w	sl, #0
 8002928:	d129      	bne.n	800297e <__ieee754_pow+0x1ee>
 800292a:	b124      	cbz	r4, 8002936 <__ieee754_pow+0x1a6>
 800292c:	4b2f      	ldr	r3, [pc, #188]	; (80029ec <__ieee754_pow+0x25c>)
 800292e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8002932:	429a      	cmp	r2, r3
 8002934:	d123      	bne.n	800297e <__ieee754_pow+0x1ee>
 8002936:	f1b9 0f00 	cmp.w	r9, #0
 800293a:	da05      	bge.n	8002948 <__ieee754_pow+0x1b8>
 800293c:	4602      	mov	r2, r0
 800293e:	460b      	mov	r3, r1
 8002940:	2000      	movs	r0, #0
 8002942:	492a      	ldr	r1, [pc, #168]	; (80029ec <__ieee754_pow+0x25c>)
 8002944:	f7fd ff42 	bl	80007cc <__aeabi_ddiv>
 8002948:	2d00      	cmp	r5, #0
 800294a:	f6bf af40 	bge.w	80027ce <__ieee754_pow+0x3e>
 800294e:	9b04      	ldr	r3, [sp, #16]
 8002950:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8002954:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8002958:	4323      	orrs	r3, r4
 800295a:	d108      	bne.n	800296e <__ieee754_pow+0x1de>
 800295c:	4602      	mov	r2, r0
 800295e:	460b      	mov	r3, r1
 8002960:	4610      	mov	r0, r2
 8002962:	4619      	mov	r1, r3
 8002964:	f7fd fc50 	bl	8000208 <__aeabi_dsub>
 8002968:	4602      	mov	r2, r0
 800296a:	460b      	mov	r3, r1
 800296c:	e78f      	b.n	800288e <__ieee754_pow+0xfe>
 800296e:	9b04      	ldr	r3, [sp, #16]
 8002970:	2b01      	cmp	r3, #1
 8002972:	f47f af2c 	bne.w	80027ce <__ieee754_pow+0x3e>
 8002976:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800297a:	4619      	mov	r1, r3
 800297c:	e727      	b.n	80027ce <__ieee754_pow+0x3e>
 800297e:	0feb      	lsrs	r3, r5, #31
 8002980:	3b01      	subs	r3, #1
 8002982:	9306      	str	r3, [sp, #24]
 8002984:	9a06      	ldr	r2, [sp, #24]
 8002986:	9b04      	ldr	r3, [sp, #16]
 8002988:	4313      	orrs	r3, r2
 800298a:	d102      	bne.n	8002992 <__ieee754_pow+0x202>
 800298c:	4632      	mov	r2, r6
 800298e:	463b      	mov	r3, r7
 8002990:	e7e6      	b.n	8002960 <__ieee754_pow+0x1d0>
 8002992:	4b19      	ldr	r3, [pc, #100]	; (80029f8 <__ieee754_pow+0x268>)
 8002994:	4598      	cmp	r8, r3
 8002996:	f340 80fb 	ble.w	8002b90 <__ieee754_pow+0x400>
 800299a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800299e:	4598      	cmp	r8, r3
 80029a0:	4b13      	ldr	r3, [pc, #76]	; (80029f0 <__ieee754_pow+0x260>)
 80029a2:	dd0c      	ble.n	80029be <__ieee754_pow+0x22e>
 80029a4:	429c      	cmp	r4, r3
 80029a6:	dc0f      	bgt.n	80029c8 <__ieee754_pow+0x238>
 80029a8:	f1b9 0f00 	cmp.w	r9, #0
 80029ac:	da0f      	bge.n	80029ce <__ieee754_pow+0x23e>
 80029ae:	2000      	movs	r0, #0
 80029b0:	b009      	add	sp, #36	; 0x24
 80029b2:	ecbd 8b06 	vpop	{d8-d10}
 80029b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029ba:	f000 bcf3 	b.w	80033a4 <__math_oflow>
 80029be:	429c      	cmp	r4, r3
 80029c0:	dbf2      	blt.n	80029a8 <__ieee754_pow+0x218>
 80029c2:	4b0a      	ldr	r3, [pc, #40]	; (80029ec <__ieee754_pow+0x25c>)
 80029c4:	429c      	cmp	r4, r3
 80029c6:	dd19      	ble.n	80029fc <__ieee754_pow+0x26c>
 80029c8:	f1b9 0f00 	cmp.w	r9, #0
 80029cc:	dcef      	bgt.n	80029ae <__ieee754_pow+0x21e>
 80029ce:	2000      	movs	r0, #0
 80029d0:	b009      	add	sp, #36	; 0x24
 80029d2:	ecbd 8b06 	vpop	{d8-d10}
 80029d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029da:	f000 bcda 	b.w	8003392 <__math_uflow>
 80029de:	bf00      	nop
 80029e0:	fff00000 	.word	0xfff00000
 80029e4:	7ff00000 	.word	0x7ff00000
 80029e8:	433fffff 	.word	0x433fffff
 80029ec:	3ff00000 	.word	0x3ff00000
 80029f0:	3fefffff 	.word	0x3fefffff
 80029f4:	3fe00000 	.word	0x3fe00000
 80029f8:	41e00000 	.word	0x41e00000
 80029fc:	4b60      	ldr	r3, [pc, #384]	; (8002b80 <__ieee754_pow+0x3f0>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	f7fd fc02 	bl	8000208 <__aeabi_dsub>
 8002a04:	a354      	add	r3, pc, #336	; (adr r3, 8002b58 <__ieee754_pow+0x3c8>)
 8002a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a0a:	4604      	mov	r4, r0
 8002a0c:	460d      	mov	r5, r1
 8002a0e:	f7fd fdb3 	bl	8000578 <__aeabi_dmul>
 8002a12:	a353      	add	r3, pc, #332	; (adr r3, 8002b60 <__ieee754_pow+0x3d0>)
 8002a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a18:	4606      	mov	r6, r0
 8002a1a:	460f      	mov	r7, r1
 8002a1c:	4620      	mov	r0, r4
 8002a1e:	4629      	mov	r1, r5
 8002a20:	f7fd fdaa 	bl	8000578 <__aeabi_dmul>
 8002a24:	4b57      	ldr	r3, [pc, #348]	; (8002b84 <__ieee754_pow+0x3f4>)
 8002a26:	4682      	mov	sl, r0
 8002a28:	468b      	mov	fp, r1
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	4620      	mov	r0, r4
 8002a2e:	4629      	mov	r1, r5
 8002a30:	f7fd fda2 	bl	8000578 <__aeabi_dmul>
 8002a34:	4602      	mov	r2, r0
 8002a36:	460b      	mov	r3, r1
 8002a38:	a14b      	add	r1, pc, #300	; (adr r1, 8002b68 <__ieee754_pow+0x3d8>)
 8002a3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002a3e:	f7fd fbe3 	bl	8000208 <__aeabi_dsub>
 8002a42:	4622      	mov	r2, r4
 8002a44:	462b      	mov	r3, r5
 8002a46:	f7fd fd97 	bl	8000578 <__aeabi_dmul>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	460b      	mov	r3, r1
 8002a4e:	2000      	movs	r0, #0
 8002a50:	494d      	ldr	r1, [pc, #308]	; (8002b88 <__ieee754_pow+0x3f8>)
 8002a52:	f7fd fbd9 	bl	8000208 <__aeabi_dsub>
 8002a56:	4622      	mov	r2, r4
 8002a58:	4680      	mov	r8, r0
 8002a5a:	4689      	mov	r9, r1
 8002a5c:	462b      	mov	r3, r5
 8002a5e:	4620      	mov	r0, r4
 8002a60:	4629      	mov	r1, r5
 8002a62:	f7fd fd89 	bl	8000578 <__aeabi_dmul>
 8002a66:	4602      	mov	r2, r0
 8002a68:	460b      	mov	r3, r1
 8002a6a:	4640      	mov	r0, r8
 8002a6c:	4649      	mov	r1, r9
 8002a6e:	f7fd fd83 	bl	8000578 <__aeabi_dmul>
 8002a72:	a33f      	add	r3, pc, #252	; (adr r3, 8002b70 <__ieee754_pow+0x3e0>)
 8002a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a78:	f7fd fd7e 	bl	8000578 <__aeabi_dmul>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	460b      	mov	r3, r1
 8002a80:	4650      	mov	r0, sl
 8002a82:	4659      	mov	r1, fp
 8002a84:	f7fd fbc0 	bl	8000208 <__aeabi_dsub>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	4680      	mov	r8, r0
 8002a8e:	4689      	mov	r9, r1
 8002a90:	4630      	mov	r0, r6
 8002a92:	4639      	mov	r1, r7
 8002a94:	f7fd fbba 	bl	800020c <__adddf3>
 8002a98:	2000      	movs	r0, #0
 8002a9a:	4632      	mov	r2, r6
 8002a9c:	463b      	mov	r3, r7
 8002a9e:	4604      	mov	r4, r0
 8002aa0:	460d      	mov	r5, r1
 8002aa2:	f7fd fbb1 	bl	8000208 <__aeabi_dsub>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	460b      	mov	r3, r1
 8002aaa:	4640      	mov	r0, r8
 8002aac:	4649      	mov	r1, r9
 8002aae:	f7fd fbab 	bl	8000208 <__aeabi_dsub>
 8002ab2:	9b04      	ldr	r3, [sp, #16]
 8002ab4:	9a06      	ldr	r2, [sp, #24]
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	4682      	mov	sl, r0
 8002abc:	468b      	mov	fp, r1
 8002abe:	f040 81e7 	bne.w	8002e90 <__ieee754_pow+0x700>
 8002ac2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8002b78 <__ieee754_pow+0x3e8>
 8002ac6:	eeb0 8a47 	vmov.f32	s16, s14
 8002aca:	eef0 8a67 	vmov.f32	s17, s15
 8002ace:	e9dd 6700 	ldrd	r6, r7, [sp]
 8002ad2:	2600      	movs	r6, #0
 8002ad4:	4632      	mov	r2, r6
 8002ad6:	463b      	mov	r3, r7
 8002ad8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002adc:	f7fd fb94 	bl	8000208 <__aeabi_dsub>
 8002ae0:	4622      	mov	r2, r4
 8002ae2:	462b      	mov	r3, r5
 8002ae4:	f7fd fd48 	bl	8000578 <__aeabi_dmul>
 8002ae8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002aec:	4680      	mov	r8, r0
 8002aee:	4689      	mov	r9, r1
 8002af0:	4650      	mov	r0, sl
 8002af2:	4659      	mov	r1, fp
 8002af4:	f7fd fd40 	bl	8000578 <__aeabi_dmul>
 8002af8:	4602      	mov	r2, r0
 8002afa:	460b      	mov	r3, r1
 8002afc:	4640      	mov	r0, r8
 8002afe:	4649      	mov	r1, r9
 8002b00:	f7fd fb84 	bl	800020c <__adddf3>
 8002b04:	4632      	mov	r2, r6
 8002b06:	463b      	mov	r3, r7
 8002b08:	4680      	mov	r8, r0
 8002b0a:	4689      	mov	r9, r1
 8002b0c:	4620      	mov	r0, r4
 8002b0e:	4629      	mov	r1, r5
 8002b10:	f7fd fd32 	bl	8000578 <__aeabi_dmul>
 8002b14:	460b      	mov	r3, r1
 8002b16:	4604      	mov	r4, r0
 8002b18:	460d      	mov	r5, r1
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	4649      	mov	r1, r9
 8002b1e:	4640      	mov	r0, r8
 8002b20:	f7fd fb74 	bl	800020c <__adddf3>
 8002b24:	4b19      	ldr	r3, [pc, #100]	; (8002b8c <__ieee754_pow+0x3fc>)
 8002b26:	4299      	cmp	r1, r3
 8002b28:	ec45 4b19 	vmov	d9, r4, r5
 8002b2c:	4606      	mov	r6, r0
 8002b2e:	460f      	mov	r7, r1
 8002b30:	468b      	mov	fp, r1
 8002b32:	f340 82f1 	ble.w	8003118 <__ieee754_pow+0x988>
 8002b36:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8002b3a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8002b3e:	4303      	orrs	r3, r0
 8002b40:	f000 81e4 	beq.w	8002f0c <__ieee754_pow+0x77c>
 8002b44:	ec51 0b18 	vmov	r0, r1, d8
 8002b48:	2200      	movs	r2, #0
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	f7fd ff86 	bl	8000a5c <__aeabi_dcmplt>
 8002b50:	3800      	subs	r0, #0
 8002b52:	bf18      	it	ne
 8002b54:	2001      	movne	r0, #1
 8002b56:	e72b      	b.n	80029b0 <__ieee754_pow+0x220>
 8002b58:	60000000 	.word	0x60000000
 8002b5c:	3ff71547 	.word	0x3ff71547
 8002b60:	f85ddf44 	.word	0xf85ddf44
 8002b64:	3e54ae0b 	.word	0x3e54ae0b
 8002b68:	55555555 	.word	0x55555555
 8002b6c:	3fd55555 	.word	0x3fd55555
 8002b70:	652b82fe 	.word	0x652b82fe
 8002b74:	3ff71547 	.word	0x3ff71547
 8002b78:	00000000 	.word	0x00000000
 8002b7c:	bff00000 	.word	0xbff00000
 8002b80:	3ff00000 	.word	0x3ff00000
 8002b84:	3fd00000 	.word	0x3fd00000
 8002b88:	3fe00000 	.word	0x3fe00000
 8002b8c:	408fffff 	.word	0x408fffff
 8002b90:	4bd5      	ldr	r3, [pc, #852]	; (8002ee8 <__ieee754_pow+0x758>)
 8002b92:	402b      	ands	r3, r5
 8002b94:	2200      	movs	r2, #0
 8002b96:	b92b      	cbnz	r3, 8002ba4 <__ieee754_pow+0x414>
 8002b98:	4bd4      	ldr	r3, [pc, #848]	; (8002eec <__ieee754_pow+0x75c>)
 8002b9a:	f7fd fced 	bl	8000578 <__aeabi_dmul>
 8002b9e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8002ba2:	460c      	mov	r4, r1
 8002ba4:	1523      	asrs	r3, r4, #20
 8002ba6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8002baa:	4413      	add	r3, r2
 8002bac:	9305      	str	r3, [sp, #20]
 8002bae:	4bd0      	ldr	r3, [pc, #832]	; (8002ef0 <__ieee754_pow+0x760>)
 8002bb0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8002bb4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8002bb8:	429c      	cmp	r4, r3
 8002bba:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8002bbe:	dd08      	ble.n	8002bd2 <__ieee754_pow+0x442>
 8002bc0:	4bcc      	ldr	r3, [pc, #816]	; (8002ef4 <__ieee754_pow+0x764>)
 8002bc2:	429c      	cmp	r4, r3
 8002bc4:	f340 8162 	ble.w	8002e8c <__ieee754_pow+0x6fc>
 8002bc8:	9b05      	ldr	r3, [sp, #20]
 8002bca:	3301      	adds	r3, #1
 8002bcc:	9305      	str	r3, [sp, #20]
 8002bce:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8002bd2:	2400      	movs	r4, #0
 8002bd4:	00e3      	lsls	r3, r4, #3
 8002bd6:	9307      	str	r3, [sp, #28]
 8002bd8:	4bc7      	ldr	r3, [pc, #796]	; (8002ef8 <__ieee754_pow+0x768>)
 8002bda:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8002bde:	ed93 7b00 	vldr	d7, [r3]
 8002be2:	4629      	mov	r1, r5
 8002be4:	ec53 2b17 	vmov	r2, r3, d7
 8002be8:	eeb0 9a47 	vmov.f32	s18, s14
 8002bec:	eef0 9a67 	vmov.f32	s19, s15
 8002bf0:	4682      	mov	sl, r0
 8002bf2:	f7fd fb09 	bl	8000208 <__aeabi_dsub>
 8002bf6:	4652      	mov	r2, sl
 8002bf8:	4606      	mov	r6, r0
 8002bfa:	460f      	mov	r7, r1
 8002bfc:	462b      	mov	r3, r5
 8002bfe:	ec51 0b19 	vmov	r0, r1, d9
 8002c02:	f7fd fb03 	bl	800020c <__adddf3>
 8002c06:	4602      	mov	r2, r0
 8002c08:	460b      	mov	r3, r1
 8002c0a:	2000      	movs	r0, #0
 8002c0c:	49bb      	ldr	r1, [pc, #748]	; (8002efc <__ieee754_pow+0x76c>)
 8002c0e:	f7fd fddd 	bl	80007cc <__aeabi_ddiv>
 8002c12:	ec41 0b1a 	vmov	d10, r0, r1
 8002c16:	4602      	mov	r2, r0
 8002c18:	460b      	mov	r3, r1
 8002c1a:	4630      	mov	r0, r6
 8002c1c:	4639      	mov	r1, r7
 8002c1e:	f7fd fcab 	bl	8000578 <__aeabi_dmul>
 8002c22:	2300      	movs	r3, #0
 8002c24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002c28:	9302      	str	r3, [sp, #8]
 8002c2a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8002c2e:	46ab      	mov	fp, r5
 8002c30:	106d      	asrs	r5, r5, #1
 8002c32:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8002c36:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8002c3a:	ec41 0b18 	vmov	d8, r0, r1
 8002c3e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8002c42:	2200      	movs	r2, #0
 8002c44:	4640      	mov	r0, r8
 8002c46:	4649      	mov	r1, r9
 8002c48:	4614      	mov	r4, r2
 8002c4a:	461d      	mov	r5, r3
 8002c4c:	f7fd fc94 	bl	8000578 <__aeabi_dmul>
 8002c50:	4602      	mov	r2, r0
 8002c52:	460b      	mov	r3, r1
 8002c54:	4630      	mov	r0, r6
 8002c56:	4639      	mov	r1, r7
 8002c58:	f7fd fad6 	bl	8000208 <__aeabi_dsub>
 8002c5c:	ec53 2b19 	vmov	r2, r3, d9
 8002c60:	4606      	mov	r6, r0
 8002c62:	460f      	mov	r7, r1
 8002c64:	4620      	mov	r0, r4
 8002c66:	4629      	mov	r1, r5
 8002c68:	f7fd face 	bl	8000208 <__aeabi_dsub>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	460b      	mov	r3, r1
 8002c70:	4650      	mov	r0, sl
 8002c72:	4659      	mov	r1, fp
 8002c74:	f7fd fac8 	bl	8000208 <__aeabi_dsub>
 8002c78:	4642      	mov	r2, r8
 8002c7a:	464b      	mov	r3, r9
 8002c7c:	f7fd fc7c 	bl	8000578 <__aeabi_dmul>
 8002c80:	4602      	mov	r2, r0
 8002c82:	460b      	mov	r3, r1
 8002c84:	4630      	mov	r0, r6
 8002c86:	4639      	mov	r1, r7
 8002c88:	f7fd fabe 	bl	8000208 <__aeabi_dsub>
 8002c8c:	ec53 2b1a 	vmov	r2, r3, d10
 8002c90:	f7fd fc72 	bl	8000578 <__aeabi_dmul>
 8002c94:	ec53 2b18 	vmov	r2, r3, d8
 8002c98:	ec41 0b19 	vmov	d9, r0, r1
 8002c9c:	ec51 0b18 	vmov	r0, r1, d8
 8002ca0:	f7fd fc6a 	bl	8000578 <__aeabi_dmul>
 8002ca4:	a37c      	add	r3, pc, #496	; (adr r3, 8002e98 <__ieee754_pow+0x708>)
 8002ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002caa:	4604      	mov	r4, r0
 8002cac:	460d      	mov	r5, r1
 8002cae:	f7fd fc63 	bl	8000578 <__aeabi_dmul>
 8002cb2:	a37b      	add	r3, pc, #492	; (adr r3, 8002ea0 <__ieee754_pow+0x710>)
 8002cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cb8:	f7fd faa8 	bl	800020c <__adddf3>
 8002cbc:	4622      	mov	r2, r4
 8002cbe:	462b      	mov	r3, r5
 8002cc0:	f7fd fc5a 	bl	8000578 <__aeabi_dmul>
 8002cc4:	a378      	add	r3, pc, #480	; (adr r3, 8002ea8 <__ieee754_pow+0x718>)
 8002cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cca:	f7fd fa9f 	bl	800020c <__adddf3>
 8002cce:	4622      	mov	r2, r4
 8002cd0:	462b      	mov	r3, r5
 8002cd2:	f7fd fc51 	bl	8000578 <__aeabi_dmul>
 8002cd6:	a376      	add	r3, pc, #472	; (adr r3, 8002eb0 <__ieee754_pow+0x720>)
 8002cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cdc:	f7fd fa96 	bl	800020c <__adddf3>
 8002ce0:	4622      	mov	r2, r4
 8002ce2:	462b      	mov	r3, r5
 8002ce4:	f7fd fc48 	bl	8000578 <__aeabi_dmul>
 8002ce8:	a373      	add	r3, pc, #460	; (adr r3, 8002eb8 <__ieee754_pow+0x728>)
 8002cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cee:	f7fd fa8d 	bl	800020c <__adddf3>
 8002cf2:	4622      	mov	r2, r4
 8002cf4:	462b      	mov	r3, r5
 8002cf6:	f7fd fc3f 	bl	8000578 <__aeabi_dmul>
 8002cfa:	a371      	add	r3, pc, #452	; (adr r3, 8002ec0 <__ieee754_pow+0x730>)
 8002cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d00:	f7fd fa84 	bl	800020c <__adddf3>
 8002d04:	4622      	mov	r2, r4
 8002d06:	4606      	mov	r6, r0
 8002d08:	460f      	mov	r7, r1
 8002d0a:	462b      	mov	r3, r5
 8002d0c:	4620      	mov	r0, r4
 8002d0e:	4629      	mov	r1, r5
 8002d10:	f7fd fc32 	bl	8000578 <__aeabi_dmul>
 8002d14:	4602      	mov	r2, r0
 8002d16:	460b      	mov	r3, r1
 8002d18:	4630      	mov	r0, r6
 8002d1a:	4639      	mov	r1, r7
 8002d1c:	f7fd fc2c 	bl	8000578 <__aeabi_dmul>
 8002d20:	4642      	mov	r2, r8
 8002d22:	4604      	mov	r4, r0
 8002d24:	460d      	mov	r5, r1
 8002d26:	464b      	mov	r3, r9
 8002d28:	ec51 0b18 	vmov	r0, r1, d8
 8002d2c:	f7fd fa6e 	bl	800020c <__adddf3>
 8002d30:	ec53 2b19 	vmov	r2, r3, d9
 8002d34:	f7fd fc20 	bl	8000578 <__aeabi_dmul>
 8002d38:	4622      	mov	r2, r4
 8002d3a:	462b      	mov	r3, r5
 8002d3c:	f7fd fa66 	bl	800020c <__adddf3>
 8002d40:	4642      	mov	r2, r8
 8002d42:	4682      	mov	sl, r0
 8002d44:	468b      	mov	fp, r1
 8002d46:	464b      	mov	r3, r9
 8002d48:	4640      	mov	r0, r8
 8002d4a:	4649      	mov	r1, r9
 8002d4c:	f7fd fc14 	bl	8000578 <__aeabi_dmul>
 8002d50:	4b6b      	ldr	r3, [pc, #428]	; (8002f00 <__ieee754_pow+0x770>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	4606      	mov	r6, r0
 8002d56:	460f      	mov	r7, r1
 8002d58:	f7fd fa58 	bl	800020c <__adddf3>
 8002d5c:	4652      	mov	r2, sl
 8002d5e:	465b      	mov	r3, fp
 8002d60:	f7fd fa54 	bl	800020c <__adddf3>
 8002d64:	2000      	movs	r0, #0
 8002d66:	4604      	mov	r4, r0
 8002d68:	460d      	mov	r5, r1
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	4640      	mov	r0, r8
 8002d70:	4649      	mov	r1, r9
 8002d72:	f7fd fc01 	bl	8000578 <__aeabi_dmul>
 8002d76:	4b62      	ldr	r3, [pc, #392]	; (8002f00 <__ieee754_pow+0x770>)
 8002d78:	4680      	mov	r8, r0
 8002d7a:	4689      	mov	r9, r1
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	4620      	mov	r0, r4
 8002d80:	4629      	mov	r1, r5
 8002d82:	f7fd fa41 	bl	8000208 <__aeabi_dsub>
 8002d86:	4632      	mov	r2, r6
 8002d88:	463b      	mov	r3, r7
 8002d8a:	f7fd fa3d 	bl	8000208 <__aeabi_dsub>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	460b      	mov	r3, r1
 8002d92:	4650      	mov	r0, sl
 8002d94:	4659      	mov	r1, fp
 8002d96:	f7fd fa37 	bl	8000208 <__aeabi_dsub>
 8002d9a:	ec53 2b18 	vmov	r2, r3, d8
 8002d9e:	f7fd fbeb 	bl	8000578 <__aeabi_dmul>
 8002da2:	4622      	mov	r2, r4
 8002da4:	4606      	mov	r6, r0
 8002da6:	460f      	mov	r7, r1
 8002da8:	462b      	mov	r3, r5
 8002daa:	ec51 0b19 	vmov	r0, r1, d9
 8002dae:	f7fd fbe3 	bl	8000578 <__aeabi_dmul>
 8002db2:	4602      	mov	r2, r0
 8002db4:	460b      	mov	r3, r1
 8002db6:	4630      	mov	r0, r6
 8002db8:	4639      	mov	r1, r7
 8002dba:	f7fd fa27 	bl	800020c <__adddf3>
 8002dbe:	4606      	mov	r6, r0
 8002dc0:	460f      	mov	r7, r1
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	4640      	mov	r0, r8
 8002dc8:	4649      	mov	r1, r9
 8002dca:	f7fd fa1f 	bl	800020c <__adddf3>
 8002dce:	a33e      	add	r3, pc, #248	; (adr r3, 8002ec8 <__ieee754_pow+0x738>)
 8002dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd4:	2000      	movs	r0, #0
 8002dd6:	4604      	mov	r4, r0
 8002dd8:	460d      	mov	r5, r1
 8002dda:	f7fd fbcd 	bl	8000578 <__aeabi_dmul>
 8002dde:	4642      	mov	r2, r8
 8002de0:	ec41 0b18 	vmov	d8, r0, r1
 8002de4:	464b      	mov	r3, r9
 8002de6:	4620      	mov	r0, r4
 8002de8:	4629      	mov	r1, r5
 8002dea:	f7fd fa0d 	bl	8000208 <__aeabi_dsub>
 8002dee:	4602      	mov	r2, r0
 8002df0:	460b      	mov	r3, r1
 8002df2:	4630      	mov	r0, r6
 8002df4:	4639      	mov	r1, r7
 8002df6:	f7fd fa07 	bl	8000208 <__aeabi_dsub>
 8002dfa:	a335      	add	r3, pc, #212	; (adr r3, 8002ed0 <__ieee754_pow+0x740>)
 8002dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e00:	f7fd fbba 	bl	8000578 <__aeabi_dmul>
 8002e04:	a334      	add	r3, pc, #208	; (adr r3, 8002ed8 <__ieee754_pow+0x748>)
 8002e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e0a:	4606      	mov	r6, r0
 8002e0c:	460f      	mov	r7, r1
 8002e0e:	4620      	mov	r0, r4
 8002e10:	4629      	mov	r1, r5
 8002e12:	f7fd fbb1 	bl	8000578 <__aeabi_dmul>
 8002e16:	4602      	mov	r2, r0
 8002e18:	460b      	mov	r3, r1
 8002e1a:	4630      	mov	r0, r6
 8002e1c:	4639      	mov	r1, r7
 8002e1e:	f7fd f9f5 	bl	800020c <__adddf3>
 8002e22:	9a07      	ldr	r2, [sp, #28]
 8002e24:	4b37      	ldr	r3, [pc, #220]	; (8002f04 <__ieee754_pow+0x774>)
 8002e26:	4413      	add	r3, r2
 8002e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e2c:	f7fd f9ee 	bl	800020c <__adddf3>
 8002e30:	4682      	mov	sl, r0
 8002e32:	9805      	ldr	r0, [sp, #20]
 8002e34:	468b      	mov	fp, r1
 8002e36:	f7fd fb35 	bl	80004a4 <__aeabi_i2d>
 8002e3a:	9a07      	ldr	r2, [sp, #28]
 8002e3c:	4b32      	ldr	r3, [pc, #200]	; (8002f08 <__ieee754_pow+0x778>)
 8002e3e:	4413      	add	r3, r2
 8002e40:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002e44:	4606      	mov	r6, r0
 8002e46:	460f      	mov	r7, r1
 8002e48:	4652      	mov	r2, sl
 8002e4a:	465b      	mov	r3, fp
 8002e4c:	ec51 0b18 	vmov	r0, r1, d8
 8002e50:	f7fd f9dc 	bl	800020c <__adddf3>
 8002e54:	4642      	mov	r2, r8
 8002e56:	464b      	mov	r3, r9
 8002e58:	f7fd f9d8 	bl	800020c <__adddf3>
 8002e5c:	4632      	mov	r2, r6
 8002e5e:	463b      	mov	r3, r7
 8002e60:	f7fd f9d4 	bl	800020c <__adddf3>
 8002e64:	2000      	movs	r0, #0
 8002e66:	4632      	mov	r2, r6
 8002e68:	463b      	mov	r3, r7
 8002e6a:	4604      	mov	r4, r0
 8002e6c:	460d      	mov	r5, r1
 8002e6e:	f7fd f9cb 	bl	8000208 <__aeabi_dsub>
 8002e72:	4642      	mov	r2, r8
 8002e74:	464b      	mov	r3, r9
 8002e76:	f7fd f9c7 	bl	8000208 <__aeabi_dsub>
 8002e7a:	ec53 2b18 	vmov	r2, r3, d8
 8002e7e:	f7fd f9c3 	bl	8000208 <__aeabi_dsub>
 8002e82:	4602      	mov	r2, r0
 8002e84:	460b      	mov	r3, r1
 8002e86:	4650      	mov	r0, sl
 8002e88:	4659      	mov	r1, fp
 8002e8a:	e610      	b.n	8002aae <__ieee754_pow+0x31e>
 8002e8c:	2401      	movs	r4, #1
 8002e8e:	e6a1      	b.n	8002bd4 <__ieee754_pow+0x444>
 8002e90:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8002ee0 <__ieee754_pow+0x750>
 8002e94:	e617      	b.n	8002ac6 <__ieee754_pow+0x336>
 8002e96:	bf00      	nop
 8002e98:	4a454eef 	.word	0x4a454eef
 8002e9c:	3fca7e28 	.word	0x3fca7e28
 8002ea0:	93c9db65 	.word	0x93c9db65
 8002ea4:	3fcd864a 	.word	0x3fcd864a
 8002ea8:	a91d4101 	.word	0xa91d4101
 8002eac:	3fd17460 	.word	0x3fd17460
 8002eb0:	518f264d 	.word	0x518f264d
 8002eb4:	3fd55555 	.word	0x3fd55555
 8002eb8:	db6fabff 	.word	0xdb6fabff
 8002ebc:	3fdb6db6 	.word	0x3fdb6db6
 8002ec0:	33333303 	.word	0x33333303
 8002ec4:	3fe33333 	.word	0x3fe33333
 8002ec8:	e0000000 	.word	0xe0000000
 8002ecc:	3feec709 	.word	0x3feec709
 8002ed0:	dc3a03fd 	.word	0xdc3a03fd
 8002ed4:	3feec709 	.word	0x3feec709
 8002ed8:	145b01f5 	.word	0x145b01f5
 8002edc:	be3e2fe0 	.word	0xbe3e2fe0
 8002ee0:	00000000 	.word	0x00000000
 8002ee4:	3ff00000 	.word	0x3ff00000
 8002ee8:	7ff00000 	.word	0x7ff00000
 8002eec:	43400000 	.word	0x43400000
 8002ef0:	0003988e 	.word	0x0003988e
 8002ef4:	000bb679 	.word	0x000bb679
 8002ef8:	080044e8 	.word	0x080044e8
 8002efc:	3ff00000 	.word	0x3ff00000
 8002f00:	40080000 	.word	0x40080000
 8002f04:	08004508 	.word	0x08004508
 8002f08:	080044f8 	.word	0x080044f8
 8002f0c:	a3b5      	add	r3, pc, #724	; (adr r3, 80031e4 <__ieee754_pow+0xa54>)
 8002f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f12:	4640      	mov	r0, r8
 8002f14:	4649      	mov	r1, r9
 8002f16:	f7fd f979 	bl	800020c <__adddf3>
 8002f1a:	4622      	mov	r2, r4
 8002f1c:	ec41 0b1a 	vmov	d10, r0, r1
 8002f20:	462b      	mov	r3, r5
 8002f22:	4630      	mov	r0, r6
 8002f24:	4639      	mov	r1, r7
 8002f26:	f7fd f96f 	bl	8000208 <__aeabi_dsub>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	460b      	mov	r3, r1
 8002f2e:	ec51 0b1a 	vmov	r0, r1, d10
 8002f32:	f7fd fdb1 	bl	8000a98 <__aeabi_dcmpgt>
 8002f36:	2800      	cmp	r0, #0
 8002f38:	f47f ae04 	bne.w	8002b44 <__ieee754_pow+0x3b4>
 8002f3c:	4aa4      	ldr	r2, [pc, #656]	; (80031d0 <__ieee754_pow+0xa40>)
 8002f3e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8002f42:	4293      	cmp	r3, r2
 8002f44:	f340 8108 	ble.w	8003158 <__ieee754_pow+0x9c8>
 8002f48:	151b      	asrs	r3, r3, #20
 8002f4a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8002f4e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8002f52:	fa4a f303 	asr.w	r3, sl, r3
 8002f56:	445b      	add	r3, fp
 8002f58:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8002f5c:	4e9d      	ldr	r6, [pc, #628]	; (80031d4 <__ieee754_pow+0xa44>)
 8002f5e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8002f62:	4116      	asrs	r6, r2
 8002f64:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8002f68:	2000      	movs	r0, #0
 8002f6a:	ea23 0106 	bic.w	r1, r3, r6
 8002f6e:	f1c2 0214 	rsb	r2, r2, #20
 8002f72:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8002f76:	fa4a fa02 	asr.w	sl, sl, r2
 8002f7a:	f1bb 0f00 	cmp.w	fp, #0
 8002f7e:	4602      	mov	r2, r0
 8002f80:	460b      	mov	r3, r1
 8002f82:	4620      	mov	r0, r4
 8002f84:	4629      	mov	r1, r5
 8002f86:	bfb8      	it	lt
 8002f88:	f1ca 0a00 	rsblt	sl, sl, #0
 8002f8c:	f7fd f93c 	bl	8000208 <__aeabi_dsub>
 8002f90:	ec41 0b19 	vmov	d9, r0, r1
 8002f94:	4642      	mov	r2, r8
 8002f96:	464b      	mov	r3, r9
 8002f98:	ec51 0b19 	vmov	r0, r1, d9
 8002f9c:	f7fd f936 	bl	800020c <__adddf3>
 8002fa0:	a37b      	add	r3, pc, #492	; (adr r3, 8003190 <__ieee754_pow+0xa00>)
 8002fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fa6:	2000      	movs	r0, #0
 8002fa8:	4604      	mov	r4, r0
 8002faa:	460d      	mov	r5, r1
 8002fac:	f7fd fae4 	bl	8000578 <__aeabi_dmul>
 8002fb0:	ec53 2b19 	vmov	r2, r3, d9
 8002fb4:	4606      	mov	r6, r0
 8002fb6:	460f      	mov	r7, r1
 8002fb8:	4620      	mov	r0, r4
 8002fba:	4629      	mov	r1, r5
 8002fbc:	f7fd f924 	bl	8000208 <__aeabi_dsub>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	4640      	mov	r0, r8
 8002fc6:	4649      	mov	r1, r9
 8002fc8:	f7fd f91e 	bl	8000208 <__aeabi_dsub>
 8002fcc:	a372      	add	r3, pc, #456	; (adr r3, 8003198 <__ieee754_pow+0xa08>)
 8002fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fd2:	f7fd fad1 	bl	8000578 <__aeabi_dmul>
 8002fd6:	a372      	add	r3, pc, #456	; (adr r3, 80031a0 <__ieee754_pow+0xa10>)
 8002fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fdc:	4680      	mov	r8, r0
 8002fde:	4689      	mov	r9, r1
 8002fe0:	4620      	mov	r0, r4
 8002fe2:	4629      	mov	r1, r5
 8002fe4:	f7fd fac8 	bl	8000578 <__aeabi_dmul>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	460b      	mov	r3, r1
 8002fec:	4640      	mov	r0, r8
 8002fee:	4649      	mov	r1, r9
 8002ff0:	f7fd f90c 	bl	800020c <__adddf3>
 8002ff4:	4604      	mov	r4, r0
 8002ff6:	460d      	mov	r5, r1
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	4630      	mov	r0, r6
 8002ffe:	4639      	mov	r1, r7
 8003000:	f7fd f904 	bl	800020c <__adddf3>
 8003004:	4632      	mov	r2, r6
 8003006:	463b      	mov	r3, r7
 8003008:	4680      	mov	r8, r0
 800300a:	4689      	mov	r9, r1
 800300c:	f7fd f8fc 	bl	8000208 <__aeabi_dsub>
 8003010:	4602      	mov	r2, r0
 8003012:	460b      	mov	r3, r1
 8003014:	4620      	mov	r0, r4
 8003016:	4629      	mov	r1, r5
 8003018:	f7fd f8f6 	bl	8000208 <__aeabi_dsub>
 800301c:	4642      	mov	r2, r8
 800301e:	4606      	mov	r6, r0
 8003020:	460f      	mov	r7, r1
 8003022:	464b      	mov	r3, r9
 8003024:	4640      	mov	r0, r8
 8003026:	4649      	mov	r1, r9
 8003028:	f7fd faa6 	bl	8000578 <__aeabi_dmul>
 800302c:	a35e      	add	r3, pc, #376	; (adr r3, 80031a8 <__ieee754_pow+0xa18>)
 800302e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003032:	4604      	mov	r4, r0
 8003034:	460d      	mov	r5, r1
 8003036:	f7fd fa9f 	bl	8000578 <__aeabi_dmul>
 800303a:	a35d      	add	r3, pc, #372	; (adr r3, 80031b0 <__ieee754_pow+0xa20>)
 800303c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003040:	f7fd f8e2 	bl	8000208 <__aeabi_dsub>
 8003044:	4622      	mov	r2, r4
 8003046:	462b      	mov	r3, r5
 8003048:	f7fd fa96 	bl	8000578 <__aeabi_dmul>
 800304c:	a35a      	add	r3, pc, #360	; (adr r3, 80031b8 <__ieee754_pow+0xa28>)
 800304e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003052:	f7fd f8db 	bl	800020c <__adddf3>
 8003056:	4622      	mov	r2, r4
 8003058:	462b      	mov	r3, r5
 800305a:	f7fd fa8d 	bl	8000578 <__aeabi_dmul>
 800305e:	a358      	add	r3, pc, #352	; (adr r3, 80031c0 <__ieee754_pow+0xa30>)
 8003060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003064:	f7fd f8d0 	bl	8000208 <__aeabi_dsub>
 8003068:	4622      	mov	r2, r4
 800306a:	462b      	mov	r3, r5
 800306c:	f7fd fa84 	bl	8000578 <__aeabi_dmul>
 8003070:	a355      	add	r3, pc, #340	; (adr r3, 80031c8 <__ieee754_pow+0xa38>)
 8003072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003076:	f7fd f8c9 	bl	800020c <__adddf3>
 800307a:	4622      	mov	r2, r4
 800307c:	462b      	mov	r3, r5
 800307e:	f7fd fa7b 	bl	8000578 <__aeabi_dmul>
 8003082:	4602      	mov	r2, r0
 8003084:	460b      	mov	r3, r1
 8003086:	4640      	mov	r0, r8
 8003088:	4649      	mov	r1, r9
 800308a:	f7fd f8bd 	bl	8000208 <__aeabi_dsub>
 800308e:	4604      	mov	r4, r0
 8003090:	460d      	mov	r5, r1
 8003092:	4602      	mov	r2, r0
 8003094:	460b      	mov	r3, r1
 8003096:	4640      	mov	r0, r8
 8003098:	4649      	mov	r1, r9
 800309a:	f7fd fa6d 	bl	8000578 <__aeabi_dmul>
 800309e:	2200      	movs	r2, #0
 80030a0:	ec41 0b19 	vmov	d9, r0, r1
 80030a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80030a8:	4620      	mov	r0, r4
 80030aa:	4629      	mov	r1, r5
 80030ac:	f7fd f8ac 	bl	8000208 <__aeabi_dsub>
 80030b0:	4602      	mov	r2, r0
 80030b2:	460b      	mov	r3, r1
 80030b4:	ec51 0b19 	vmov	r0, r1, d9
 80030b8:	f7fd fb88 	bl	80007cc <__aeabi_ddiv>
 80030bc:	4632      	mov	r2, r6
 80030be:	4604      	mov	r4, r0
 80030c0:	460d      	mov	r5, r1
 80030c2:	463b      	mov	r3, r7
 80030c4:	4640      	mov	r0, r8
 80030c6:	4649      	mov	r1, r9
 80030c8:	f7fd fa56 	bl	8000578 <__aeabi_dmul>
 80030cc:	4632      	mov	r2, r6
 80030ce:	463b      	mov	r3, r7
 80030d0:	f7fd f89c 	bl	800020c <__adddf3>
 80030d4:	4602      	mov	r2, r0
 80030d6:	460b      	mov	r3, r1
 80030d8:	4620      	mov	r0, r4
 80030da:	4629      	mov	r1, r5
 80030dc:	f7fd f894 	bl	8000208 <__aeabi_dsub>
 80030e0:	4642      	mov	r2, r8
 80030e2:	464b      	mov	r3, r9
 80030e4:	f7fd f890 	bl	8000208 <__aeabi_dsub>
 80030e8:	460b      	mov	r3, r1
 80030ea:	4602      	mov	r2, r0
 80030ec:	493a      	ldr	r1, [pc, #232]	; (80031d8 <__ieee754_pow+0xa48>)
 80030ee:	2000      	movs	r0, #0
 80030f0:	f7fd f88a 	bl	8000208 <__aeabi_dsub>
 80030f4:	ec41 0b10 	vmov	d0, r0, r1
 80030f8:	ee10 3a90 	vmov	r3, s1
 80030fc:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8003100:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003104:	da2b      	bge.n	800315e <__ieee754_pow+0x9ce>
 8003106:	4650      	mov	r0, sl
 8003108:	f000 f96a 	bl	80033e0 <scalbn>
 800310c:	ec51 0b10 	vmov	r0, r1, d0
 8003110:	ec53 2b18 	vmov	r2, r3, d8
 8003114:	f7ff bbed 	b.w	80028f2 <__ieee754_pow+0x162>
 8003118:	4b30      	ldr	r3, [pc, #192]	; (80031dc <__ieee754_pow+0xa4c>)
 800311a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800311e:	429e      	cmp	r6, r3
 8003120:	f77f af0c 	ble.w	8002f3c <__ieee754_pow+0x7ac>
 8003124:	4b2e      	ldr	r3, [pc, #184]	; (80031e0 <__ieee754_pow+0xa50>)
 8003126:	440b      	add	r3, r1
 8003128:	4303      	orrs	r3, r0
 800312a:	d009      	beq.n	8003140 <__ieee754_pow+0x9b0>
 800312c:	ec51 0b18 	vmov	r0, r1, d8
 8003130:	2200      	movs	r2, #0
 8003132:	2300      	movs	r3, #0
 8003134:	f7fd fc92 	bl	8000a5c <__aeabi_dcmplt>
 8003138:	3800      	subs	r0, #0
 800313a:	bf18      	it	ne
 800313c:	2001      	movne	r0, #1
 800313e:	e447      	b.n	80029d0 <__ieee754_pow+0x240>
 8003140:	4622      	mov	r2, r4
 8003142:	462b      	mov	r3, r5
 8003144:	f7fd f860 	bl	8000208 <__aeabi_dsub>
 8003148:	4642      	mov	r2, r8
 800314a:	464b      	mov	r3, r9
 800314c:	f7fd fc9a 	bl	8000a84 <__aeabi_dcmpge>
 8003150:	2800      	cmp	r0, #0
 8003152:	f43f aef3 	beq.w	8002f3c <__ieee754_pow+0x7ac>
 8003156:	e7e9      	b.n	800312c <__ieee754_pow+0x99c>
 8003158:	f04f 0a00 	mov.w	sl, #0
 800315c:	e71a      	b.n	8002f94 <__ieee754_pow+0x804>
 800315e:	ec51 0b10 	vmov	r0, r1, d0
 8003162:	4619      	mov	r1, r3
 8003164:	e7d4      	b.n	8003110 <__ieee754_pow+0x980>
 8003166:	491c      	ldr	r1, [pc, #112]	; (80031d8 <__ieee754_pow+0xa48>)
 8003168:	2000      	movs	r0, #0
 800316a:	f7ff bb30 	b.w	80027ce <__ieee754_pow+0x3e>
 800316e:	2000      	movs	r0, #0
 8003170:	2100      	movs	r1, #0
 8003172:	f7ff bb2c 	b.w	80027ce <__ieee754_pow+0x3e>
 8003176:	4630      	mov	r0, r6
 8003178:	4639      	mov	r1, r7
 800317a:	f7ff bb28 	b.w	80027ce <__ieee754_pow+0x3e>
 800317e:	9204      	str	r2, [sp, #16]
 8003180:	f7ff bb7a 	b.w	8002878 <__ieee754_pow+0xe8>
 8003184:	2300      	movs	r3, #0
 8003186:	f7ff bb64 	b.w	8002852 <__ieee754_pow+0xc2>
 800318a:	bf00      	nop
 800318c:	f3af 8000 	nop.w
 8003190:	00000000 	.word	0x00000000
 8003194:	3fe62e43 	.word	0x3fe62e43
 8003198:	fefa39ef 	.word	0xfefa39ef
 800319c:	3fe62e42 	.word	0x3fe62e42
 80031a0:	0ca86c39 	.word	0x0ca86c39
 80031a4:	be205c61 	.word	0xbe205c61
 80031a8:	72bea4d0 	.word	0x72bea4d0
 80031ac:	3e663769 	.word	0x3e663769
 80031b0:	c5d26bf1 	.word	0xc5d26bf1
 80031b4:	3ebbbd41 	.word	0x3ebbbd41
 80031b8:	af25de2c 	.word	0xaf25de2c
 80031bc:	3f11566a 	.word	0x3f11566a
 80031c0:	16bebd93 	.word	0x16bebd93
 80031c4:	3f66c16c 	.word	0x3f66c16c
 80031c8:	5555553e 	.word	0x5555553e
 80031cc:	3fc55555 	.word	0x3fc55555
 80031d0:	3fe00000 	.word	0x3fe00000
 80031d4:	000fffff 	.word	0x000fffff
 80031d8:	3ff00000 	.word	0x3ff00000
 80031dc:	4090cbff 	.word	0x4090cbff
 80031e0:	3f6f3400 	.word	0x3f6f3400
 80031e4:	652b82fe 	.word	0x652b82fe
 80031e8:	3c971547 	.word	0x3c971547

080031ec <__ieee754_sqrt>:
 80031ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031f0:	ec55 4b10 	vmov	r4, r5, d0
 80031f4:	4e55      	ldr	r6, [pc, #340]	; (800334c <__ieee754_sqrt+0x160>)
 80031f6:	43ae      	bics	r6, r5
 80031f8:	ee10 0a10 	vmov	r0, s0
 80031fc:	ee10 3a10 	vmov	r3, s0
 8003200:	462a      	mov	r2, r5
 8003202:	4629      	mov	r1, r5
 8003204:	d110      	bne.n	8003228 <__ieee754_sqrt+0x3c>
 8003206:	ee10 2a10 	vmov	r2, s0
 800320a:	462b      	mov	r3, r5
 800320c:	f7fd f9b4 	bl	8000578 <__aeabi_dmul>
 8003210:	4602      	mov	r2, r0
 8003212:	460b      	mov	r3, r1
 8003214:	4620      	mov	r0, r4
 8003216:	4629      	mov	r1, r5
 8003218:	f7fc fff8 	bl	800020c <__adddf3>
 800321c:	4604      	mov	r4, r0
 800321e:	460d      	mov	r5, r1
 8003220:	ec45 4b10 	vmov	d0, r4, r5
 8003224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003228:	2d00      	cmp	r5, #0
 800322a:	dc10      	bgt.n	800324e <__ieee754_sqrt+0x62>
 800322c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8003230:	4330      	orrs	r0, r6
 8003232:	d0f5      	beq.n	8003220 <__ieee754_sqrt+0x34>
 8003234:	b15d      	cbz	r5, 800324e <__ieee754_sqrt+0x62>
 8003236:	ee10 2a10 	vmov	r2, s0
 800323a:	462b      	mov	r3, r5
 800323c:	ee10 0a10 	vmov	r0, s0
 8003240:	f7fc ffe2 	bl	8000208 <__aeabi_dsub>
 8003244:	4602      	mov	r2, r0
 8003246:	460b      	mov	r3, r1
 8003248:	f7fd fac0 	bl	80007cc <__aeabi_ddiv>
 800324c:	e7e6      	b.n	800321c <__ieee754_sqrt+0x30>
 800324e:	1512      	asrs	r2, r2, #20
 8003250:	d074      	beq.n	800333c <__ieee754_sqrt+0x150>
 8003252:	07d4      	lsls	r4, r2, #31
 8003254:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8003258:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800325c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8003260:	bf5e      	ittt	pl
 8003262:	0fda      	lsrpl	r2, r3, #31
 8003264:	005b      	lslpl	r3, r3, #1
 8003266:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800326a:	2400      	movs	r4, #0
 800326c:	0fda      	lsrs	r2, r3, #31
 800326e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8003272:	107f      	asrs	r7, r7, #1
 8003274:	005b      	lsls	r3, r3, #1
 8003276:	2516      	movs	r5, #22
 8003278:	4620      	mov	r0, r4
 800327a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800327e:	1886      	adds	r6, r0, r2
 8003280:	428e      	cmp	r6, r1
 8003282:	bfde      	ittt	le
 8003284:	1b89      	suble	r1, r1, r6
 8003286:	18b0      	addle	r0, r6, r2
 8003288:	18a4      	addle	r4, r4, r2
 800328a:	0049      	lsls	r1, r1, #1
 800328c:	3d01      	subs	r5, #1
 800328e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8003292:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8003296:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800329a:	d1f0      	bne.n	800327e <__ieee754_sqrt+0x92>
 800329c:	462a      	mov	r2, r5
 800329e:	f04f 0e20 	mov.w	lr, #32
 80032a2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80032a6:	4281      	cmp	r1, r0
 80032a8:	eb06 0c05 	add.w	ip, r6, r5
 80032ac:	dc02      	bgt.n	80032b4 <__ieee754_sqrt+0xc8>
 80032ae:	d113      	bne.n	80032d8 <__ieee754_sqrt+0xec>
 80032b0:	459c      	cmp	ip, r3
 80032b2:	d811      	bhi.n	80032d8 <__ieee754_sqrt+0xec>
 80032b4:	f1bc 0f00 	cmp.w	ip, #0
 80032b8:	eb0c 0506 	add.w	r5, ip, r6
 80032bc:	da43      	bge.n	8003346 <__ieee754_sqrt+0x15a>
 80032be:	2d00      	cmp	r5, #0
 80032c0:	db41      	blt.n	8003346 <__ieee754_sqrt+0x15a>
 80032c2:	f100 0801 	add.w	r8, r0, #1
 80032c6:	1a09      	subs	r1, r1, r0
 80032c8:	459c      	cmp	ip, r3
 80032ca:	bf88      	it	hi
 80032cc:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 80032d0:	eba3 030c 	sub.w	r3, r3, ip
 80032d4:	4432      	add	r2, r6
 80032d6:	4640      	mov	r0, r8
 80032d8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80032dc:	f1be 0e01 	subs.w	lr, lr, #1
 80032e0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80032e4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80032e8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80032ec:	d1db      	bne.n	80032a6 <__ieee754_sqrt+0xba>
 80032ee:	430b      	orrs	r3, r1
 80032f0:	d006      	beq.n	8003300 <__ieee754_sqrt+0x114>
 80032f2:	1c50      	adds	r0, r2, #1
 80032f4:	bf13      	iteet	ne
 80032f6:	3201      	addne	r2, #1
 80032f8:	3401      	addeq	r4, #1
 80032fa:	4672      	moveq	r2, lr
 80032fc:	f022 0201 	bicne.w	r2, r2, #1
 8003300:	1063      	asrs	r3, r4, #1
 8003302:	0852      	lsrs	r2, r2, #1
 8003304:	07e1      	lsls	r1, r4, #31
 8003306:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800330a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800330e:	bf48      	it	mi
 8003310:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8003314:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8003318:	4614      	mov	r4, r2
 800331a:	e781      	b.n	8003220 <__ieee754_sqrt+0x34>
 800331c:	0ad9      	lsrs	r1, r3, #11
 800331e:	3815      	subs	r0, #21
 8003320:	055b      	lsls	r3, r3, #21
 8003322:	2900      	cmp	r1, #0
 8003324:	d0fa      	beq.n	800331c <__ieee754_sqrt+0x130>
 8003326:	02cd      	lsls	r5, r1, #11
 8003328:	d50a      	bpl.n	8003340 <__ieee754_sqrt+0x154>
 800332a:	f1c2 0420 	rsb	r4, r2, #32
 800332e:	fa23 f404 	lsr.w	r4, r3, r4
 8003332:	1e55      	subs	r5, r2, #1
 8003334:	4093      	lsls	r3, r2
 8003336:	4321      	orrs	r1, r4
 8003338:	1b42      	subs	r2, r0, r5
 800333a:	e78a      	b.n	8003252 <__ieee754_sqrt+0x66>
 800333c:	4610      	mov	r0, r2
 800333e:	e7f0      	b.n	8003322 <__ieee754_sqrt+0x136>
 8003340:	0049      	lsls	r1, r1, #1
 8003342:	3201      	adds	r2, #1
 8003344:	e7ef      	b.n	8003326 <__ieee754_sqrt+0x13a>
 8003346:	4680      	mov	r8, r0
 8003348:	e7bd      	b.n	80032c6 <__ieee754_sqrt+0xda>
 800334a:	bf00      	nop
 800334c:	7ff00000 	.word	0x7ff00000

08003350 <__ieee754_sqrtf>:
 8003350:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8003354:	4770      	bx	lr

08003356 <with_errno>:
 8003356:	b570      	push	{r4, r5, r6, lr}
 8003358:	4604      	mov	r4, r0
 800335a:	460d      	mov	r5, r1
 800335c:	4616      	mov	r6, r2
 800335e:	f7ff f91d 	bl	800259c <__errno>
 8003362:	4629      	mov	r1, r5
 8003364:	6006      	str	r6, [r0, #0]
 8003366:	4620      	mov	r0, r4
 8003368:	bd70      	pop	{r4, r5, r6, pc}

0800336a <xflow>:
 800336a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800336c:	4614      	mov	r4, r2
 800336e:	461d      	mov	r5, r3
 8003370:	b108      	cbz	r0, 8003376 <xflow+0xc>
 8003372:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003376:	e9cd 2300 	strd	r2, r3, [sp]
 800337a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800337e:	4620      	mov	r0, r4
 8003380:	4629      	mov	r1, r5
 8003382:	f7fd f8f9 	bl	8000578 <__aeabi_dmul>
 8003386:	2222      	movs	r2, #34	; 0x22
 8003388:	b003      	add	sp, #12
 800338a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800338e:	f7ff bfe2 	b.w	8003356 <with_errno>

08003392 <__math_uflow>:
 8003392:	b508      	push	{r3, lr}
 8003394:	2200      	movs	r2, #0
 8003396:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800339a:	f7ff ffe6 	bl	800336a <xflow>
 800339e:	ec41 0b10 	vmov	d0, r0, r1
 80033a2:	bd08      	pop	{r3, pc}

080033a4 <__math_oflow>:
 80033a4:	b508      	push	{r3, lr}
 80033a6:	2200      	movs	r2, #0
 80033a8:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80033ac:	f7ff ffdd 	bl	800336a <xflow>
 80033b0:	ec41 0b10 	vmov	d0, r0, r1
 80033b4:	bd08      	pop	{r3, pc}

080033b6 <fabs>:
 80033b6:	ec51 0b10 	vmov	r0, r1, d0
 80033ba:	ee10 2a10 	vmov	r2, s0
 80033be:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80033c2:	ec43 2b10 	vmov	d0, r2, r3
 80033c6:	4770      	bx	lr

080033c8 <finite>:
 80033c8:	b082      	sub	sp, #8
 80033ca:	ed8d 0b00 	vstr	d0, [sp]
 80033ce:	9801      	ldr	r0, [sp, #4]
 80033d0:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80033d4:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80033d8:	0fc0      	lsrs	r0, r0, #31
 80033da:	b002      	add	sp, #8
 80033dc:	4770      	bx	lr
	...

080033e0 <scalbn>:
 80033e0:	b570      	push	{r4, r5, r6, lr}
 80033e2:	ec55 4b10 	vmov	r4, r5, d0
 80033e6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80033ea:	4606      	mov	r6, r0
 80033ec:	462b      	mov	r3, r5
 80033ee:	b99a      	cbnz	r2, 8003418 <scalbn+0x38>
 80033f0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80033f4:	4323      	orrs	r3, r4
 80033f6:	d036      	beq.n	8003466 <scalbn+0x86>
 80033f8:	4b39      	ldr	r3, [pc, #228]	; (80034e0 <scalbn+0x100>)
 80033fa:	4629      	mov	r1, r5
 80033fc:	ee10 0a10 	vmov	r0, s0
 8003400:	2200      	movs	r2, #0
 8003402:	f7fd f8b9 	bl	8000578 <__aeabi_dmul>
 8003406:	4b37      	ldr	r3, [pc, #220]	; (80034e4 <scalbn+0x104>)
 8003408:	429e      	cmp	r6, r3
 800340a:	4604      	mov	r4, r0
 800340c:	460d      	mov	r5, r1
 800340e:	da10      	bge.n	8003432 <scalbn+0x52>
 8003410:	a32b      	add	r3, pc, #172	; (adr r3, 80034c0 <scalbn+0xe0>)
 8003412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003416:	e03a      	b.n	800348e <scalbn+0xae>
 8003418:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800341c:	428a      	cmp	r2, r1
 800341e:	d10c      	bne.n	800343a <scalbn+0x5a>
 8003420:	ee10 2a10 	vmov	r2, s0
 8003424:	4620      	mov	r0, r4
 8003426:	4629      	mov	r1, r5
 8003428:	f7fc fef0 	bl	800020c <__adddf3>
 800342c:	4604      	mov	r4, r0
 800342e:	460d      	mov	r5, r1
 8003430:	e019      	b.n	8003466 <scalbn+0x86>
 8003432:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8003436:	460b      	mov	r3, r1
 8003438:	3a36      	subs	r2, #54	; 0x36
 800343a:	4432      	add	r2, r6
 800343c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8003440:	428a      	cmp	r2, r1
 8003442:	dd08      	ble.n	8003456 <scalbn+0x76>
 8003444:	2d00      	cmp	r5, #0
 8003446:	a120      	add	r1, pc, #128	; (adr r1, 80034c8 <scalbn+0xe8>)
 8003448:	e9d1 0100 	ldrd	r0, r1, [r1]
 800344c:	da1c      	bge.n	8003488 <scalbn+0xa8>
 800344e:	a120      	add	r1, pc, #128	; (adr r1, 80034d0 <scalbn+0xf0>)
 8003450:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003454:	e018      	b.n	8003488 <scalbn+0xa8>
 8003456:	2a00      	cmp	r2, #0
 8003458:	dd08      	ble.n	800346c <scalbn+0x8c>
 800345a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800345e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003462:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8003466:	ec45 4b10 	vmov	d0, r4, r5
 800346a:	bd70      	pop	{r4, r5, r6, pc}
 800346c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8003470:	da19      	bge.n	80034a6 <scalbn+0xc6>
 8003472:	f24c 3350 	movw	r3, #50000	; 0xc350
 8003476:	429e      	cmp	r6, r3
 8003478:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800347c:	dd0a      	ble.n	8003494 <scalbn+0xb4>
 800347e:	a112      	add	r1, pc, #72	; (adr r1, 80034c8 <scalbn+0xe8>)
 8003480:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d1e2      	bne.n	800344e <scalbn+0x6e>
 8003488:	a30f      	add	r3, pc, #60	; (adr r3, 80034c8 <scalbn+0xe8>)
 800348a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800348e:	f7fd f873 	bl	8000578 <__aeabi_dmul>
 8003492:	e7cb      	b.n	800342c <scalbn+0x4c>
 8003494:	a10a      	add	r1, pc, #40	; (adr r1, 80034c0 <scalbn+0xe0>)
 8003496:	e9d1 0100 	ldrd	r0, r1, [r1]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d0b8      	beq.n	8003410 <scalbn+0x30>
 800349e:	a10e      	add	r1, pc, #56	; (adr r1, 80034d8 <scalbn+0xf8>)
 80034a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80034a4:	e7b4      	b.n	8003410 <scalbn+0x30>
 80034a6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80034aa:	3236      	adds	r2, #54	; 0x36
 80034ac:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80034b0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80034b4:	4620      	mov	r0, r4
 80034b6:	4b0c      	ldr	r3, [pc, #48]	; (80034e8 <scalbn+0x108>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	e7e8      	b.n	800348e <scalbn+0xae>
 80034bc:	f3af 8000 	nop.w
 80034c0:	c2f8f359 	.word	0xc2f8f359
 80034c4:	01a56e1f 	.word	0x01a56e1f
 80034c8:	8800759c 	.word	0x8800759c
 80034cc:	7e37e43c 	.word	0x7e37e43c
 80034d0:	8800759c 	.word	0x8800759c
 80034d4:	fe37e43c 	.word	0xfe37e43c
 80034d8:	c2f8f359 	.word	0xc2f8f359
 80034dc:	81a56e1f 	.word	0x81a56e1f
 80034e0:	43500000 	.word	0x43500000
 80034e4:	ffff3cb0 	.word	0xffff3cb0
 80034e8:	3c900000 	.word	0x3c900000

080034ec <_init>:
 80034ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034ee:	bf00      	nop
 80034f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034f2:	bc08      	pop	{r3}
 80034f4:	469e      	mov	lr, r3
 80034f6:	4770      	bx	lr

080034f8 <_fini>:
 80034f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034fa:	bf00      	nop
 80034fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034fe:	bc08      	pop	{r3}
 8003500:	469e      	mov	lr, r3
 8003502:	4770      	bx	lr
